
projNOVEMBER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007140  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  080072d0  080072d0  000082d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007660  08007660  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007660  08007660  00008660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007668  08007668  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007668  08007668  00008668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800766c  0800766c  0000866c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007670  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d8  2**0
                  CONTENTS
 10 .bss          00000434  200001d8  200001d8  000091d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000060c  2000060c  000091d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d7b  00000000  00000000  00009208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002335  00000000  00000000  00019f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  0001c2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbf  00000000  00000000  0001d2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002250c  00000000  00000000  0001df97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001364f  00000000  00000000  000404a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfe9b  00000000  00000000  00053af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012398d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d8  00000000  00000000  001239d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00128ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072b8 	.word	0x080072b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080072b8 	.word	0x080072b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <HAL_TIM_IC_CaptureCallback>:
/*
 * HAL_TIM_IC_CaptureCallback(); is a Interrupt controller.
 * It is called when an interrupt generated in TIM channels
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a34      	ldr	r2, [pc, #208]	@ (8001014 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d114      	bne.n	8000f72 <HAL_TIM_IC_CaptureCallback+0x3a>
	{
		Counter_new_1= __HAL_TIM_GetCounter(htim);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4e:	4a32      	ldr	r2, [pc, #200]	@ (8001018 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000f50:	6013      	str	r3, [r2, #0]
		Count_1 = (int16_t)Counter_new_1/4;
 8000f52:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	da00      	bge.n	8000f5e <HAL_TIM_IC_CaptureCallback+0x26>
 8000f5c:	3303      	adds	r3, #3
 8000f5e:	109b      	asrs	r3, r3, #2
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	4b2e      	ldr	r3, [pc, #184]	@ (800101c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000f64:	801a      	strh	r2, [r3, #0]
		position_1 = Count_1;
 8000f66:	4b2d      	ldr	r3, [pc, #180]	@ (800101c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000f68:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000f6e:	801a      	strh	r2, [r3, #0]
			//uint8_t ENC_DMA_DATA_BUFF[]= ;
			Count_4 = (int16_t)Counter_new_4/4;
			position_4 = Count_4;
	}

}
 8000f70:	e049      	b.n	8001006 <HAL_TIM_IC_CaptureCallback+0xce>
	else if(htim == &htim2)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a2b      	ldr	r2, [pc, #172]	@ (8001024 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d114      	bne.n	8000fa4 <HAL_TIM_IC_CaptureCallback+0x6c>
		Counter_new_2 = __HAL_TIM_GetCounter(htim);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	4a29      	ldr	r2, [pc, #164]	@ (8001028 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f82:	6013      	str	r3, [r2, #0]
		Count_2 = (int16_t)Counter_new_2/4;
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da00      	bge.n	8000f90 <HAL_TIM_IC_CaptureCallback+0x58>
 8000f8e:	3303      	adds	r3, #3
 8000f90:	109b      	asrs	r3, r3, #2
 8000f92:	b21a      	sxth	r2, r3
 8000f94:	4b25      	ldr	r3, [pc, #148]	@ (800102c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f96:	801a      	strh	r2, [r3, #0]
		position_2 = Count_2;
 8000f98:	4b24      	ldr	r3, [pc, #144]	@ (800102c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000f9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f9e:	4b24      	ldr	r3, [pc, #144]	@ (8001030 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000fa0:	801a      	strh	r2, [r3, #0]
}
 8000fa2:	e030      	b.n	8001006 <HAL_TIM_IC_CaptureCallback+0xce>
	else if(htim == &htim3)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a23      	ldr	r2, [pc, #140]	@ (8001034 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d114      	bne.n	8000fd6 <HAL_TIM_IC_CaptureCallback+0x9e>
		Counter_new_3 = __HAL_TIM_GetCounter(htim);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb2:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fb4:	6013      	str	r3, [r2, #0]
		Count_3 = (int16_t)Counter_new_3/4;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b21b      	sxth	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da00      	bge.n	8000fc2 <HAL_TIM_IC_CaptureCallback+0x8a>
 8000fc0:	3303      	adds	r3, #3
 8000fc2:	109b      	asrs	r3, r3, #2
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000fc8:	801a      	strh	r2, [r3, #0]
		position_3 = Count_3;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x104>)
 8000fcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000fd2:	801a      	strh	r2, [r3, #0]
}
 8000fd4:	e017      	b.n	8001006 <HAL_TIM_IC_CaptureCallback+0xce>
	else if(htim == &htim4)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	@ (8001044 <HAL_TIM_IC_CaptureCallback+0x10c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d113      	bne.n	8001006 <HAL_TIM_IC_CaptureCallback+0xce>
			Counter_new_4 = __HAL_TIM_GetCounter(htim);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe4:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fe6:	6013      	str	r3, [r2, #0]
			Count_4 = (int16_t)Counter_new_4/4;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	da00      	bge.n	8000ff4 <HAL_TIM_IC_CaptureCallback+0xbc>
 8000ff2:	3303      	adds	r3, #3
 8000ff4:	109b      	asrs	r3, r3, #2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ffa:	801a      	strh	r2, [r3, #0]
			position_4 = Count_4;
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ffe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001004:	801a      	strh	r2, [r3, #0]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000278 	.word	0x20000278
 8001018:	200001f4 	.word	0x200001f4
 800101c:	20000204 	.word	0x20000204
 8001020:	2000020c 	.word	0x2000020c
 8001024:	200002c0 	.word	0x200002c0
 8001028:	200001f8 	.word	0x200001f8
 800102c:	20000206 	.word	0x20000206
 8001030:	2000020e 	.word	0x2000020e
 8001034:	20000308 	.word	0x20000308
 8001038:	200001fc 	.word	0x200001fc
 800103c:	20000208 	.word	0x20000208
 8001040:	20000210 	.word	0x20000210
 8001044:	20000350 	.word	0x20000350
 8001048:	20000200 	.word	0x20000200
 800104c:	2000020a 	.word	0x2000020a
 8001050:	20000212 	.word	0x20000212

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f001 f84c 	bl	80020f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f832 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 fae0 	bl	8001624 <MX_GPIO_Init>
  MX_DMA_Init();
 8001064:	f000 fabe 	bl	80015e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001068:	f000 f896 	bl	8001198 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800106c:	f000 fa90 	bl	8001590 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001070:	f000 f8c0 	bl	80011f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001074:	f000 f916 	bl	80012a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001078:	f000 f968 	bl	800134c <MX_TIM3_Init>
  MX_TIM4_Init();
 800107c:	f000 f9ba 	bl	80013f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001080:	f000 fa0c 	bl	800149c <MX_TIM5_Init>
//	  MPU9250_Read_Gyro();
//	  MPU9250_Read_Magnet();
//	  sprintf(MPU9250.Tx_Buff,"GYR_X=%-5.2f, GYR_Y=%-5.2f, GYR_Z=%-5.2f\nACC_X=%-5.2f, ACC_Y=%-5.2f, ACC_Z=%-5.2f\nMAG_X=%-5.2f, MAG_Y=%-5.2f, MAG_Z=%-5.2f\n\n",
//	  			   Gyr.X, Gyr.Y, Gyr.Z, Acc.X, Acc.Y, Acc.Z, Mag.X, Mag.Y, Mag.Z);
//	  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)MPU9250.Tx_Buff, 10);
	  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2110      	movs	r1, #16
 8001088:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <main+0x6c>)
 800108a:	f001 fe61 	bl	8002d50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_SET);
 800108e:	2201      	movs	r2, #1
 8001090:	210c      	movs	r1, #12
 8001092:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <main+0x6c>)
 8001094:	f001 fe5c 	bl	8002d50 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001098:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800109c:	f001 f89c 	bl	80021d8 <HAL_Delay>
	  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2110      	movs	r1, #16
 80010a4:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <main+0x6c>)
 80010a6:	f001 fe53 	bl	8002d50 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	210c      	movs	r1, #12
 80010ae:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <main+0x6c>)
 80010b0:	f001 fe4e 	bl	8002d50 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80010b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b8:	f001 f88e 	bl	80021d8 <HAL_Delay>
	  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80010bc:	bf00      	nop
 80010be:	e7e1      	b.n	8001084 <main+0x30>
 80010c0:	40021000 	.word	0x40021000

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	@ 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	@ 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f9cf 	bl	8005476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	4a27      	ldr	r2, [pc, #156]	@ (8001190 <SystemClock_Config+0xcc>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f8:	4b25      	ldr	r3, [pc, #148]	@ (8001190 <SystemClock_Config+0xcc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b22      	ldr	r3, [pc, #136]	@ (8001194 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <SystemClock_Config+0xd0>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <SystemClock_Config+0xd0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001134:	2308      	movs	r3, #8
 8001136:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001138:	23a8      	movs	r3, #168	@ 0xa8
 800113a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f001 ff5f 	bl	800300c <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001154:	f000 fada 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001164:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2105      	movs	r1, #5
 8001176:	4618      	mov	r0, r3
 8001178:	f002 f9c0 	bl	80034fc <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001182:	f000 fac3 	bl	800170c <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	@ 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <MX_I2C1_Init+0x50>)
 800119e:	4a13      	ldr	r2, [pc, #76]	@ (80011ec <MX_I2C1_Init+0x54>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <MX_I2C1_Init+0x58>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	@ (80011e8 <MX_I2C1_Init+0x50>)
 80011d6:	f001 fdd5 	bl	8002d84 <HAL_I2C_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011e0:	f000 fa94 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000224 	.word	0x20000224
 80011ec:	40005400 	.word	0x40005400
 80011f0:	000186a0 	.word	0x000186a0

080011f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08c      	sub	sp, #48	@ 0x30
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2224      	movs	r2, #36	@ 0x24
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f004 f937 	bl	8005476 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001210:	4b22      	ldr	r3, [pc, #136]	@ (800129c <MX_TIM1_Init+0xa8>)
 8001212:	4a23      	ldr	r2, [pc, #140]	@ (80012a0 <MX_TIM1_Init+0xac>)
 8001214:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001216:	4b21      	ldr	r3, [pc, #132]	@ (800129c <MX_TIM1_Init+0xa8>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <MX_TIM1_Init+0xa8>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001222:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <MX_TIM1_Init+0xa8>)
 8001224:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001228:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b1c      	ldr	r3, [pc, #112]	@ (800129c <MX_TIM1_Init+0xa8>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001230:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_TIM1_Init+0xa8>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b19      	ldr	r3, [pc, #100]	@ (800129c <MX_TIM1_Init+0xa8>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800123c:	2303      	movs	r3, #3
 800123e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001240:	2302      	movs	r3, #2
 8001242:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001244:	2301      	movs	r3, #1
 8001246:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001250:	2302      	movs	r3, #2
 8001252:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001254:	2301      	movs	r3, #1
 8001256:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	@ (800129c <MX_TIM1_Init+0xa8>)
 8001268:	f002 fb77 	bl	800395a <HAL_TIM_Encoder_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001272:	f000 fa4b 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	@ (800129c <MX_TIM1_Init+0xa8>)
 8001284:	f003 f846 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800128e:	f000 fa3d 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3730      	adds	r7, #48	@ 0x30
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000278 	.word	0x20000278
 80012a0:	40010000 	.word	0x40010000

080012a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	@ 0x30
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2224      	movs	r2, #36	@ 0x24
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f8df 	bl	8005476 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
////
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <MX_TIM2_Init+0xa4>)
 80012c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <MX_TIM2_Init+0xa4>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <MX_TIM2_Init+0xa4>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <MX_TIM2_Init+0xa4>)
 80012d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_TIM2_Init+0xa4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <MX_TIM2_Init+0xa4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e8:	2303      	movs	r3, #3
 80012ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80012ec:	2302      	movs	r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f0:	2301      	movs	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001300:	2301      	movs	r3, #1
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	@ (8001348 <MX_TIM2_Init+0xa4>)
 8001314:	f002 fb21 	bl	800395a <HAL_TIM_Encoder_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800131e:	f000 f9f5 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	@ (8001348 <MX_TIM2_Init+0xa4>)
 8001330:	f002 fff0 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800133a:	f000 f9e7 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	@ 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200002c0 	.word	0x200002c0

0800134c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08c      	sub	sp, #48	@ 0x30
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2224      	movs	r2, #36	@ 0x24
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f004 f88b 	bl	8005476 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
////
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <MX_TIM3_Init+0xa0>)
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <MX_TIM3_Init+0xa4>)
 800136c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800136e:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <MX_TIM3_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <MX_TIM3_Init+0xa0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800137a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ec <MX_TIM3_Init+0xa0>)
 800137c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001380:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001382:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <MX_TIM3_Init+0xa0>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001388:	4b18      	ldr	r3, [pc, #96]	@ (80013ec <MX_TIM3_Init+0xa0>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138e:	2303      	movs	r3, #3
 8001390:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001392:	2302      	movs	r3, #2
 8001394:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001396:	2301      	movs	r3, #1
 8001398:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013a2:	2302      	movs	r3, #2
 80013a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	2301      	movs	r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <MX_TIM3_Init+0xa0>)
 80013ba:	f002 face 	bl	800395a <HAL_TIM_Encoder_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013c4:	f000 f9a2 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_TIM3_Init+0xa0>)
 80013d6:	f002 ff9d 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013e0:	f000 f994 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
////
  /* USER CODE END TIM3_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	@ 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000308 	.word	0x20000308
 80013f0:	40000400 	.word	0x40000400

080013f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	@ 0x30
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
////
  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013fa:	f107 030c 	add.w	r3, r7, #12
 80013fe:	2224      	movs	r2, #36	@ 0x24
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f004 f837 	bl	8005476 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */
////
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001410:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001412:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <MX_TIM4_Init+0xa4>)
 8001414:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001416:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_TIM4_Init+0xa0>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001422:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001424:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001428:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <MX_TIM4_Init+0xa0>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001436:	2303      	movs	r3, #3
 8001438:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800143a:	2302      	movs	r3, #2
 800143c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800143e:	2301      	movs	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800144a:	2302      	movs	r3, #2
 800144c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800144e:	2301      	movs	r3, #1
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	@ (8001494 <MX_TIM4_Init+0xa0>)
 8001462:	f002 fa7a 	bl	800395a <HAL_TIM_Encoder_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800146c:	f000 f94e 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_TIM4_Init+0xa0>)
 800147e:	f002 ff49 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001488:	f000 f940 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
////
  /* USER CODE END TIM4_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3730      	adds	r7, #48	@ 0x30
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000350 	.word	0x20000350
 8001498:	40000800 	.word	0x40000800

0800149c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */
////
  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	611a      	str	r2, [r3, #16]
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */
////
  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014be:	4b32      	ldr	r3, [pc, #200]	@ (8001588 <MX_TIM5_Init+0xec>)
 80014c0:	4a32      	ldr	r2, [pc, #200]	@ (800158c <MX_TIM5_Init+0xf0>)
 80014c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014c4:	4b30      	ldr	r3, [pc, #192]	@ (8001588 <MX_TIM5_Init+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <MX_TIM5_Init+0xec>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 80014d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001588 <MX_TIM5_Init+0xec>)
 80014d2:	22ff      	movs	r2, #255	@ 0xff
 80014d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <MX_TIM5_Init+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <MX_TIM5_Init+0xec>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80014e2:	4829      	ldr	r0, [pc, #164]	@ (8001588 <MX_TIM5_Init+0xec>)
 80014e4:	f002 f9ea 	bl	80038bc <HAL_TIM_PWM_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80014ee:	f000 f90d 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	4619      	mov	r1, r3
 8001500:	4821      	ldr	r0, [pc, #132]	@ (8001588 <MX_TIM5_Init+0xec>)
 8001502:	f002 ff07 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800150c:	f000 f8fe 	bl	800170c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001510:	2360      	movs	r3, #96	@ 0x60
 8001512:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	4619      	mov	r1, r3
 8001526:	4818      	ldr	r0, [pc, #96]	@ (8001588 <MX_TIM5_Init+0xec>)
 8001528:	f002 fbae 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001532:	f000 f8eb 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2204      	movs	r2, #4
 800153a:	4619      	mov	r1, r3
 800153c:	4812      	ldr	r0, [pc, #72]	@ (8001588 <MX_TIM5_Init+0xec>)
 800153e:	f002 fba3 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001548:	f000 f8e0 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2208      	movs	r2, #8
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	@ (8001588 <MX_TIM5_Init+0xec>)
 8001554:	f002 fb98 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM5_Init+0xc6>
  {
    Error_Handler();
 800155e:	f000 f8d5 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	220c      	movs	r2, #12
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	@ (8001588 <MX_TIM5_Init+0xec>)
 800156a:	f002 fb8d 	bl	8003c88 <HAL_TIM_PWM_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8001574:	f000 f8ca 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
////
  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <MX_TIM5_Init+0xec>)
 800157a:	f000 fa89 	bl	8001a90 <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000398 	.word	0x20000398
 800158c:	40000c00 	.word	0x40000c00

08001590 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
////
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <MX_USART1_UART_Init+0x50>)
 8001598:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_USART1_UART_Init+0x4c>)
 80015c8:	f002 ff34 	bl	8004434 <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015d2:	f000 f89b 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
////
  /* USER CODE END USART1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200003e0 	.word	0x200003e0
 80015e0:	40011000 	.word	0x40011000

080015e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <MX_DMA_Init+0x3c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001620 <MX_DMA_Init+0x3c>)
 80015f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <MX_DMA_Init+0x3c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2046      	movs	r0, #70	@ 0x46
 800160c:	f000 fee3 	bl	80023d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001610:	2046      	movs	r0, #70	@ 0x46
 8001612:	f000 fefc 	bl	800240e <HAL_NVIC_EnableIRQ>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b30      	ldr	r3, [pc, #192]	@ (8001700 <MX_GPIO_Init+0xdc>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a2f      	ldr	r2, [pc, #188]	@ (8001700 <MX_GPIO_Init+0xdc>)
 8001644:	f043 0310 	orr.w	r3, r3, #16
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <MX_GPIO_Init+0xdc>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <MX_GPIO_Init+0xdc>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a28      	ldr	r2, [pc, #160]	@ (8001700 <MX_GPIO_Init+0xdc>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <MX_GPIO_Init+0xdc>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <MX_GPIO_Init+0xdc>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <MX_GPIO_Init+0xdc>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <MX_GPIO_Init+0xdc>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <MX_GPIO_Init+0xdc>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a1a      	ldr	r2, [pc, #104]	@ (8001700 <MX_GPIO_Init+0xdc>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <MX_GPIO_Init+0xdc>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RED_LED_Pin|GREEN_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	211c      	movs	r1, #28
 80016ae:	4815      	ldr	r0, [pc, #84]	@ (8001704 <MX_GPIO_Init+0xe0>)
 80016b0:	f001 fb4e 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M1_A_Pin|M1_B_Pin|M2_A_Pin|M2_B_Pin
 80016b4:	2200      	movs	r2, #0
 80016b6:	21ff      	movs	r1, #255	@ 0xff
 80016b8:	4813      	ldr	r0, [pc, #76]	@ (8001708 <MX_GPIO_Init+0xe4>)
 80016ba:	f001 fb49 	bl	8002d50 <HAL_GPIO_WritePin>
                          |M3_A_Pin|M3_B_Pin|M4_A_Pin|M4_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_LED_Pin GREEN_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin|GREEN_LED_Pin|BLUE_LED_Pin;
 80016be:	231c      	movs	r3, #28
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	480b      	ldr	r0, [pc, #44]	@ (8001704 <MX_GPIO_Init+0xe0>)
 80016d6:	f001 f99f 	bl	8002a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_A_Pin M1_B_Pin M2_A_Pin M2_B_Pin
                           M3_A_Pin M3_B_Pin M4_A_Pin M4_B_Pin */
  GPIO_InitStruct.Pin = M1_A_Pin|M1_B_Pin|M2_A_Pin|M2_B_Pin
 80016da:	23ff      	movs	r3, #255	@ 0xff
 80016dc:	617b      	str	r3, [r7, #20]
                          |M3_A_Pin|M3_B_Pin|M4_A_Pin|M4_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_GPIO_Init+0xe4>)
 80016f2:	f001 f991 	bl	8002a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	@ 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40021000 	.word	0x40021000
 8001708:	40020c00 	.word	0x40020c00

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
////  __disable_irq();
////  while (1)
////  {
////  }
  /* USER CODE END Error_Handler_Debug */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <HAL_MspInit+0x4c>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001730:	6453      	str	r3, [r2, #68]	@ 0x44
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <HAL_MspInit+0x4c>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_I2C_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12c      	bne.n	80017e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80017aa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b0:	2312      	movs	r3, #18
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b8:	2303      	movs	r3, #3
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017bc:	2304      	movs	r3, #4
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	480c      	ldr	r0, [pc, #48]	@ (80017f8 <HAL_I2C_MspInit+0x8c>)
 80017c8:	f001 f926 	bl	8002a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 80017d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017da:	6413      	str	r3, [r2, #64]	@ 0x40
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_I2C_MspInit+0x88>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	@ 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40005400 	.word	0x40005400
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020400 	.word	0x40020400

080017fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b090      	sub	sp, #64	@ 0x40
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a84      	ldr	r2, [pc, #528]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x230>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d135      	bne.n	800188a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001822:	4b83      	ldr	r3, [pc, #524]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a82      	ldr	r2, [pc, #520]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b80      	ldr	r3, [pc, #512]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001838:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
 800183e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a7b      	ldr	r2, [pc, #492]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8001844:	f043 0310 	orr.w	r3, r3, #16
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b79      	ldr	r3, [pc, #484]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001856:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001868:	2301      	movs	r3, #1
 800186a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001870:	4619      	mov	r1, r3
 8001872:	4870      	ldr	r0, [pc, #448]	@ (8001a34 <HAL_TIM_Encoder_MspInit+0x238>)
 8001874:	f001 f8d0 	bl	8002a18 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	201b      	movs	r0, #27
 800187e:	f000 fdaa 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001882:	201b      	movs	r0, #27
 8001884:	f000 fdc3 	bl	800240e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001888:	e0cb      	b.n	8001a22 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001892:	d152      	bne.n	800193a <HAL_TIM_Encoder_MspInit+0x13e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
 8001898:	4b65      	ldr	r3, [pc, #404]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	4a64      	ldr	r2, [pc, #400]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a4:	4b62      	ldr	r3, [pc, #392]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
 80018b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b8:	4a5d      	ldr	r2, [pc, #372]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
 80018d0:	4b57      	ldr	r3, [pc, #348]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	4a56      	ldr	r2, [pc, #344]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	6313      	str	r3, [r2, #48]	@ 0x30
 80018dc:	4b54      	ldr	r3, [pc, #336]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018e8:	2320      	movs	r3, #32
 80018ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f8:	2301      	movs	r3, #1
 80018fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001900:	4619      	mov	r1, r3
 8001902:	484d      	ldr	r0, [pc, #308]	@ (8001a38 <HAL_TIM_Encoder_MspInit+0x23c>)
 8001904:	f001 f888 	bl	8002a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001908:	2308      	movs	r3, #8
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001918:	2301      	movs	r3, #1
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001920:	4619      	mov	r1, r3
 8001922:	4846      	ldr	r0, [pc, #280]	@ (8001a3c <HAL_TIM_Encoder_MspInit+0x240>)
 8001924:	f001 f878 	bl	8002a18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	201c      	movs	r0, #28
 800192e:	f000 fd52 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001932:	201c      	movs	r0, #28
 8001934:	f000 fd6b 	bl	800240e <HAL_NVIC_EnableIRQ>
}
 8001938:	e073      	b.n	8001a22 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM3)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a40      	ldr	r2, [pc, #256]	@ (8001a40 <HAL_TIM_Encoder_MspInit+0x244>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d134      	bne.n	80019ae <HAL_TIM_Encoder_MspInit+0x1b2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	4b39      	ldr	r3, [pc, #228]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	4a38      	ldr	r2, [pc, #224]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6413      	str	r3, [r2, #64]	@ 0x40
 8001954:	4b36      	ldr	r3, [pc, #216]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	4b32      	ldr	r3, [pc, #200]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	4a31      	ldr	r2, [pc, #196]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001970:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800197c:	23c0      	movs	r3, #192	@ 0xc0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800198c:	2302      	movs	r3, #2
 800198e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001994:	4619      	mov	r1, r3
 8001996:	4828      	ldr	r0, [pc, #160]	@ (8001a38 <HAL_TIM_Encoder_MspInit+0x23c>)
 8001998:	f001 f83e 	bl	8002a18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	201d      	movs	r0, #29
 80019a2:	f000 fd18 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019a6:	201d      	movs	r0, #29
 80019a8:	f000 fd31 	bl	800240e <HAL_NVIC_EnableIRQ>
}
 80019ac:	e039      	b.n	8001a22 <HAL_TIM_Encoder_MspInit+0x226>
  else if(htim_encoder->Instance==TIM4)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a24      	ldr	r2, [pc, #144]	@ (8001a44 <HAL_TIM_Encoder_MspInit+0x248>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d134      	bne.n	8001a22 <HAL_TIM_Encoder_MspInit+0x226>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80019c2:	f043 0304 	orr.w	r3, r3, #4
 80019c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80019de:	f043 0308 	orr.w	r3, r3, #8
 80019e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e4:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_TIM_Encoder_MspInit+0x234>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80019f0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fe:	2300      	movs	r3, #0
 8001a00:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a02:	2302      	movs	r3, #2
 8001a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480e      	ldr	r0, [pc, #56]	@ (8001a48 <HAL_TIM_Encoder_MspInit+0x24c>)
 8001a0e:	f001 f803 	bl	8002a18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	201e      	movs	r0, #30
 8001a18:	f000 fcdd 	bl	80023d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a1c:	201e      	movs	r0, #30
 8001a1e:	f000 fcf6 	bl	800240e <HAL_NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3740      	adds	r7, #64	@ 0x40
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800
 8001a48:	40020c00 	.word	0x40020c00

08001a4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0b      	ldr	r2, [pc, #44]	@ (8001a88 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d10d      	bne.n	8001a7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <HAL_TIM_PWM_MspInit+0x40>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <HAL_TIM_PWM_MspInit+0x40>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b07      	ldr	r3, [pc, #28]	@ (8001a8c <HAL_TIM_PWM_MspInit+0x40>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40000c00 	.word	0x40000c00
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <HAL_TIM_MspPostInit+0x68>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d11d      	bne.n	8001aee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_TIM_MspPostInit+0x6c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <HAL_TIM_MspPostInit+0x6c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_TIM_MspPostInit+0x6c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001ace:	230f      	movs	r3, #15
 8001ad0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <HAL_TIM_MspPostInit+0x70>)
 8001aea:	f000 ff95 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001aee:	bf00      	nop
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40000c00 	.word	0x40000c00
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020000 	.word	0x40020000

08001b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	@ 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a3f      	ldr	r2, [pc, #252]	@ (8001c20 <HAL_UART_MspInit+0x11c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d178      	bne.n	8001c18 <HAL_UART_MspInit+0x114>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b30:	f043 0310 	orr.w	r3, r3, #16
 8001b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b36:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f003 0310 	and.w	r3, r3, #16
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a36      	ldr	r2, [pc, #216]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b34      	ldr	r3, [pc, #208]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b30      	ldr	r3, [pc, #192]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a2f      	ldr	r2, [pc, #188]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c24 <HAL_UART_MspInit+0x120>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	4619      	mov	r1, r3
 8001b96:	4824      	ldr	r0, [pc, #144]	@ (8001c28 <HAL_UART_MspInit+0x124>)
 8001b98:	f000 ff3e 	bl	8002a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bac:	2307      	movs	r3, #7
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	481d      	ldr	r0, [pc, #116]	@ (8001c2c <HAL_UART_MspInit+0x128>)
 8001bb8:	f000 ff2e 	bl	8002a18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <HAL_UART_MspInit+0x130>)
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bc4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001bc8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bca:	4b19      	ldr	r3, [pc, #100]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bcc:	2240      	movs	r2, #64	@ 0x40
 8001bce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bdc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bde:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001bea:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001bfc:	480c      	ldr	r0, [pc, #48]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001bfe:	f000 fc21 	bl	8002444 <HAL_DMA_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001c08:	f7ff fd80 	bl	800170c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a08      	ldr	r2, [pc, #32]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001c10:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c12:	4a07      	ldr	r2, [pc, #28]	@ (8001c30 <HAL_UART_MspInit+0x12c>)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	@ 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40011000 	.word	0x40011000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	20000428 	.word	0x20000428
 8001c34:	400264b8 	.word	0x400264b8

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	bf00      	nop
 8001c3e:	e7fd      	b.n	8001c3c <NMI_Handler+0x4>

08001c40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c44:	bf00      	nop
 8001c46:	e7fd      	b.n	8001c44 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <MemManage_Handler+0x4>

08001c50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

			static uint32_t tick_counter = 0;
			tick_counter++;
 8001c90:	4b68      	ldr	r3, [pc, #416]	@ (8001e34 <SysTick_Handler+0x1a8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	4a67      	ldr	r2, [pc, #412]	@ (8001e34 <SysTick_Handler+0x1a8>)
 8001c98:	6013      	str	r3, [r2, #0]

			if (tick_counter >= 500)  // Update speed every 500ms
 8001c9a:	4b66      	ldr	r3, [pc, #408]	@ (8001e34 <SysTick_Handler+0x1a8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ca2:	f0c0 80c2 	bcc.w	8001e2a <SysTick_Handler+0x19e>
			{
				tick_counter = 0;
 8001ca6:	4b63      	ldr	r3, [pc, #396]	@ (8001e34 <SysTick_Handler+0x1a8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
				current_encoder_1_count = position_1;
 8001cac:	4b62      	ldr	r3, [pc, #392]	@ (8001e38 <SysTick_Handler+0x1ac>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b61      	ldr	r3, [pc, #388]	@ (8001e3c <SysTick_Handler+0x1b0>)
 8001cb6:	601a      	str	r2, [r3, #0]
				current_encoder_2_count = position_2;
 8001cb8:	4b61      	ldr	r3, [pc, #388]	@ (8001e40 <SysTick_Handler+0x1b4>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b60      	ldr	r3, [pc, #384]	@ (8001e44 <SysTick_Handler+0x1b8>)
 8001cc2:	601a      	str	r2, [r3, #0]
				current_encoder_3_count = position_3;
 8001cc4:	4b60      	ldr	r3, [pc, #384]	@ (8001e48 <SysTick_Handler+0x1bc>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b5f      	ldr	r3, [pc, #380]	@ (8001e4c <SysTick_Handler+0x1c0>)
 8001cce:	601a      	str	r2, [r3, #0]
				current_encoder_4_count = position_4;
 8001cd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001e50 <SysTick_Handler+0x1c4>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e54 <SysTick_Handler+0x1c8>)
 8001cda:	601a      	str	r2, [r3, #0]

				current_time = HAL_GetTick(); // Get current time in ms
 8001cdc:	f000 fa70 	bl	80021c0 <HAL_GetTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a5d      	ldr	r2, [pc, #372]	@ (8001e58 <SysTick_Handler+0x1cc>)
 8001ce4:	6013      	str	r3, [r2, #0]

				// Compute elapsed time in seconds
				elapsed_time = (current_time - last_time) / 1000.0;
 8001ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e58 <SysTick_Handler+0x1cc>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	4b5c      	ldr	r3, [pc, #368]	@ (8001e5c <SysTick_Handler+0x1d0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7fe fc07 	bl	8000504 <__aeabi_ui2d>
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b59      	ldr	r3, [pc, #356]	@ (8001e60 <SysTick_Handler+0x1d4>)
 8001cfc:	f7fe fda6 	bl	800084c <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7fe ff4e 	bl	8000ba8 <__aeabi_d2f>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a55      	ldr	r2, [pc, #340]	@ (8001e64 <SysTick_Handler+0x1d8>)
 8001d10:	6013      	str	r3, [r2, #0]

				if (elapsed_time > 0)  // Prevent division by zero
 8001d12:	4b54      	ldr	r3, [pc, #336]	@ (8001e64 <SysTick_Handler+0x1d8>)
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	dd6f      	ble.n	8001e02 <SysTick_Handler+0x176>
				{
				// Compute speed (Rotations per second)
				speed_1 = (current_encoder_1_count - last_encoder_1_count) / ((float)PPR / elapsed_time);
 8001d22:	4b46      	ldr	r3, [pc, #280]	@ (8001e3c <SysTick_Handler+0x1b0>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4b50      	ldr	r3, [pc, #320]	@ (8001e68 <SysTick_Handler+0x1dc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <SysTick_Handler+0x1e0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001d40:	4b48      	ldr	r3, [pc, #288]	@ (8001e64 <SysTick_Handler+0x1d8>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d52:	ee17 2a90 	vmov	r2, s15
 8001d56:	4b46      	ldr	r3, [pc, #280]	@ (8001e70 <SysTick_Handler+0x1e4>)
 8001d58:	601a      	str	r2, [r3, #0]
				speed_2 = (current_encoder_2_count - last_encoder_2_count) / ((float)PPR / elapsed_time);
 8001d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e44 <SysTick_Handler+0x1b8>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b45      	ldr	r3, [pc, #276]	@ (8001e74 <SysTick_Handler+0x1e8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	ee07 3a90 	vmov	s15, r3
 8001d68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e6c <SysTick_Handler+0x1e0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001d78:	4b3a      	ldr	r3, [pc, #232]	@ (8001e64 <SysTick_Handler+0x1d8>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d8a:	ee17 2a90 	vmov	r2, s15
 8001d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e78 <SysTick_Handler+0x1ec>)
 8001d90:	601a      	str	r2, [r3, #0]
				speed_3 = (current_encoder_3_count - last_encoder_3_count) / ((float)PPR / elapsed_time);
 8001d92:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <SysTick_Handler+0x1c0>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4b39      	ldr	r3, [pc, #228]	@ (8001e7c <SysTick_Handler+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <SysTick_Handler+0x1e0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001db0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e64 <SysTick_Handler+0x1d8>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dc2:	ee17 2a90 	vmov	r2, s15
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e80 <SysTick_Handler+0x1f4>)
 8001dc8:	601a      	str	r2, [r3, #0]
				speed_4 = (current_encoder_4_count - last_encoder_4_count) / ((float)PPR / elapsed_time);
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <SysTick_Handler+0x1c8>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <SysTick_Handler+0x1f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ddc:	4b23      	ldr	r3, [pc, #140]	@ (8001e6c <SysTick_Handler+0x1e0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001de8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <SysTick_Handler+0x1d8>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8001df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dfa:	ee17 2a90 	vmov	r2, s15
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <SysTick_Handler+0x1fc>)
 8001e00:	601a      	str	r2, [r3, #0]
				}

				// Store current values for next cycle
				last_time = current_time;
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <SysTick_Handler+0x1cc>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a15      	ldr	r2, [pc, #84]	@ (8001e5c <SysTick_Handler+0x1d0>)
 8001e08:	6013      	str	r3, [r2, #0]
				last_encoder_1_count = current_encoder_1_count;
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <SysTick_Handler+0x1b0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a16      	ldr	r2, [pc, #88]	@ (8001e68 <SysTick_Handler+0x1dc>)
 8001e10:	6013      	str	r3, [r2, #0]
				last_encoder_2_count = current_encoder_2_count;
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <SysTick_Handler+0x1b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a17      	ldr	r2, [pc, #92]	@ (8001e74 <SysTick_Handler+0x1e8>)
 8001e18:	6013      	str	r3, [r2, #0]
				last_encoder_3_count = current_encoder_3_count;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <SysTick_Handler+0x1c0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <SysTick_Handler+0x1f0>)
 8001e20:	6013      	str	r3, [r2, #0]
				last_encoder_4_count = current_encoder_4_count;
 8001e22:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <SysTick_Handler+0x1c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a17      	ldr	r2, [pc, #92]	@ (8001e84 <SysTick_Handler+0x1f8>)
 8001e28:	6013      	str	r3, [r2, #0]
//	delt_n = (Current_count - Prev_count);
//	speed_1 = delt_n / (PPR * delt_time_1);
//	Prev_count = Current_count;

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2a:	f000 f9b5 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200004b4 	.word	0x200004b4
 8001e38:	2000020c 	.word	0x2000020c
 8001e3c:	20000488 	.word	0x20000488
 8001e40:	2000020e 	.word	0x2000020e
 8001e44:	2000048c 	.word	0x2000048c
 8001e48:	20000210 	.word	0x20000210
 8001e4c:	20000490 	.word	0x20000490
 8001e50:	20000212 	.word	0x20000212
 8001e54:	20000494 	.word	0x20000494
 8001e58:	200004b0 	.word	0x200004b0
 8001e5c:	200004ac 	.word	0x200004ac
 8001e60:	408f4000 	.word	0x408f4000
 8001e64:	200004a8 	.word	0x200004a8
 8001e68:	20000498 	.word	0x20000498
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000214 	.word	0x20000214
 8001e74:	2000049c 	.word	0x2000049c
 8001e78:	20000218 	.word	0x20000218
 8001e7c:	200004a0 	.word	0x200004a0
 8001e80:	2000021c 	.word	0x2000021c
 8001e84:	200004a4 	.word	0x200004a4
 8001e88:	20000220 	.word	0x20000220

08001e8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <TIM1_CC_IRQHandler+0x10>)
 8001e92:	f001 fe08 	bl	8003aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000278 	.word	0x20000278

08001ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <TIM2_IRQHandler+0x10>)
 8001ea6:	f001 fdfe 	bl	8003aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200002c0 	.word	0x200002c0

08001eb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <TIM3_IRQHandler+0x10>)
 8001eba:	f001 fdf4 	bl	8003aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000308 	.word	0x20000308

08001ec8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <TIM4_IRQHandler+0x10>)
 8001ece:	f001 fdea 	bl	8003aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000350 	.word	0x20000350

08001edc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <DMA2_Stream7_IRQHandler+0x10>)
 8001ee2:	f000 fb5d 	bl	80025a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000428 	.word	0x20000428

08001ef0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return 1;
 8001ef4:	2301      	movs	r3, #1
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_kill>:

int _kill(int pid, int sig)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f0a:	f003 fb07 	bl	800551c <__errno>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2216      	movs	r2, #22
 8001f12:	601a      	str	r2, [r3, #0]
  return -1;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_exit>:

void _exit (int status)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ffe7 	bl	8001f00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f32:	bf00      	nop
 8001f34:	e7fd      	b.n	8001f32 <_exit+0x12>

08001f36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e00a      	b.n	8001f5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f48:	f3af 8000 	nop.w
 8001f4c:	4601      	mov	r1, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	60ba      	str	r2, [r7, #8]
 8001f54:	b2ca      	uxtb	r2, r1
 8001f56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	dbf0      	blt.n	8001f48 <_read+0x12>
  }

  return len;
 8001f66:	687b      	ldr	r3, [r7, #4]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e009      	b.n	8001f96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	60ba      	str	r2, [r7, #8]
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dbf1      	blt.n	8001f82 <_write+0x12>
  }
  return len;
 8001f9e:	687b      	ldr	r3, [r7, #4]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_close>:

int _close(int file)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fd0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_isatty>:

int _isatty(int file)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fe8:	2301      	movs	r3, #1
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	@ (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	@ (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002040:	f003 fa6c 	bl	800551c <__errno>
 8002044:	4603      	mov	r3, r0
 8002046:	220c      	movs	r2, #12
 8002048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	e009      	b.n	8002064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002056:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	4a05      	ldr	r2, [pc, #20]	@ (8002074 <_sbrk+0x64>)
 8002060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20020000 	.word	0x20020000
 8002070:	00000400 	.word	0x00000400
 8002074:	200004b8 	.word	0x200004b8
 8002078:	20000610 	.word	0x20000610

0800207c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <SystemInit+0x20>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <SystemInit+0x20>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020a4:	f7ff ffea 	bl	800207c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a8:	480c      	ldr	r0, [pc, #48]	@ (80020dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020aa:	490d      	ldr	r1, [pc, #52]	@ (80020e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020ac:	4a0d      	ldr	r2, [pc, #52]	@ (80020e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020c0:	4c0a      	ldr	r4, [pc, #40]	@ (80020ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ce:	f003 fa2b 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d2:	f7fe ffbf 	bl	8001054 <main>
  bx  lr    
 80020d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80020e4:	08007670 	.word	0x08007670
  ldr r2, =_sbss
 80020e8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80020ec:	2000060c 	.word	0x2000060c

080020f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f0:	e7fe      	b.n	80020f0 <ADC_IRQHandler>
	...

080020f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002134 <HAL_Init+0x40>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <HAL_Init+0x40>)
 800210a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800210e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b08      	ldr	r3, [pc, #32]	@ (8002134 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a07      	ldr	r2, [pc, #28]	@ (8002134 <HAL_Init+0x40>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800211a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211c:	2003      	movs	r0, #3
 800211e:	f000 f94f 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002122:	200f      	movs	r0, #15
 8002124:	f000 f808 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002128:	f7ff faf8 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002140:	4b12      	ldr	r3, [pc, #72]	@ (800218c <HAL_InitTick+0x54>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b12      	ldr	r3, [pc, #72]	@ (8002190 <HAL_InitTick+0x58>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f967 	bl	800242a <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 f92f 	bl	80023d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	@ (8002194 <HAL_InitTick+0x5c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000004 	.word	0x20000004
 8002190:	2000000c 	.word	0x2000000c
 8002194:	20000008 	.word	0x20000008

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	200004bc 	.word	0x200004bc

080021c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b03      	ldr	r3, [pc, #12]	@ (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	200004bc 	.word	0x200004bc

080021d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff ffee 	bl	80021c0 <HAL_GetTick>
 80021e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d005      	beq.n	80021fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_Delay+0x44>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021fe:	bf00      	nop
 8002200:	f7ff ffde 	bl	80021c0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	429a      	cmp	r2, r3
 800220e:	d8f7      	bhi.n	8002200 <HAL_Delay+0x28>
  {
  }
}
 8002210:	bf00      	nop
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	2000000c 	.word	0x2000000c

08002220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002230:	4b0c      	ldr	r3, [pc, #48]	@ (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800223c:	4013      	ands	r3, r2
 800223e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800224c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002252:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <__NVIC_SetPriorityGrouping+0x44>)
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	60d3      	str	r3, [r2, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b04      	ldr	r3, [pc, #16]	@ (8002280 <__NVIC_GetPriorityGrouping+0x18>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	0a1b      	lsrs	r3, r3, #8
 8002272:	f003 0307 	and.w	r3, r3, #7
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db0b      	blt.n	80022ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4907      	ldr	r1, [pc, #28]	@ (80022bc <__NVIC_EnableIRQ+0x38>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	@ (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	@ (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	@ 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
         );
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	@ 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	@ (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f7ff ff8e 	bl	80022c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff29 	bl	8002220 <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e8:	f7ff ff3e 	bl	8002268 <__NVIC_GetPriorityGrouping>
 80023ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff ff8e 	bl	8002314 <NVIC_EncodePriority>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff5d 	bl	80022c0 <__NVIC_SetPriority>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	4603      	mov	r3, r0
 8002416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff31 	bl	8002284 <__NVIC_EnableIRQ>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ffa2 	bl	800237c <SysTick_Config>
 8002438:	4603      	mov	r3, r0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff feb6 	bl	80021c0 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e099      	b.n	8002594 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002480:	e00f      	b.n	80024a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002482:	f7ff fe9d 	bl	80021c0 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b05      	cmp	r3, #5
 800248e:	d908      	bls.n	80024a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2203      	movs	r2, #3
 800249a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e078      	b.n	8002594 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e8      	bne.n	8002482 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_DMA_Init+0x158>)
 80024bc:	4013      	ands	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d107      	bne.n	800250c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	4313      	orrs	r3, r2
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f023 0307 	bic.w	r3, r3, #7
 8002522:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	2b04      	cmp	r3, #4
 8002534:	d117      	bne.n	8002566 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00e      	beq.n	8002566 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f9e9 	bl	8002920 <DMA_CheckFifoParam>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2240      	movs	r2, #64	@ 0x40
 8002558:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002562:	2301      	movs	r3, #1
 8002564:	e016      	b.n	8002594 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f9a0 	bl	80028b4 <DMA_CalcBaseAndBitshift>
 8002574:	4603      	mov	r3, r0
 8002576:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257c:	223f      	movs	r2, #63	@ 0x3f
 800257e:	409a      	lsls	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	f010803f 	.word	0xf010803f

080025a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025ac:	4b8e      	ldr	r3, [pc, #568]	@ (80027e8 <HAL_DMA_IRQHandler+0x248>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a8e      	ldr	r2, [pc, #568]	@ (80027ec <HAL_DMA_IRQHandler+0x24c>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0a9b      	lsrs	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2208      	movs	r2, #8
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01a      	beq.n	800260c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f8:	2208      	movs	r2, #8
 80025fa:	409a      	lsls	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	2201      	movs	r2, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	2201      	movs	r2, #1
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2204      	movs	r2, #4
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d012      	beq.n	8002678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	2204      	movs	r2, #4
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f043 0204 	orr.w	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2210      	movs	r2, #16
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d043      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d03c      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2210      	movs	r2, #16
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d024      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
 80026ce:	e01f      	b.n	8002710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
 80026e0:	e016      	b.n	8002710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0208 	bic.w	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	2220      	movs	r2, #32
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 808f 	beq.w	8002840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8087 	beq.w	8002840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	2220      	movs	r2, #32
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b05      	cmp	r3, #5
 8002748:	d136      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0216 	bic.w	r2, r2, #22
 8002758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <HAL_DMA_IRQHandler+0x1da>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0208 	bic.w	r2, r2, #8
 8002788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	223f      	movs	r2, #63	@ 0x3f
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d07e      	beq.n	80028ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
        }
        return;
 80027b6:	e079      	b.n	80028ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10d      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d031      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e02c      	b.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
 80027e6:	bf00      	nop
 80027e8:	20000004 	.word	0x20000004
 80027ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e01e      	b.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0210 	bic.w	r2, r2, #16
 800281e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	2b00      	cmp	r3, #0
 8002846:	d032      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d022      	beq.n	800289a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2205      	movs	r2, #5
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	3301      	adds	r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	d307      	bcc.n	8002888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f2      	bne.n	800286c <HAL_DMA_IRQHandler+0x2cc>
 8002886:	e000      	b.n	800288a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e000      	b.n	80028ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80028ac:	bf00      	nop
    }
  }
}
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3b10      	subs	r3, #16
 80028c4:	4a14      	ldr	r2, [pc, #80]	@ (8002918 <DMA_CalcBaseAndBitshift+0x64>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ce:	4a13      	ldr	r2, [pc, #76]	@ (800291c <DMA_CalcBaseAndBitshift+0x68>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d909      	bls.n	80028f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028ea:	f023 0303 	bic.w	r3, r3, #3
 80028ee:	1d1a      	adds	r2, r3, #4
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80028f4:	e007      	b.n	8002906 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028fe:	f023 0303 	bic.w	r3, r3, #3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	aaaaaaab 	.word	0xaaaaaaab
 800291c:	080072e8 	.word	0x080072e8

08002920 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d11f      	bne.n	800297a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d856      	bhi.n	80029ee <DMA_CheckFifoParam+0xce>
 8002940:	a201      	add	r2, pc, #4	@ (adr r2, 8002948 <DMA_CheckFifoParam+0x28>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	08002959 	.word	0x08002959
 800294c:	0800296b 	.word	0x0800296b
 8002950:	08002959 	.word	0x08002959
 8002954:	080029ef 	.word	0x080029ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d046      	beq.n	80029f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002968:	e043      	b.n	80029f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002972:	d140      	bne.n	80029f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002978:	e03d      	b.n	80029f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002982:	d121      	bne.n	80029c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d837      	bhi.n	80029fa <DMA_CheckFifoParam+0xda>
 800298a:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <DMA_CheckFifoParam+0x70>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	080029a1 	.word	0x080029a1
 8002994:	080029a7 	.word	0x080029a7
 8002998:	080029a1 	.word	0x080029a1
 800299c:	080029b9 	.word	0x080029b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      break;
 80029a4:	e030      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d025      	beq.n	80029fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b6:	e022      	b.n	80029fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029c0:	d11f      	bne.n	8002a02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029c6:	e01c      	b.n	8002a02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d903      	bls.n	80029d6 <DMA_CheckFifoParam+0xb6>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d003      	beq.n	80029dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029d4:	e018      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
      break;
 80029da:	e015      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00e      	beq.n	8002a06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      break;
 80029ec:	e00b      	b.n	8002a06 <DMA_CheckFifoParam+0xe6>
      break;
 80029ee:	bf00      	nop
 80029f0:	e00a      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 80029f2:	bf00      	nop
 80029f4:	e008      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 80029f6:	bf00      	nop
 80029f8:	e006      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 80029fa:	bf00      	nop
 80029fc:	e004      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 80029fe:	bf00      	nop
 8002a00:	e002      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a02:	bf00      	nop
 8002a04:	e000      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 8002a06:	bf00      	nop
    }
  } 
  
  return status; 
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e16b      	b.n	8002d0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 815a 	bne.w	8002d06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d005      	beq.n	8002a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d130      	bne.n	8002acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0201 	and.w	r2, r3, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d017      	beq.n	8002b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80b4 	beq.w	8002d06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b60      	ldr	r3, [pc, #384]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bae:	4b5d      	ldr	r3, [pc, #372]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	4a5b      	ldr	r2, [pc, #364]	@ (8002d28 <HAL_GPIO_Init+0x310>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a52      	ldr	r2, [pc, #328]	@ (8002d2c <HAL_GPIO_Init+0x314>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a51      	ldr	r2, [pc, #324]	@ (8002d30 <HAL_GPIO_Init+0x318>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d025      	beq.n	8002c3a <HAL_GPIO_Init+0x222>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	@ (8002d34 <HAL_GPIO_Init+0x31c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <HAL_GPIO_Init+0x21e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x21a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4e      	ldr	r2, [pc, #312]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x216>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4d      	ldr	r2, [pc, #308]	@ (8002d40 <HAL_GPIO_Init+0x328>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4c      	ldr	r2, [pc, #304]	@ (8002d44 <HAL_GPIO_Init+0x32c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	@ (8002d48 <HAL_GPIO_Init+0x330>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x20a>
 8002c1e:	2307      	movs	r3, #7
 8002c20:	e00e      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c22:	2308      	movs	r3, #8
 8002c24:	e00c      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e00a      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	@ (8002d28 <HAL_GPIO_Init+0x310>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a32      	ldr	r2, [pc, #200]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d00:	4a12      	ldr	r2, [pc, #72]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f ae90 	bls.w	8002a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	@ 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40013c00 	.word	0x40013c00

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e12b      	b.n	8002fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fcde 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	@ 0x24
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002de8:	f000 fd40 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8002dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a81      	ldr	r2, [pc, #516]	@ (8002ff8 <HAL_I2C_Init+0x274>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d807      	bhi.n	8002e08 <HAL_I2C_Init+0x84>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a80      	ldr	r2, [pc, #512]	@ (8002ffc <HAL_I2C_Init+0x278>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bf94      	ite	ls
 8002e00:	2301      	movls	r3, #1
 8002e02:	2300      	movhi	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e006      	b.n	8002e16 <HAL_I2C_Init+0x92>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003000 <HAL_I2C_Init+0x27c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0e7      	b.n	8002fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4a78      	ldr	r2, [pc, #480]	@ (8003004 <HAL_I2C_Init+0x280>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0c9b      	lsrs	r3, r3, #18
 8002e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff8 <HAL_I2C_Init+0x274>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d802      	bhi.n	8002e58 <HAL_I2C_Init+0xd4>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	e009      	b.n	8002e6c <HAL_I2C_Init+0xe8>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e5e:	fb02 f303 	mul.w	r3, r2, r3
 8002e62:	4a69      	ldr	r2, [pc, #420]	@ (8003008 <HAL_I2C_Init+0x284>)
 8002e64:	fba2 2303 	umull	r2, r3, r2, r3
 8002e68:	099b      	lsrs	r3, r3, #6
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	430b      	orrs	r3, r1
 8002e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	495c      	ldr	r1, [pc, #368]	@ (8002ff8 <HAL_I2C_Init+0x274>)
 8002e88:	428b      	cmp	r3, r1
 8002e8a:	d819      	bhi.n	8002ec0 <HAL_I2C_Init+0x13c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e59      	subs	r1, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e9a:	1c59      	adds	r1, r3, #1
 8002e9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ea0:	400b      	ands	r3, r1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_I2C_Init+0x138>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	1e59      	subs	r1, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eba:	e051      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	e04f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d111      	bne.n	8002eec <HAL_I2C_Init+0x168>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	440b      	add	r3, r1
 8002ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e012      	b.n	8002f12 <HAL_I2C_Init+0x18e>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e58      	subs	r0, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	0099      	lsls	r1, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_I2C_Init+0x196>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e022      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10e      	bne.n	8002f40 <HAL_I2C_Init+0x1bc>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1e58      	subs	r0, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6859      	ldr	r1, [r3, #4]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	440b      	add	r3, r1
 8002f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f3e:	e00f      	b.n	8002f60 <HAL_I2C_Init+0x1dc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1e58      	subs	r0, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	0099      	lsls	r1, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	6809      	ldr	r1, [r1, #0]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6911      	ldr	r1, [r2, #16]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	000186a0 	.word	0x000186a0
 8002ffc:	001e847f 	.word	0x001e847f
 8003000:	003d08ff 	.word	0x003d08ff
 8003004:	431bde83 	.word	0x431bde83
 8003008:	10624dd3 	.word	0x10624dd3

0800300c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e267      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d075      	beq.n	8003116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800302a:	4b88      	ldr	r3, [pc, #544]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b04      	cmp	r3, #4
 8003034:	d00c      	beq.n	8003050 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003036:	4b85      	ldr	r3, [pc, #532]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800303e:	2b08      	cmp	r3, #8
 8003040:	d112      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003042:	4b82      	ldr	r3, [pc, #520]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800304e:	d10b      	bne.n	8003068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003050:	4b7e      	ldr	r3, [pc, #504]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05b      	beq.n	8003114 <HAL_RCC_OscConfig+0x108>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d157      	bne.n	8003114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e242      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003070:	d106      	bne.n	8003080 <HAL_RCC_OscConfig+0x74>
 8003072:	4b76      	ldr	r3, [pc, #472]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a75      	ldr	r2, [pc, #468]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e01d      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003088:	d10c      	bne.n	80030a4 <HAL_RCC_OscConfig+0x98>
 800308a:	4b70      	ldr	r3, [pc, #448]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a6f      	ldr	r2, [pc, #444]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	4b6d      	ldr	r3, [pc, #436]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6c      	ldr	r2, [pc, #432]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 800309c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e00b      	b.n	80030bc <HAL_RCC_OscConfig+0xb0>
 80030a4:	4b69      	ldr	r3, [pc, #420]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a68      	ldr	r2, [pc, #416]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 80030aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	4b66      	ldr	r3, [pc, #408]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a65      	ldr	r2, [pc, #404]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 80030b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7ff f87c 	bl	80021c0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030cc:	f7ff f878 	bl	80021c0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	@ 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e207      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b5b      	ldr	r3, [pc, #364]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0xc0>
 80030ea:	e014      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7ff f868 	bl	80021c0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f4:	f7ff f864 	bl	80021c0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b64      	cmp	r3, #100	@ 0x64
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1f3      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003106:	4b51      	ldr	r3, [pc, #324]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0xe8>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d063      	beq.n	80031ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003122:	4b4a      	ldr	r3, [pc, #296]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00b      	beq.n	8003146 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312e:	4b47      	ldr	r3, [pc, #284]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003136:	2b08      	cmp	r3, #8
 8003138:	d11c      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800313a:	4b44      	ldr	r3, [pc, #272]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d116      	bne.n	8003174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	4b41      	ldr	r3, [pc, #260]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d001      	beq.n	800315e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c7      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b3b      	ldr	r3, [pc, #236]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4937      	ldr	r1, [pc, #220]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 800316e:	4313      	orrs	r3, r2
 8003170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	e03a      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d020      	beq.n	80031be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800317c:	4b34      	ldr	r3, [pc, #208]	@ (8003250 <HAL_RCC_OscConfig+0x244>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003182:	f7ff f81d 	bl	80021c0 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318a:	f7ff f819 	bl	80021c0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e1a8      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319c:	4b2b      	ldr	r3, [pc, #172]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b28      	ldr	r3, [pc, #160]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	4925      	ldr	r1, [pc, #148]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031be:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <HAL_RCC_OscConfig+0x244>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fffc 	bl	80021c0 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031cc:	f7fe fff8 	bl	80021c0 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e187      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031de:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d036      	beq.n	8003264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fe:	4b15      	ldr	r3, [pc, #84]	@ (8003254 <HAL_RCC_OscConfig+0x248>)
 8003200:	2201      	movs	r2, #1
 8003202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe ffdc 	bl	80021c0 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320c:	f7fe ffd8 	bl	80021c0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e167      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321e:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <HAL_RCC_OscConfig+0x240>)
 8003220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x200>
 800322a:	e01b      	b.n	8003264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322c:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_RCC_OscConfig+0x248>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fe ffc5 	bl	80021c0 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	e00e      	b.n	8003258 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323a:	f7fe ffc1 	bl	80021c0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d907      	bls.n	8003258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e150      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800324c:	40023800 	.word	0x40023800
 8003250:	42470000 	.word	0x42470000
 8003254:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b88      	ldr	r3, [pc, #544]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 800325a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ea      	bne.n	800323a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8097 	beq.w	80033a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b81      	ldr	r3, [pc, #516]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	4b7d      	ldr	r3, [pc, #500]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	4a7c      	ldr	r2, [pc, #496]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	@ 0x40
 8003292:	4b7a      	ldr	r3, [pc, #488]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329a:	60bb      	str	r3, [r7, #8]
 800329c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b77      	ldr	r3, [pc, #476]	@ (8003480 <HAL_RCC_OscConfig+0x474>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ae:	4b74      	ldr	r3, [pc, #464]	@ (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a73      	ldr	r2, [pc, #460]	@ (8003480 <HAL_RCC_OscConfig+0x474>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7fe ff81 	bl	80021c0 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7fe ff7d 	bl	80021c0 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e10c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003480 <HAL_RCC_OscConfig+0x474>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d106      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2ea>
 80032e8:	4b64      	ldr	r3, [pc, #400]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ec:	4a63      	ldr	r2, [pc, #396]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x30c>
 80032fe:	4b5f      	ldr	r3, [pc, #380]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003302:	4a5e      	ldr	r2, [pc, #376]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	@ 0x70
 800330a:	4b5c      	ldr	r3, [pc, #368]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a5b      	ldr	r2, [pc, #364]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x324>
 8003318:	4b58      	ldr	r3, [pc, #352]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	4a57      	ldr	r2, [pc, #348]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	@ 0x70
 8003324:	4b55      	ldr	r3, [pc, #340]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a54      	ldr	r2, [pc, #336]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe ff42 	bl	80021c0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe ff3e 	bl	80021c0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0cb      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003356:	4b49      	ldr	r3, [pc, #292]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RCC_OscConfig+0x334>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003364:	f7fe ff2c 	bl	80021c0 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe ff28 	bl	80021c0 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e0b5      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003382:	4b3e      	ldr	r3, [pc, #248]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d105      	bne.n	80033a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003394:	4b39      	ldr	r3, [pc, #228]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003398:	4a38      	ldr	r2, [pc, #224]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 800339a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800339e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a1 	beq.w	80034ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033aa:	4b34      	ldr	r3, [pc, #208]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d05c      	beq.n	8003470 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d141      	bne.n	8003442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033be:	4b31      	ldr	r3, [pc, #196]	@ (8003484 <HAL_RCC_OscConfig+0x478>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fefc 	bl	80021c0 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033cc:	f7fe fef8 	bl	80021c0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e087      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033de:	4b27      	ldr	r3, [pc, #156]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69da      	ldr	r2, [r3, #28]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	019b      	lsls	r3, r3, #6
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	085b      	lsrs	r3, r3, #1
 8003402:	3b01      	subs	r3, #1
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800340c:	061b      	lsls	r3, r3, #24
 800340e:	491b      	ldr	r1, [pc, #108]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b1b      	ldr	r3, [pc, #108]	@ (8003484 <HAL_RCC_OscConfig+0x478>)
 8003416:	2201      	movs	r2, #1
 8003418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341a:	f7fe fed1 	bl	80021c0 <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003422:	f7fe fecd 	bl	80021c0 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e05c      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003434:	4b11      	ldr	r3, [pc, #68]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x416>
 8003440:	e054      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b10      	ldr	r3, [pc, #64]	@ (8003484 <HAL_RCC_OscConfig+0x478>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe feba 	bl	80021c0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe feb6 	bl	80021c0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e045      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b06      	ldr	r3, [pc, #24]	@ (800347c <HAL_RCC_OscConfig+0x470>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x444>
 800346e:	e03d      	b.n	80034ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d107      	bne.n	8003488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e038      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003488:	4b1b      	ldr	r3, [pc, #108]	@ (80034f8 <HAL_RCC_OscConfig+0x4ec>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d028      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d121      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d11a      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	3b01      	subs	r3, #1
 80034d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cc      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b68      	ldr	r3, [pc, #416]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d90c      	bls.n	8003538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b65      	ldr	r3, [pc, #404]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b63      	ldr	r3, [pc, #396]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e0b8      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0304 	and.w	r3, r3, #4
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003550:	4b59      	ldr	r3, [pc, #356]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a58      	ldr	r2, [pc, #352]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800355a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003568:	4b53      	ldr	r3, [pc, #332]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a52      	ldr	r2, [pc, #328]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b50      	ldr	r3, [pc, #320]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	494d      	ldr	r1, [pc, #308]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d044      	beq.n	800361c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b47      	ldr	r3, [pc, #284]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d119      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e07f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b3f      	ldr	r3, [pc, #252]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3b      	ldr	r3, [pc, #236]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e067      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b37      	ldr	r3, [pc, #220]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4934      	ldr	r1, [pc, #208]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035ec:	f7fe fde8 	bl	80021c0 <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fe fde4 	bl	80021c0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e04f      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2b      	ldr	r3, [pc, #172]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b25      	ldr	r3, [pc, #148]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d20c      	bcs.n	8003644 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b22      	ldr	r3, [pc, #136]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b20      	ldr	r3, [pc, #128]	@ (80036b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e032      	b.n	80036aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d008      	beq.n	8003662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b19      	ldr	r3, [pc, #100]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4916      	ldr	r1, [pc, #88]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d009      	beq.n	8003682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366e:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	490e      	ldr	r1, [pc, #56]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003682:	f000 f821 	bl	80036c8 <HAL_RCC_GetSysClockFreq>
 8003686:	4602      	mov	r2, r0
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	091b      	lsrs	r3, r3, #4
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	490a      	ldr	r1, [pc, #40]	@ (80036bc <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	5ccb      	ldrb	r3, [r1, r3]
 8003696:	fa22 f303 	lsr.w	r3, r2, r3
 800369a:	4a09      	ldr	r2, [pc, #36]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800369e:	4b09      	ldr	r3, [pc, #36]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fd48 	bl	8002138 <HAL_InitTick>

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023c00 	.word	0x40023c00
 80036b8:	40023800 	.word	0x40023800
 80036bc:	080072d0 	.word	0x080072d0
 80036c0:	20000004 	.word	0x20000004
 80036c4:	20000008 	.word	0x20000008

080036c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b090      	sub	sp, #64	@ 0x40
 80036ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e0:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d00d      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x40>
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	f200 80a1 	bhi.w	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <HAL_RCC_GetSysClockFreq+0x34>
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d003      	beq.n	8003702 <HAL_RCC_GetSysClockFreq+0x3a>
 80036fa:	e09b      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b53      	ldr	r3, [pc, #332]	@ (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 80036fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003700:	e09b      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b53      	ldr	r3, [pc, #332]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003704:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003706:	e098      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003708:	4b4f      	ldr	r3, [pc, #316]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003710:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003712:	4b4d      	ldr	r3, [pc, #308]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d028      	beq.n	8003770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371e:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	099b      	lsrs	r3, r3, #6
 8003724:	2200      	movs	r2, #0
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	627a      	str	r2, [r7, #36]	@ 0x24
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003730:	2100      	movs	r1, #0
 8003732:	4b47      	ldr	r3, [pc, #284]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003734:	fb03 f201 	mul.w	r2, r3, r1
 8003738:	2300      	movs	r3, #0
 800373a:	fb00 f303 	mul.w	r3, r0, r3
 800373e:	4413      	add	r3, r2
 8003740:	4a43      	ldr	r2, [pc, #268]	@ (8003850 <HAL_RCC_GetSysClockFreq+0x188>)
 8003742:	fba0 1202 	umull	r1, r2, r0, r2
 8003746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003748:	460a      	mov	r2, r1
 800374a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800374c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800374e:	4413      	add	r3, r2
 8003750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003754:	2200      	movs	r2, #0
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	61fa      	str	r2, [r7, #28]
 800375a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003762:	f7fd fa71 	bl	8000c48 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4613      	mov	r3, r2
 800376c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800376e:	e053      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003770:	4b35      	ldr	r3, [pc, #212]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	2200      	movs	r2, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	617a      	str	r2, [r7, #20]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003782:	f04f 0b00 	mov.w	fp, #0
 8003786:	4652      	mov	r2, sl
 8003788:	465b      	mov	r3, fp
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	0159      	lsls	r1, r3, #5
 8003794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003798:	0150      	lsls	r0, r2, #5
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	ebb2 080a 	subs.w	r8, r2, sl
 80037a2:	eb63 090b 	sbc.w	r9, r3, fp
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ba:	ebb2 0408 	subs.w	r4, r2, r8
 80037be:	eb63 0509 	sbc.w	r5, r3, r9
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	00eb      	lsls	r3, r5, #3
 80037cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037d0:	00e2      	lsls	r2, r4, #3
 80037d2:	4614      	mov	r4, r2
 80037d4:	461d      	mov	r5, r3
 80037d6:	eb14 030a 	adds.w	r3, r4, sl
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	eb45 030b 	adc.w	r3, r5, fp
 80037e0:	607b      	str	r3, [r7, #4]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ee:	4629      	mov	r1, r5
 80037f0:	028b      	lsls	r3, r1, #10
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f8:	4621      	mov	r1, r4
 80037fa:	028a      	lsls	r2, r1, #10
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	2200      	movs	r2, #0
 8003804:	60bb      	str	r3, [r7, #8]
 8003806:	60fa      	str	r2, [r7, #12]
 8003808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380c:	f7fd fa1c 	bl	8000c48 <__aeabi_uldivmod>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4613      	mov	r3, r2
 8003816:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x180>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	3301      	adds	r3, #1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003828:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800382a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003830:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003832:	e002      	b.n	800383a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_RCC_GetSysClockFreq+0x184>)
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800383a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800383c:	4618      	mov	r0, r3
 800383e:	3740      	adds	r7, #64	@ 0x40
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800
 800384c:	00f42400 	.word	0x00f42400
 8003850:	017d7840 	.word	0x017d7840

08003854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003858:	4b03      	ldr	r3, [pc, #12]	@ (8003868 <HAL_RCC_GetHCLKFreq+0x14>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	4618      	mov	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000004 	.word	0x20000004

0800386c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003870:	f7ff fff0 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	@ (800388c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0a9b      	lsrs	r3, r3, #10
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	@ (8003890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	080072e0 	.word	0x080072e0

08003894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003898:	f7ff ffdc 	bl	8003854 <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b05      	ldr	r3, [pc, #20]	@ (80038b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0b5b      	lsrs	r3, r3, #13
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4903      	ldr	r1, [pc, #12]	@ (80038b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40023800 	.word	0x40023800
 80038b8:	080072e0 	.word	0x080072e0

080038bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e041      	b.n	8003952 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fe f8b2 	bl	8001a4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	4619      	mov	r1, r3
 80038fa:	4610      	mov	r0, r2
 80038fc:	f000 faae 	bl	8003e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e097      	b.n	8003a9e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd ff3a 	bl	80017fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800399e:	f023 0307 	bic.w	r3, r3, #7
 80039a2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f000 fa54 	bl	8003e5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039dc:	f023 0303 	bic.w	r3, r3, #3
 80039e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	4313      	orrs	r3, r2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80039fa:	f023 030c 	bic.w	r3, r3, #12
 80039fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	4313      	orrs	r3, r2
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	011a      	lsls	r2, r3, #4
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a38:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003a40:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01b      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f06f 0202 	mvn.w	r2, #2
 8003ada:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fd fa21 	bl	8000f38 <HAL_TIM_IC_CaptureCallback>
 8003af6:	e005      	b.n	8003b04 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f991 	bl	8003e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f998 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d020      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01b      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0204 	mvn.w	r2, #4
 8003b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd f9fb 	bl	8000f38 <HAL_TIM_IC_CaptureCallback>
 8003b42:	e005      	b.n	8003b50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f96b 	bl	8003e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f972 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01b      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f06f 0208 	mvn.w	r2, #8
 8003b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2204      	movs	r2, #4
 8003b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fd f9d5 	bl	8000f38 <HAL_TIM_IC_CaptureCallback>
 8003b8e:	e005      	b.n	8003b9c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f945 	bl	8003e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f94c 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01b      	beq.n	8003bee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0210 	mvn.w	r2, #16
 8003bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7fd f9af 	bl	8000f38 <HAL_TIM_IC_CaptureCallback>
 8003bda:	e005      	b.n	8003be8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f91f 	bl	8003e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f926 	bl	8003e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d007      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f06f 0201 	mvn.w	r2, #1
 8003c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8fd 	bl	8003e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00c      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fbf5 	bl	8004420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00c      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d007      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8f7 	bl	8003e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00c      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f06f 0220 	mvn.w	r2, #32
 8003c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fbc7 	bl	800440c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e0ae      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0c      	cmp	r3, #12
 8003cb2:	f200 809f 	bhi.w	8003df4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003cf1 	.word	0x08003cf1
 8003cc0:	08003df5 	.word	0x08003df5
 8003cc4:	08003df5 	.word	0x08003df5
 8003cc8:	08003df5 	.word	0x08003df5
 8003ccc:	08003d31 	.word	0x08003d31
 8003cd0:	08003df5 	.word	0x08003df5
 8003cd4:	08003df5 	.word	0x08003df5
 8003cd8:	08003df5 	.word	0x08003df5
 8003cdc:	08003d73 	.word	0x08003d73
 8003ce0:	08003df5 	.word	0x08003df5
 8003ce4:	08003df5 	.word	0x08003df5
 8003ce8:	08003df5 	.word	0x08003df5
 8003cec:	08003db3 	.word	0x08003db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f95c 	bl	8003fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0208 	orr.w	r2, r2, #8
 8003d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0204 	bic.w	r2, r2, #4
 8003d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6999      	ldr	r1, [r3, #24]
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	619a      	str	r2, [r3, #24]
      break;
 8003d2e:	e064      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f9ac 	bl	8004094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	021a      	lsls	r2, r3, #8
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	619a      	str	r2, [r3, #24]
      break;
 8003d70:	e043      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fa01 	bl	8004180 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0208 	orr.w	r2, r2, #8
 8003d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0204 	bic.w	r2, r2, #4
 8003d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69d9      	ldr	r1, [r3, #28]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
      break;
 8003db0:	e023      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fa55 	bl	8004268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
      break;
 8003df8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a46      	ldr	r2, [pc, #280]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7a:	d00f      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a43      	ldr	r2, [pc, #268]	@ (8003f8c <TIM_Base_SetConfig+0x130>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00b      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a42      	ldr	r2, [pc, #264]	@ (8003f90 <TIM_Base_SetConfig+0x134>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a41      	ldr	r2, [pc, #260]	@ (8003f94 <TIM_Base_SetConfig+0x138>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d108      	bne.n	8003eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a35      	ldr	r2, [pc, #212]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d02b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d027      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a32      	ldr	r2, [pc, #200]	@ (8003f8c <TIM_Base_SetConfig+0x130>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d023      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a31      	ldr	r2, [pc, #196]	@ (8003f90 <TIM_Base_SetConfig+0x134>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a30      	ldr	r2, [pc, #192]	@ (8003f94 <TIM_Base_SetConfig+0x138>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d017      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f9c <TIM_Base_SetConfig+0x140>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa0 <TIM_Base_SetConfig+0x144>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00f      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa4 <TIM_Base_SetConfig+0x148>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d00b      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <TIM_Base_SetConfig+0x14c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d007      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <TIM_Base_SetConfig+0x150>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d003      	beq.n	8003f0e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <TIM_Base_SetConfig+0x154>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d108      	bne.n	8003f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a10      	ldr	r2, [pc, #64]	@ (8003f88 <TIM_Base_SetConfig+0x12c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d003      	beq.n	8003f54 <TIM_Base_SetConfig+0xf8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a12      	ldr	r2, [pc, #72]	@ (8003f98 <TIM_Base_SetConfig+0x13c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d103      	bne.n	8003f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d105      	bne.n	8003f7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f023 0201 	bic.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	611a      	str	r2, [r3, #16]
  }
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000
 8003f8c:	40000400 	.word	0x40000400
 8003f90:	40000800 	.word	0x40000800
 8003f94:	40000c00 	.word	0x40000c00
 8003f98:	40010400 	.word	0x40010400
 8003f9c:	40014000 	.word	0x40014000
 8003fa0:	40014400 	.word	0x40014400
 8003fa4:	40014800 	.word	0x40014800
 8003fa8:	40001800 	.word	0x40001800
 8003fac:	40001c00 	.word	0x40001c00
 8003fb0:	40002000 	.word	0x40002000

08003fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f023 0201 	bic.w	r2, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0303 	bic.w	r3, r3, #3
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f023 0302 	bic.w	r3, r3, #2
 8003ffc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a20      	ldr	r2, [pc, #128]	@ (800408c <TIM_OC1_SetConfig+0xd8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <TIM_OC1_SetConfig+0x64>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a1f      	ldr	r2, [pc, #124]	@ (8004090 <TIM_OC1_SetConfig+0xdc>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d10c      	bne.n	8004032 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f023 0308 	bic.w	r3, r3, #8
 800401e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	4313      	orrs	r3, r2
 8004028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f023 0304 	bic.w	r3, r3, #4
 8004030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a15      	ldr	r2, [pc, #84]	@ (800408c <TIM_OC1_SetConfig+0xd8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_OC1_SetConfig+0x8e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <TIM_OC1_SetConfig+0xdc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d111      	bne.n	8004066 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40010000 	.word	0x40010000
 8004090:	40010400 	.word	0x40010400

08004094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f023 0210 	bic.w	r2, r3, #16
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f023 0320 	bic.w	r3, r3, #32
 80040de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a22      	ldr	r2, [pc, #136]	@ (8004178 <TIM_OC2_SetConfig+0xe4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_OC2_SetConfig+0x68>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a21      	ldr	r2, [pc, #132]	@ (800417c <TIM_OC2_SetConfig+0xe8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a17      	ldr	r2, [pc, #92]	@ (8004178 <TIM_OC2_SetConfig+0xe4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC2_SetConfig+0x94>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a16      	ldr	r2, [pc, #88]	@ (800417c <TIM_OC2_SetConfig+0xe8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d113      	bne.n	8004150 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800412e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40010400 	.word	0x40010400

08004180 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a21      	ldr	r2, [pc, #132]	@ (8004260 <TIM_OC3_SetConfig+0xe0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC3_SetConfig+0x66>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a20      	ldr	r2, [pc, #128]	@ (8004264 <TIM_OC3_SetConfig+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d10d      	bne.n	8004202 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004200:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <TIM_OC3_SetConfig+0xe0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_OC3_SetConfig+0x92>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a15      	ldr	r2, [pc, #84]	@ (8004264 <TIM_OC3_SetConfig+0xe4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d113      	bne.n	800423a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	621a      	str	r2, [r3, #32]
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40010000 	.word	0x40010000
 8004264:	40010400 	.word	0x40010400

08004268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800429e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <TIM_OC4_SetConfig+0xa4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_OC4_SetConfig+0x68>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a11      	ldr	r2, [pc, #68]	@ (8004310 <TIM_OC4_SetConfig+0xa8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d109      	bne.n	80042e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40010400 	.word	0x40010400

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e05a      	b.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d022      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004378:	d01d      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d018      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d00e      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10c      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40010400 	.word	0x40010400
 8004404:	40014000 	.word	0x40014000
 8004408:	40001800 	.word	0x40001800

0800440c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e042      	b.n	80044cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fd fb52 	bl	8001b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f82b 	bl	80044d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800448c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800449c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d8:	b0c0      	sub	sp, #256	@ 0x100
 80044da:	af00      	add	r7, sp, #0
 80044dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	68d9      	ldr	r1, [r3, #12]
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	ea40 0301 	orr.w	r3, r0, r1
 80044fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	431a      	orrs	r2, r3
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	431a      	orrs	r2, r3
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800452c:	f021 010c 	bic.w	r1, r1, #12
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800453a:	430b      	orrs	r3, r1
 800453c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800453e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	6999      	ldr	r1, [r3, #24]
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	ea40 0301 	orr.w	r3, r0, r1
 800455a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b8f      	ldr	r3, [pc, #572]	@ (80047a0 <UART_SetConfig+0x2cc>)
 8004564:	429a      	cmp	r2, r3
 8004566:	d005      	beq.n	8004574 <UART_SetConfig+0xa0>
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b8d      	ldr	r3, [pc, #564]	@ (80047a4 <UART_SetConfig+0x2d0>)
 8004570:	429a      	cmp	r2, r3
 8004572:	d104      	bne.n	800457e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004574:	f7ff f98e 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
 8004578:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800457c:	e003      	b.n	8004586 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800457e:	f7ff f975 	bl	800386c <HAL_RCC_GetPCLK1Freq>
 8004582:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004590:	f040 810c 	bne.w	80047ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004598:	2200      	movs	r2, #0
 800459a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800459e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045a6:	4622      	mov	r2, r4
 80045a8:	462b      	mov	r3, r5
 80045aa:	1891      	adds	r1, r2, r2
 80045ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045ae:	415b      	adcs	r3, r3
 80045b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045b6:	4621      	mov	r1, r4
 80045b8:	eb12 0801 	adds.w	r8, r2, r1
 80045bc:	4629      	mov	r1, r5
 80045be:	eb43 0901 	adc.w	r9, r3, r1
 80045c2:	f04f 0200 	mov.w	r2, #0
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045d6:	4690      	mov	r8, r2
 80045d8:	4699      	mov	r9, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	eb18 0303 	adds.w	r3, r8, r3
 80045e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045e4:	462b      	mov	r3, r5
 80045e6:	eb49 0303 	adc.w	r3, r9, r3
 80045ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004602:	460b      	mov	r3, r1
 8004604:	18db      	adds	r3, r3, r3
 8004606:	653b      	str	r3, [r7, #80]	@ 0x50
 8004608:	4613      	mov	r3, r2
 800460a:	eb42 0303 	adc.w	r3, r2, r3
 800460e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004610:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004614:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004618:	f7fc fb16 	bl	8000c48 <__aeabi_uldivmod>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4b61      	ldr	r3, [pc, #388]	@ (80047a8 <UART_SetConfig+0x2d4>)
 8004622:	fba3 2302 	umull	r2, r3, r3, r2
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	011c      	lsls	r4, r3, #4
 800462a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800462e:	2200      	movs	r2, #0
 8004630:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004634:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004638:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800463c:	4642      	mov	r2, r8
 800463e:	464b      	mov	r3, r9
 8004640:	1891      	adds	r1, r2, r2
 8004642:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004644:	415b      	adcs	r3, r3
 8004646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004648:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800464c:	4641      	mov	r1, r8
 800464e:	eb12 0a01 	adds.w	sl, r2, r1
 8004652:	4649      	mov	r1, r9
 8004654:	eb43 0b01 	adc.w	fp, r3, r1
 8004658:	f04f 0200 	mov.w	r2, #0
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004664:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800466c:	4692      	mov	sl, r2
 800466e:	469b      	mov	fp, r3
 8004670:	4643      	mov	r3, r8
 8004672:	eb1a 0303 	adds.w	r3, sl, r3
 8004676:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800467a:	464b      	mov	r3, r9
 800467c:	eb4b 0303 	adc.w	r3, fp, r3
 8004680:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004690:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004694:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004698:	460b      	mov	r3, r1
 800469a:	18db      	adds	r3, r3, r3
 800469c:	643b      	str	r3, [r7, #64]	@ 0x40
 800469e:	4613      	mov	r3, r2
 80046a0:	eb42 0303 	adc.w	r3, r2, r3
 80046a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046ae:	f7fc facb 	bl	8000c48 <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	4b3b      	ldr	r3, [pc, #236]	@ (80047a8 <UART_SetConfig+0x2d4>)
 80046ba:	fba3 2301 	umull	r2, r3, r3, r1
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	2264      	movs	r2, #100	@ 0x64
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	1acb      	subs	r3, r1, r3
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046ce:	4b36      	ldr	r3, [pc, #216]	@ (80047a8 <UART_SetConfig+0x2d4>)
 80046d0:	fba3 2302 	umull	r2, r3, r3, r2
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046dc:	441c      	add	r4, r3
 80046de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046f0:	4642      	mov	r2, r8
 80046f2:	464b      	mov	r3, r9
 80046f4:	1891      	adds	r1, r2, r2
 80046f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046f8:	415b      	adcs	r3, r3
 80046fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004700:	4641      	mov	r1, r8
 8004702:	1851      	adds	r1, r2, r1
 8004704:	6339      	str	r1, [r7, #48]	@ 0x30
 8004706:	4649      	mov	r1, r9
 8004708:	414b      	adcs	r3, r1
 800470a:	637b      	str	r3, [r7, #52]	@ 0x34
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004718:	4659      	mov	r1, fp
 800471a:	00cb      	lsls	r3, r1, #3
 800471c:	4651      	mov	r1, sl
 800471e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004722:	4651      	mov	r1, sl
 8004724:	00ca      	lsls	r2, r1, #3
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	4603      	mov	r3, r0
 800472c:	4642      	mov	r2, r8
 800472e:	189b      	adds	r3, r3, r2
 8004730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004734:	464b      	mov	r3, r9
 8004736:	460a      	mov	r2, r1
 8004738:	eb42 0303 	adc.w	r3, r2, r3
 800473c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800474c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004750:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004754:	460b      	mov	r3, r1
 8004756:	18db      	adds	r3, r3, r3
 8004758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800475a:	4613      	mov	r3, r2
 800475c:	eb42 0303 	adc.w	r3, r2, r3
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004766:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800476a:	f7fc fa6d 	bl	8000c48 <__aeabi_uldivmod>
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	4b0d      	ldr	r3, [pc, #52]	@ (80047a8 <UART_SetConfig+0x2d4>)
 8004774:	fba3 1302 	umull	r1, r3, r3, r2
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	2164      	movs	r1, #100	@ 0x64
 800477c:	fb01 f303 	mul.w	r3, r1, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	3332      	adds	r3, #50	@ 0x32
 8004786:	4a08      	ldr	r2, [pc, #32]	@ (80047a8 <UART_SetConfig+0x2d4>)
 8004788:	fba2 2303 	umull	r2, r3, r2, r3
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	f003 0207 	and.w	r2, r3, #7
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4422      	add	r2, r4
 800479a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800479c:	e106      	b.n	80049ac <UART_SetConfig+0x4d8>
 800479e:	bf00      	nop
 80047a0:	40011000 	.word	0x40011000
 80047a4:	40011400 	.word	0x40011400
 80047a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047be:	4642      	mov	r2, r8
 80047c0:	464b      	mov	r3, r9
 80047c2:	1891      	adds	r1, r2, r2
 80047c4:	6239      	str	r1, [r7, #32]
 80047c6:	415b      	adcs	r3, r3
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ce:	4641      	mov	r1, r8
 80047d0:	1854      	adds	r4, r2, r1
 80047d2:	4649      	mov	r1, r9
 80047d4:	eb43 0501 	adc.w	r5, r3, r1
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	00eb      	lsls	r3, r5, #3
 80047e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047e6:	00e2      	lsls	r2, r4, #3
 80047e8:	4614      	mov	r4, r2
 80047ea:	461d      	mov	r5, r3
 80047ec:	4643      	mov	r3, r8
 80047ee:	18e3      	adds	r3, r4, r3
 80047f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047f4:	464b      	mov	r3, r9
 80047f6:	eb45 0303 	adc.w	r3, r5, r3
 80047fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800480a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800481a:	4629      	mov	r1, r5
 800481c:	008b      	lsls	r3, r1, #2
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004824:	4621      	mov	r1, r4
 8004826:	008a      	lsls	r2, r1, #2
 8004828:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800482c:	f7fc fa0c 	bl	8000c48 <__aeabi_uldivmod>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	4b60      	ldr	r3, [pc, #384]	@ (80049b8 <UART_SetConfig+0x4e4>)
 8004836:	fba3 2302 	umull	r2, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	011c      	lsls	r4, r3, #4
 800483e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004842:	2200      	movs	r2, #0
 8004844:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004848:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800484c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004850:	4642      	mov	r2, r8
 8004852:	464b      	mov	r3, r9
 8004854:	1891      	adds	r1, r2, r2
 8004856:	61b9      	str	r1, [r7, #24]
 8004858:	415b      	adcs	r3, r3
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004860:	4641      	mov	r1, r8
 8004862:	1851      	adds	r1, r2, r1
 8004864:	6139      	str	r1, [r7, #16]
 8004866:	4649      	mov	r1, r9
 8004868:	414b      	adcs	r3, r1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004878:	4659      	mov	r1, fp
 800487a:	00cb      	lsls	r3, r1, #3
 800487c:	4651      	mov	r1, sl
 800487e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004882:	4651      	mov	r1, sl
 8004884:	00ca      	lsls	r2, r1, #3
 8004886:	4610      	mov	r0, r2
 8004888:	4619      	mov	r1, r3
 800488a:	4603      	mov	r3, r0
 800488c:	4642      	mov	r2, r8
 800488e:	189b      	adds	r3, r3, r2
 8004890:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004894:	464b      	mov	r3, r9
 8004896:	460a      	mov	r2, r1
 8004898:	eb42 0303 	adc.w	r3, r2, r3
 800489c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048b8:	4649      	mov	r1, r9
 80048ba:	008b      	lsls	r3, r1, #2
 80048bc:	4641      	mov	r1, r8
 80048be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048c2:	4641      	mov	r1, r8
 80048c4:	008a      	lsls	r2, r1, #2
 80048c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ca:	f7fc f9bd 	bl	8000c48 <__aeabi_uldivmod>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4611      	mov	r1, r2
 80048d4:	4b38      	ldr	r3, [pc, #224]	@ (80049b8 <UART_SetConfig+0x4e4>)
 80048d6:	fba3 2301 	umull	r2, r3, r3, r1
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2264      	movs	r2, #100	@ 0x64
 80048de:	fb02 f303 	mul.w	r3, r2, r3
 80048e2:	1acb      	subs	r3, r1, r3
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	3332      	adds	r3, #50	@ 0x32
 80048e8:	4a33      	ldr	r2, [pc, #204]	@ (80049b8 <UART_SetConfig+0x4e4>)
 80048ea:	fba2 2303 	umull	r2, r3, r2, r3
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048f4:	441c      	add	r4, r3
 80048f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048fa:	2200      	movs	r2, #0
 80048fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80048fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004900:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004904:	4642      	mov	r2, r8
 8004906:	464b      	mov	r3, r9
 8004908:	1891      	adds	r1, r2, r2
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	415b      	adcs	r3, r3
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004914:	4641      	mov	r1, r8
 8004916:	1851      	adds	r1, r2, r1
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	4649      	mov	r1, r9
 800491c:	414b      	adcs	r3, r1
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800492c:	4659      	mov	r1, fp
 800492e:	00cb      	lsls	r3, r1, #3
 8004930:	4651      	mov	r1, sl
 8004932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004936:	4651      	mov	r1, sl
 8004938:	00ca      	lsls	r2, r1, #3
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	4603      	mov	r3, r0
 8004940:	4642      	mov	r2, r8
 8004942:	189b      	adds	r3, r3, r2
 8004944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004946:	464b      	mov	r3, r9
 8004948:	460a      	mov	r2, r1
 800494a:	eb42 0303 	adc.w	r3, r2, r3
 800494e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	663b      	str	r3, [r7, #96]	@ 0x60
 800495a:	667a      	str	r2, [r7, #100]	@ 0x64
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004968:	4649      	mov	r1, r9
 800496a:	008b      	lsls	r3, r1, #2
 800496c:	4641      	mov	r1, r8
 800496e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004972:	4641      	mov	r1, r8
 8004974:	008a      	lsls	r2, r1, #2
 8004976:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800497a:	f7fc f965 	bl	8000c48 <__aeabi_uldivmod>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <UART_SetConfig+0x4e4>)
 8004984:	fba3 1302 	umull	r1, r3, r3, r2
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	2164      	movs	r1, #100	@ 0x64
 800498c:	fb01 f303 	mul.w	r3, r1, r3
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	3332      	adds	r3, #50	@ 0x32
 8004996:	4a08      	ldr	r2, [pc, #32]	@ (80049b8 <UART_SetConfig+0x4e4>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	095b      	lsrs	r3, r3, #5
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4422      	add	r2, r4
 80049aa:	609a      	str	r2, [r3, #8]
}
 80049ac:	bf00      	nop
 80049ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049b2:	46bd      	mov	sp, r7
 80049b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049b8:	51eb851f 	.word	0x51eb851f

080049bc <__cvt>:
 80049bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	ec57 6b10 	vmov	r6, r7, d0
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	460c      	mov	r4, r1
 80049c8:	4619      	mov	r1, r3
 80049ca:	463b      	mov	r3, r7
 80049cc:	bfbb      	ittet	lt
 80049ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80049d2:	461f      	movlt	r7, r3
 80049d4:	2300      	movge	r3, #0
 80049d6:	232d      	movlt	r3, #45	@ 0x2d
 80049d8:	700b      	strb	r3, [r1, #0]
 80049da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80049e0:	4691      	mov	r9, r2
 80049e2:	f023 0820 	bic.w	r8, r3, #32
 80049e6:	bfbc      	itt	lt
 80049e8:	4632      	movlt	r2, r6
 80049ea:	4616      	movlt	r6, r2
 80049ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049f0:	d005      	beq.n	80049fe <__cvt+0x42>
 80049f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049f6:	d100      	bne.n	80049fa <__cvt+0x3e>
 80049f8:	3401      	adds	r4, #1
 80049fa:	2102      	movs	r1, #2
 80049fc:	e000      	b.n	8004a00 <__cvt+0x44>
 80049fe:	2103      	movs	r1, #3
 8004a00:	ab03      	add	r3, sp, #12
 8004a02:	9301      	str	r3, [sp, #4]
 8004a04:	ab02      	add	r3, sp, #8
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	ec47 6b10 	vmov	d0, r6, r7
 8004a0c:	4653      	mov	r3, sl
 8004a0e:	4622      	mov	r2, r4
 8004a10:	f000 fe3a 	bl	8005688 <_dtoa_r>
 8004a14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a18:	4605      	mov	r5, r0
 8004a1a:	d119      	bne.n	8004a50 <__cvt+0x94>
 8004a1c:	f019 0f01 	tst.w	r9, #1
 8004a20:	d00e      	beq.n	8004a40 <__cvt+0x84>
 8004a22:	eb00 0904 	add.w	r9, r0, r4
 8004a26:	2200      	movs	r2, #0
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	f7fc f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a32:	b108      	cbz	r0, 8004a38 <__cvt+0x7c>
 8004a34:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a38:	2230      	movs	r2, #48	@ 0x30
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	454b      	cmp	r3, r9
 8004a3e:	d31e      	bcc.n	8004a7e <__cvt+0xc2>
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a44:	1b5b      	subs	r3, r3, r5
 8004a46:	4628      	mov	r0, r5
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	b004      	add	sp, #16
 8004a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a54:	eb00 0904 	add.w	r9, r0, r4
 8004a58:	d1e5      	bne.n	8004a26 <__cvt+0x6a>
 8004a5a:	7803      	ldrb	r3, [r0, #0]
 8004a5c:	2b30      	cmp	r3, #48	@ 0x30
 8004a5e:	d10a      	bne.n	8004a76 <__cvt+0xba>
 8004a60:	2200      	movs	r2, #0
 8004a62:	2300      	movs	r3, #0
 8004a64:	4630      	mov	r0, r6
 8004a66:	4639      	mov	r1, r7
 8004a68:	f7fc f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a6c:	b918      	cbnz	r0, 8004a76 <__cvt+0xba>
 8004a6e:	f1c4 0401 	rsb	r4, r4, #1
 8004a72:	f8ca 4000 	str.w	r4, [sl]
 8004a76:	f8da 3000 	ldr.w	r3, [sl]
 8004a7a:	4499      	add	r9, r3
 8004a7c:	e7d3      	b.n	8004a26 <__cvt+0x6a>
 8004a7e:	1c59      	adds	r1, r3, #1
 8004a80:	9103      	str	r1, [sp, #12]
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	e7d9      	b.n	8004a3a <__cvt+0x7e>

08004a86 <__exponent>:
 8004a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	bfba      	itte	lt
 8004a8c:	4249      	neglt	r1, r1
 8004a8e:	232d      	movlt	r3, #45	@ 0x2d
 8004a90:	232b      	movge	r3, #43	@ 0x2b
 8004a92:	2909      	cmp	r1, #9
 8004a94:	7002      	strb	r2, [r0, #0]
 8004a96:	7043      	strb	r3, [r0, #1]
 8004a98:	dd29      	ble.n	8004aee <__exponent+0x68>
 8004a9a:	f10d 0307 	add.w	r3, sp, #7
 8004a9e:	461d      	mov	r5, r3
 8004aa0:	270a      	movs	r7, #10
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	fbb1 f6f7 	udiv	r6, r1, r7
 8004aa8:	fb07 1416 	mls	r4, r7, r6, r1
 8004aac:	3430      	adds	r4, #48	@ 0x30
 8004aae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ab2:	460c      	mov	r4, r1
 8004ab4:	2c63      	cmp	r4, #99	@ 0x63
 8004ab6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aba:	4631      	mov	r1, r6
 8004abc:	dcf1      	bgt.n	8004aa2 <__exponent+0x1c>
 8004abe:	3130      	adds	r1, #48	@ 0x30
 8004ac0:	1e94      	subs	r4, r2, #2
 8004ac2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ac6:	1c41      	adds	r1, r0, #1
 8004ac8:	4623      	mov	r3, r4
 8004aca:	42ab      	cmp	r3, r5
 8004acc:	d30a      	bcc.n	8004ae4 <__exponent+0x5e>
 8004ace:	f10d 0309 	add.w	r3, sp, #9
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	42ac      	cmp	r4, r5
 8004ad6:	bf88      	it	hi
 8004ad8:	2300      	movhi	r3, #0
 8004ada:	3302      	adds	r3, #2
 8004adc:	4403      	add	r3, r0
 8004ade:	1a18      	subs	r0, r3, r0
 8004ae0:	b003      	add	sp, #12
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ae8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004aec:	e7ed      	b.n	8004aca <__exponent+0x44>
 8004aee:	2330      	movs	r3, #48	@ 0x30
 8004af0:	3130      	adds	r1, #48	@ 0x30
 8004af2:	7083      	strb	r3, [r0, #2]
 8004af4:	70c1      	strb	r1, [r0, #3]
 8004af6:	1d03      	adds	r3, r0, #4
 8004af8:	e7f1      	b.n	8004ade <__exponent+0x58>
	...

08004afc <_printf_float>:
 8004afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b00:	b08d      	sub	sp, #52	@ 0x34
 8004b02:	460c      	mov	r4, r1
 8004b04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004b08:	4616      	mov	r6, r2
 8004b0a:	461f      	mov	r7, r3
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	f000 fcbb 	bl	8005488 <_localeconv_r>
 8004b12:	6803      	ldr	r3, [r0, #0]
 8004b14:	9304      	str	r3, [sp, #16]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fb fbaa 	bl	8000270 <strlen>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b20:	f8d8 3000 	ldr.w	r3, [r8]
 8004b24:	9005      	str	r0, [sp, #20]
 8004b26:	3307      	adds	r3, #7
 8004b28:	f023 0307 	bic.w	r3, r3, #7
 8004b2c:	f103 0208 	add.w	r2, r3, #8
 8004b30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b34:	f8d4 b000 	ldr.w	fp, [r4]
 8004b38:	f8c8 2000 	str.w	r2, [r8]
 8004b3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b44:	9307      	str	r3, [sp, #28]
 8004b46:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b52:	4b9c      	ldr	r3, [pc, #624]	@ (8004dc4 <_printf_float+0x2c8>)
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	f7fb ffe8 	bl	8000b2c <__aeabi_dcmpun>
 8004b5c:	bb70      	cbnz	r0, 8004bbc <_printf_float+0xc0>
 8004b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b62:	4b98      	ldr	r3, [pc, #608]	@ (8004dc4 <_printf_float+0x2c8>)
 8004b64:	f04f 32ff 	mov.w	r2, #4294967295
 8004b68:	f7fb ffc2 	bl	8000af0 <__aeabi_dcmple>
 8004b6c:	bb30      	cbnz	r0, 8004bbc <_printf_float+0xc0>
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2300      	movs	r3, #0
 8004b72:	4640      	mov	r0, r8
 8004b74:	4649      	mov	r1, r9
 8004b76:	f7fb ffb1 	bl	8000adc <__aeabi_dcmplt>
 8004b7a:	b110      	cbz	r0, 8004b82 <_printf_float+0x86>
 8004b7c:	232d      	movs	r3, #45	@ 0x2d
 8004b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b82:	4a91      	ldr	r2, [pc, #580]	@ (8004dc8 <_printf_float+0x2cc>)
 8004b84:	4b91      	ldr	r3, [pc, #580]	@ (8004dcc <_printf_float+0x2d0>)
 8004b86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b8a:	bf94      	ite	ls
 8004b8c:	4690      	movls	r8, r2
 8004b8e:	4698      	movhi	r8, r3
 8004b90:	2303      	movs	r3, #3
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	f02b 0304 	bic.w	r3, fp, #4
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	f04f 0900 	mov.w	r9, #0
 8004b9e:	9700      	str	r7, [sp, #0]
 8004ba0:	4633      	mov	r3, r6
 8004ba2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 f9d2 	bl	8004f50 <_printf_common>
 8004bac:	3001      	adds	r0, #1
 8004bae:	f040 808d 	bne.w	8004ccc <_printf_float+0x1d0>
 8004bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb6:	b00d      	add	sp, #52	@ 0x34
 8004bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bbc:	4642      	mov	r2, r8
 8004bbe:	464b      	mov	r3, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	f7fb ffb2 	bl	8000b2c <__aeabi_dcmpun>
 8004bc8:	b140      	cbz	r0, 8004bdc <_printf_float+0xe0>
 8004bca:	464b      	mov	r3, r9
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bfbc      	itt	lt
 8004bd0:	232d      	movlt	r3, #45	@ 0x2d
 8004bd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004dd0 <_printf_float+0x2d4>)
 8004bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004dd4 <_printf_float+0x2d8>)
 8004bda:	e7d4      	b.n	8004b86 <_printf_float+0x8a>
 8004bdc:	6863      	ldr	r3, [r4, #4]
 8004bde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004be2:	9206      	str	r2, [sp, #24]
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	d13b      	bne.n	8004c60 <_printf_float+0x164>
 8004be8:	2306      	movs	r3, #6
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6022      	str	r2, [r4, #0]
 8004bf4:	9303      	str	r3, [sp, #12]
 8004bf6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004bf8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004bfc:	ab09      	add	r3, sp, #36	@ 0x24
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	6861      	ldr	r1, [r4, #4]
 8004c02:	ec49 8b10 	vmov	d0, r8, r9
 8004c06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7ff fed6 	bl	80049bc <__cvt>
 8004c10:	9b06      	ldr	r3, [sp, #24]
 8004c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c14:	2b47      	cmp	r3, #71	@ 0x47
 8004c16:	4680      	mov	r8, r0
 8004c18:	d129      	bne.n	8004c6e <_printf_float+0x172>
 8004c1a:	1cc8      	adds	r0, r1, #3
 8004c1c:	db02      	blt.n	8004c24 <_printf_float+0x128>
 8004c1e:	6863      	ldr	r3, [r4, #4]
 8004c20:	4299      	cmp	r1, r3
 8004c22:	dd41      	ble.n	8004ca8 <_printf_float+0x1ac>
 8004c24:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c28:	fa5f fa8a 	uxtb.w	sl, sl
 8004c2c:	3901      	subs	r1, #1
 8004c2e:	4652      	mov	r2, sl
 8004c30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c34:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c36:	f7ff ff26 	bl	8004a86 <__exponent>
 8004c3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c3c:	1813      	adds	r3, r2, r0
 8004c3e:	2a01      	cmp	r2, #1
 8004c40:	4681      	mov	r9, r0
 8004c42:	6123      	str	r3, [r4, #16]
 8004c44:	dc02      	bgt.n	8004c4c <_printf_float+0x150>
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	07d2      	lsls	r2, r2, #31
 8004c4a:	d501      	bpl.n	8004c50 <_printf_float+0x154>
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0a2      	beq.n	8004b9e <_printf_float+0xa2>
 8004c58:	232d      	movs	r3, #45	@ 0x2d
 8004c5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c5e:	e79e      	b.n	8004b9e <_printf_float+0xa2>
 8004c60:	9a06      	ldr	r2, [sp, #24]
 8004c62:	2a47      	cmp	r2, #71	@ 0x47
 8004c64:	d1c2      	bne.n	8004bec <_printf_float+0xf0>
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1c0      	bne.n	8004bec <_printf_float+0xf0>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e7bd      	b.n	8004bea <_printf_float+0xee>
 8004c6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c72:	d9db      	bls.n	8004c2c <_printf_float+0x130>
 8004c74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c78:	d118      	bne.n	8004cac <_printf_float+0x1b0>
 8004c7a:	2900      	cmp	r1, #0
 8004c7c:	6863      	ldr	r3, [r4, #4]
 8004c7e:	dd0b      	ble.n	8004c98 <_printf_float+0x19c>
 8004c80:	6121      	str	r1, [r4, #16]
 8004c82:	b913      	cbnz	r3, 8004c8a <_printf_float+0x18e>
 8004c84:	6822      	ldr	r2, [r4, #0]
 8004c86:	07d0      	lsls	r0, r2, #31
 8004c88:	d502      	bpl.n	8004c90 <_printf_float+0x194>
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	440b      	add	r3, r1
 8004c8e:	6123      	str	r3, [r4, #16]
 8004c90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c92:	f04f 0900 	mov.w	r9, #0
 8004c96:	e7db      	b.n	8004c50 <_printf_float+0x154>
 8004c98:	b913      	cbnz	r3, 8004ca0 <_printf_float+0x1a4>
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	07d2      	lsls	r2, r2, #31
 8004c9e:	d501      	bpl.n	8004ca4 <_printf_float+0x1a8>
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	e7f4      	b.n	8004c8e <_printf_float+0x192>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e7f2      	b.n	8004c8e <_printf_float+0x192>
 8004ca8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cae:	4299      	cmp	r1, r3
 8004cb0:	db05      	blt.n	8004cbe <_printf_float+0x1c2>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	6121      	str	r1, [r4, #16]
 8004cb6:	07d8      	lsls	r0, r3, #31
 8004cb8:	d5ea      	bpl.n	8004c90 <_printf_float+0x194>
 8004cba:	1c4b      	adds	r3, r1, #1
 8004cbc:	e7e7      	b.n	8004c8e <_printf_float+0x192>
 8004cbe:	2900      	cmp	r1, #0
 8004cc0:	bfd4      	ite	le
 8004cc2:	f1c1 0202 	rsble	r2, r1, #2
 8004cc6:	2201      	movgt	r2, #1
 8004cc8:	4413      	add	r3, r2
 8004cca:	e7e0      	b.n	8004c8e <_printf_float+0x192>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	055a      	lsls	r2, r3, #21
 8004cd0:	d407      	bmi.n	8004ce2 <_printf_float+0x1e6>
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	4642      	mov	r2, r8
 8004cd6:	4631      	mov	r1, r6
 8004cd8:	4628      	mov	r0, r5
 8004cda:	47b8      	blx	r7
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d12b      	bne.n	8004d38 <_printf_float+0x23c>
 8004ce0:	e767      	b.n	8004bb2 <_printf_float+0xb6>
 8004ce2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ce6:	f240 80dd 	bls.w	8004ea4 <_printf_float+0x3a8>
 8004cea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f7fb fee9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d033      	beq.n	8004d62 <_printf_float+0x266>
 8004cfa:	4a37      	ldr	r2, [pc, #220]	@ (8004dd8 <_printf_float+0x2dc>)
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4628      	mov	r0, r5
 8004d02:	47b8      	blx	r7
 8004d04:	3001      	adds	r0, #1
 8004d06:	f43f af54 	beq.w	8004bb2 <_printf_float+0xb6>
 8004d0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004d0e:	4543      	cmp	r3, r8
 8004d10:	db02      	blt.n	8004d18 <_printf_float+0x21c>
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	07d8      	lsls	r0, r3, #31
 8004d16:	d50f      	bpl.n	8004d38 <_printf_float+0x23c>
 8004d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	47b8      	blx	r7
 8004d22:	3001      	adds	r0, #1
 8004d24:	f43f af45 	beq.w	8004bb2 <_printf_float+0xb6>
 8004d28:	f04f 0900 	mov.w	r9, #0
 8004d2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d30:	f104 0a1a 	add.w	sl, r4, #26
 8004d34:	45c8      	cmp	r8, r9
 8004d36:	dc09      	bgt.n	8004d4c <_printf_float+0x250>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	079b      	lsls	r3, r3, #30
 8004d3c:	f100 8103 	bmi.w	8004f46 <_printf_float+0x44a>
 8004d40:	68e0      	ldr	r0, [r4, #12]
 8004d42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d44:	4298      	cmp	r0, r3
 8004d46:	bfb8      	it	lt
 8004d48:	4618      	movlt	r0, r3
 8004d4a:	e734      	b.n	8004bb6 <_printf_float+0xba>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4652      	mov	r2, sl
 8004d50:	4631      	mov	r1, r6
 8004d52:	4628      	mov	r0, r5
 8004d54:	47b8      	blx	r7
 8004d56:	3001      	adds	r0, #1
 8004d58:	f43f af2b 	beq.w	8004bb2 <_printf_float+0xb6>
 8004d5c:	f109 0901 	add.w	r9, r9, #1
 8004d60:	e7e8      	b.n	8004d34 <_printf_float+0x238>
 8004d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	dc39      	bgt.n	8004ddc <_printf_float+0x2e0>
 8004d68:	4a1b      	ldr	r2, [pc, #108]	@ (8004dd8 <_printf_float+0x2dc>)
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	4631      	mov	r1, r6
 8004d6e:	4628      	mov	r0, r5
 8004d70:	47b8      	blx	r7
 8004d72:	3001      	adds	r0, #1
 8004d74:	f43f af1d 	beq.w	8004bb2 <_printf_float+0xb6>
 8004d78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d7c:	ea59 0303 	orrs.w	r3, r9, r3
 8004d80:	d102      	bne.n	8004d88 <_printf_float+0x28c>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	07d9      	lsls	r1, r3, #31
 8004d86:	d5d7      	bpl.n	8004d38 <_printf_float+0x23c>
 8004d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	f43f af0d 	beq.w	8004bb2 <_printf_float+0xb6>
 8004d98:	f04f 0a00 	mov.w	sl, #0
 8004d9c:	f104 0b1a 	add.w	fp, r4, #26
 8004da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da2:	425b      	negs	r3, r3
 8004da4:	4553      	cmp	r3, sl
 8004da6:	dc01      	bgt.n	8004dac <_printf_float+0x2b0>
 8004da8:	464b      	mov	r3, r9
 8004daa:	e793      	b.n	8004cd4 <_printf_float+0x1d8>
 8004dac:	2301      	movs	r3, #1
 8004dae:	465a      	mov	r2, fp
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	f43f aefb 	beq.w	8004bb2 <_printf_float+0xb6>
 8004dbc:	f10a 0a01 	add.w	sl, sl, #1
 8004dc0:	e7ee      	b.n	8004da0 <_printf_float+0x2a4>
 8004dc2:	bf00      	nop
 8004dc4:	7fefffff 	.word	0x7fefffff
 8004dc8:	080072f0 	.word	0x080072f0
 8004dcc:	080072f4 	.word	0x080072f4
 8004dd0:	080072f8 	.word	0x080072f8
 8004dd4:	080072fc 	.word	0x080072fc
 8004dd8:	08007300 	.word	0x08007300
 8004ddc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004de2:	4553      	cmp	r3, sl
 8004de4:	bfa8      	it	ge
 8004de6:	4653      	movge	r3, sl
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	4699      	mov	r9, r3
 8004dec:	dc36      	bgt.n	8004e5c <_printf_float+0x360>
 8004dee:	f04f 0b00 	mov.w	fp, #0
 8004df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004df6:	f104 021a 	add.w	r2, r4, #26
 8004dfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dfc:	9306      	str	r3, [sp, #24]
 8004dfe:	eba3 0309 	sub.w	r3, r3, r9
 8004e02:	455b      	cmp	r3, fp
 8004e04:	dc31      	bgt.n	8004e6a <_printf_float+0x36e>
 8004e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e08:	459a      	cmp	sl, r3
 8004e0a:	dc3a      	bgt.n	8004e82 <_printf_float+0x386>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	07da      	lsls	r2, r3, #31
 8004e10:	d437      	bmi.n	8004e82 <_printf_float+0x386>
 8004e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e14:	ebaa 0903 	sub.w	r9, sl, r3
 8004e18:	9b06      	ldr	r3, [sp, #24]
 8004e1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004e1e:	4599      	cmp	r9, r3
 8004e20:	bfa8      	it	ge
 8004e22:	4699      	movge	r9, r3
 8004e24:	f1b9 0f00 	cmp.w	r9, #0
 8004e28:	dc33      	bgt.n	8004e92 <_printf_float+0x396>
 8004e2a:	f04f 0800 	mov.w	r8, #0
 8004e2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e32:	f104 0b1a 	add.w	fp, r4, #26
 8004e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e38:	ebaa 0303 	sub.w	r3, sl, r3
 8004e3c:	eba3 0309 	sub.w	r3, r3, r9
 8004e40:	4543      	cmp	r3, r8
 8004e42:	f77f af79 	ble.w	8004d38 <_printf_float+0x23c>
 8004e46:	2301      	movs	r3, #1
 8004e48:	465a      	mov	r2, fp
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	f43f aeae 	beq.w	8004bb2 <_printf_float+0xb6>
 8004e56:	f108 0801 	add.w	r8, r8, #1
 8004e5a:	e7ec      	b.n	8004e36 <_printf_float+0x33a>
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	d1c2      	bne.n	8004dee <_printf_float+0x2f2>
 8004e68:	e6a3      	b.n	8004bb2 <_printf_float+0xb6>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	9206      	str	r2, [sp, #24]
 8004e72:	47b8      	blx	r7
 8004e74:	3001      	adds	r0, #1
 8004e76:	f43f ae9c 	beq.w	8004bb2 <_printf_float+0xb6>
 8004e7a:	9a06      	ldr	r2, [sp, #24]
 8004e7c:	f10b 0b01 	add.w	fp, fp, #1
 8004e80:	e7bb      	b.n	8004dfa <_printf_float+0x2fe>
 8004e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d1c0      	bne.n	8004e12 <_printf_float+0x316>
 8004e90:	e68f      	b.n	8004bb2 <_printf_float+0xb6>
 8004e92:	9a06      	ldr	r2, [sp, #24]
 8004e94:	464b      	mov	r3, r9
 8004e96:	4442      	add	r2, r8
 8004e98:	4631      	mov	r1, r6
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	47b8      	blx	r7
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d1c3      	bne.n	8004e2a <_printf_float+0x32e>
 8004ea2:	e686      	b.n	8004bb2 <_printf_float+0xb6>
 8004ea4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ea8:	f1ba 0f01 	cmp.w	sl, #1
 8004eac:	dc01      	bgt.n	8004eb2 <_printf_float+0x3b6>
 8004eae:	07db      	lsls	r3, r3, #31
 8004eb0:	d536      	bpl.n	8004f20 <_printf_float+0x424>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4642      	mov	r2, r8
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f ae78 	beq.w	8004bb2 <_printf_float+0xb6>
 8004ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b8      	blx	r7
 8004ecc:	3001      	adds	r0, #1
 8004ece:	f43f ae70 	beq.w	8004bb2 <_printf_float+0xb6>
 8004ed2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ede:	f7fb fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ee2:	b9c0      	cbnz	r0, 8004f16 <_printf_float+0x41a>
 8004ee4:	4653      	mov	r3, sl
 8004ee6:	f108 0201 	add.w	r2, r8, #1
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d10c      	bne.n	8004f0e <_printf_float+0x412>
 8004ef4:	e65d      	b.n	8004bb2 <_printf_float+0xb6>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	465a      	mov	r2, fp
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	f43f ae56 	beq.w	8004bb2 <_printf_float+0xb6>
 8004f06:	f108 0801 	add.w	r8, r8, #1
 8004f0a:	45d0      	cmp	r8, sl
 8004f0c:	dbf3      	blt.n	8004ef6 <_printf_float+0x3fa>
 8004f0e:	464b      	mov	r3, r9
 8004f10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f14:	e6df      	b.n	8004cd6 <_printf_float+0x1da>
 8004f16:	f04f 0800 	mov.w	r8, #0
 8004f1a:	f104 0b1a 	add.w	fp, r4, #26
 8004f1e:	e7f4      	b.n	8004f0a <_printf_float+0x40e>
 8004f20:	2301      	movs	r3, #1
 8004f22:	4642      	mov	r2, r8
 8004f24:	e7e1      	b.n	8004eea <_printf_float+0x3ee>
 8004f26:	2301      	movs	r3, #1
 8004f28:	464a      	mov	r2, r9
 8004f2a:	4631      	mov	r1, r6
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	47b8      	blx	r7
 8004f30:	3001      	adds	r0, #1
 8004f32:	f43f ae3e 	beq.w	8004bb2 <_printf_float+0xb6>
 8004f36:	f108 0801 	add.w	r8, r8, #1
 8004f3a:	68e3      	ldr	r3, [r4, #12]
 8004f3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f3e:	1a5b      	subs	r3, r3, r1
 8004f40:	4543      	cmp	r3, r8
 8004f42:	dcf0      	bgt.n	8004f26 <_printf_float+0x42a>
 8004f44:	e6fc      	b.n	8004d40 <_printf_float+0x244>
 8004f46:	f04f 0800 	mov.w	r8, #0
 8004f4a:	f104 0919 	add.w	r9, r4, #25
 8004f4e:	e7f4      	b.n	8004f3a <_printf_float+0x43e>

08004f50 <_printf_common>:
 8004f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f54:	4616      	mov	r6, r2
 8004f56:	4698      	mov	r8, r3
 8004f58:	688a      	ldr	r2, [r1, #8]
 8004f5a:	690b      	ldr	r3, [r1, #16]
 8004f5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f60:	4293      	cmp	r3, r2
 8004f62:	bfb8      	it	lt
 8004f64:	4613      	movlt	r3, r2
 8004f66:	6033      	str	r3, [r6, #0]
 8004f68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	b10a      	cbz	r2, 8004f76 <_printf_common+0x26>
 8004f72:	3301      	adds	r3, #1
 8004f74:	6033      	str	r3, [r6, #0]
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	0699      	lsls	r1, r3, #26
 8004f7a:	bf42      	ittt	mi
 8004f7c:	6833      	ldrmi	r3, [r6, #0]
 8004f7e:	3302      	addmi	r3, #2
 8004f80:	6033      	strmi	r3, [r6, #0]
 8004f82:	6825      	ldr	r5, [r4, #0]
 8004f84:	f015 0506 	ands.w	r5, r5, #6
 8004f88:	d106      	bne.n	8004f98 <_printf_common+0x48>
 8004f8a:	f104 0a19 	add.w	sl, r4, #25
 8004f8e:	68e3      	ldr	r3, [r4, #12]
 8004f90:	6832      	ldr	r2, [r6, #0]
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	42ab      	cmp	r3, r5
 8004f96:	dc26      	bgt.n	8004fe6 <_printf_common+0x96>
 8004f98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f9c:	6822      	ldr	r2, [r4, #0]
 8004f9e:	3b00      	subs	r3, #0
 8004fa0:	bf18      	it	ne
 8004fa2:	2301      	movne	r3, #1
 8004fa4:	0692      	lsls	r2, r2, #26
 8004fa6:	d42b      	bmi.n	8005000 <_printf_common+0xb0>
 8004fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fac:	4641      	mov	r1, r8
 8004fae:	4638      	mov	r0, r7
 8004fb0:	47c8      	blx	r9
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d01e      	beq.n	8004ff4 <_printf_common+0xa4>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	6922      	ldr	r2, [r4, #16]
 8004fba:	f003 0306 	and.w	r3, r3, #6
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	bf02      	ittt	eq
 8004fc2:	68e5      	ldreq	r5, [r4, #12]
 8004fc4:	6833      	ldreq	r3, [r6, #0]
 8004fc6:	1aed      	subeq	r5, r5, r3
 8004fc8:	68a3      	ldr	r3, [r4, #8]
 8004fca:	bf0c      	ite	eq
 8004fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fd0:	2500      	movne	r5, #0
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	bfc4      	itt	gt
 8004fd6:	1a9b      	subgt	r3, r3, r2
 8004fd8:	18ed      	addgt	r5, r5, r3
 8004fda:	2600      	movs	r6, #0
 8004fdc:	341a      	adds	r4, #26
 8004fde:	42b5      	cmp	r5, r6
 8004fe0:	d11a      	bne.n	8005018 <_printf_common+0xc8>
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	e008      	b.n	8004ff8 <_printf_common+0xa8>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	4652      	mov	r2, sl
 8004fea:	4641      	mov	r1, r8
 8004fec:	4638      	mov	r0, r7
 8004fee:	47c8      	blx	r9
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d103      	bne.n	8004ffc <_printf_common+0xac>
 8004ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ffc:	3501      	adds	r5, #1
 8004ffe:	e7c6      	b.n	8004f8e <_printf_common+0x3e>
 8005000:	18e1      	adds	r1, r4, r3
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	2030      	movs	r0, #48	@ 0x30
 8005006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800500a:	4422      	add	r2, r4
 800500c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005014:	3302      	adds	r3, #2
 8005016:	e7c7      	b.n	8004fa8 <_printf_common+0x58>
 8005018:	2301      	movs	r3, #1
 800501a:	4622      	mov	r2, r4
 800501c:	4641      	mov	r1, r8
 800501e:	4638      	mov	r0, r7
 8005020:	47c8      	blx	r9
 8005022:	3001      	adds	r0, #1
 8005024:	d0e6      	beq.n	8004ff4 <_printf_common+0xa4>
 8005026:	3601      	adds	r6, #1
 8005028:	e7d9      	b.n	8004fde <_printf_common+0x8e>
	...

0800502c <_printf_i>:
 800502c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005030:	7e0f      	ldrb	r7, [r1, #24]
 8005032:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005034:	2f78      	cmp	r7, #120	@ 0x78
 8005036:	4691      	mov	r9, r2
 8005038:	4680      	mov	r8, r0
 800503a:	460c      	mov	r4, r1
 800503c:	469a      	mov	sl, r3
 800503e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005042:	d807      	bhi.n	8005054 <_printf_i+0x28>
 8005044:	2f62      	cmp	r7, #98	@ 0x62
 8005046:	d80a      	bhi.n	800505e <_printf_i+0x32>
 8005048:	2f00      	cmp	r7, #0
 800504a:	f000 80d2 	beq.w	80051f2 <_printf_i+0x1c6>
 800504e:	2f58      	cmp	r7, #88	@ 0x58
 8005050:	f000 80b9 	beq.w	80051c6 <_printf_i+0x19a>
 8005054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800505c:	e03a      	b.n	80050d4 <_printf_i+0xa8>
 800505e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005062:	2b15      	cmp	r3, #21
 8005064:	d8f6      	bhi.n	8005054 <_printf_i+0x28>
 8005066:	a101      	add	r1, pc, #4	@ (adr r1, 800506c <_printf_i+0x40>)
 8005068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800506c:	080050c5 	.word	0x080050c5
 8005070:	080050d9 	.word	0x080050d9
 8005074:	08005055 	.word	0x08005055
 8005078:	08005055 	.word	0x08005055
 800507c:	08005055 	.word	0x08005055
 8005080:	08005055 	.word	0x08005055
 8005084:	080050d9 	.word	0x080050d9
 8005088:	08005055 	.word	0x08005055
 800508c:	08005055 	.word	0x08005055
 8005090:	08005055 	.word	0x08005055
 8005094:	08005055 	.word	0x08005055
 8005098:	080051d9 	.word	0x080051d9
 800509c:	08005103 	.word	0x08005103
 80050a0:	08005193 	.word	0x08005193
 80050a4:	08005055 	.word	0x08005055
 80050a8:	08005055 	.word	0x08005055
 80050ac:	080051fb 	.word	0x080051fb
 80050b0:	08005055 	.word	0x08005055
 80050b4:	08005103 	.word	0x08005103
 80050b8:	08005055 	.word	0x08005055
 80050bc:	08005055 	.word	0x08005055
 80050c0:	0800519b 	.word	0x0800519b
 80050c4:	6833      	ldr	r3, [r6, #0]
 80050c6:	1d1a      	adds	r2, r3, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6032      	str	r2, [r6, #0]
 80050cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050d4:	2301      	movs	r3, #1
 80050d6:	e09d      	b.n	8005214 <_printf_i+0x1e8>
 80050d8:	6833      	ldr	r3, [r6, #0]
 80050da:	6820      	ldr	r0, [r4, #0]
 80050dc:	1d19      	adds	r1, r3, #4
 80050de:	6031      	str	r1, [r6, #0]
 80050e0:	0606      	lsls	r6, r0, #24
 80050e2:	d501      	bpl.n	80050e8 <_printf_i+0xbc>
 80050e4:	681d      	ldr	r5, [r3, #0]
 80050e6:	e003      	b.n	80050f0 <_printf_i+0xc4>
 80050e8:	0645      	lsls	r5, r0, #25
 80050ea:	d5fb      	bpl.n	80050e4 <_printf_i+0xb8>
 80050ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050f0:	2d00      	cmp	r5, #0
 80050f2:	da03      	bge.n	80050fc <_printf_i+0xd0>
 80050f4:	232d      	movs	r3, #45	@ 0x2d
 80050f6:	426d      	negs	r5, r5
 80050f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050fc:	4859      	ldr	r0, [pc, #356]	@ (8005264 <_printf_i+0x238>)
 80050fe:	230a      	movs	r3, #10
 8005100:	e011      	b.n	8005126 <_printf_i+0xfa>
 8005102:	6821      	ldr	r1, [r4, #0]
 8005104:	6833      	ldr	r3, [r6, #0]
 8005106:	0608      	lsls	r0, r1, #24
 8005108:	f853 5b04 	ldr.w	r5, [r3], #4
 800510c:	d402      	bmi.n	8005114 <_printf_i+0xe8>
 800510e:	0649      	lsls	r1, r1, #25
 8005110:	bf48      	it	mi
 8005112:	b2ad      	uxthmi	r5, r5
 8005114:	2f6f      	cmp	r7, #111	@ 0x6f
 8005116:	4853      	ldr	r0, [pc, #332]	@ (8005264 <_printf_i+0x238>)
 8005118:	6033      	str	r3, [r6, #0]
 800511a:	bf14      	ite	ne
 800511c:	230a      	movne	r3, #10
 800511e:	2308      	moveq	r3, #8
 8005120:	2100      	movs	r1, #0
 8005122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005126:	6866      	ldr	r6, [r4, #4]
 8005128:	60a6      	str	r6, [r4, #8]
 800512a:	2e00      	cmp	r6, #0
 800512c:	bfa2      	ittt	ge
 800512e:	6821      	ldrge	r1, [r4, #0]
 8005130:	f021 0104 	bicge.w	r1, r1, #4
 8005134:	6021      	strge	r1, [r4, #0]
 8005136:	b90d      	cbnz	r5, 800513c <_printf_i+0x110>
 8005138:	2e00      	cmp	r6, #0
 800513a:	d04b      	beq.n	80051d4 <_printf_i+0x1a8>
 800513c:	4616      	mov	r6, r2
 800513e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005142:	fb03 5711 	mls	r7, r3, r1, r5
 8005146:	5dc7      	ldrb	r7, [r0, r7]
 8005148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800514c:	462f      	mov	r7, r5
 800514e:	42bb      	cmp	r3, r7
 8005150:	460d      	mov	r5, r1
 8005152:	d9f4      	bls.n	800513e <_printf_i+0x112>
 8005154:	2b08      	cmp	r3, #8
 8005156:	d10b      	bne.n	8005170 <_printf_i+0x144>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	07df      	lsls	r7, r3, #31
 800515c:	d508      	bpl.n	8005170 <_printf_i+0x144>
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	6861      	ldr	r1, [r4, #4]
 8005162:	4299      	cmp	r1, r3
 8005164:	bfde      	ittt	le
 8005166:	2330      	movle	r3, #48	@ 0x30
 8005168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800516c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005170:	1b92      	subs	r2, r2, r6
 8005172:	6122      	str	r2, [r4, #16]
 8005174:	f8cd a000 	str.w	sl, [sp]
 8005178:	464b      	mov	r3, r9
 800517a:	aa03      	add	r2, sp, #12
 800517c:	4621      	mov	r1, r4
 800517e:	4640      	mov	r0, r8
 8005180:	f7ff fee6 	bl	8004f50 <_printf_common>
 8005184:	3001      	adds	r0, #1
 8005186:	d14a      	bne.n	800521e <_printf_i+0x1f2>
 8005188:	f04f 30ff 	mov.w	r0, #4294967295
 800518c:	b004      	add	sp, #16
 800518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	f043 0320 	orr.w	r3, r3, #32
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	4833      	ldr	r0, [pc, #204]	@ (8005268 <_printf_i+0x23c>)
 800519c:	2778      	movs	r7, #120	@ 0x78
 800519e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	6831      	ldr	r1, [r6, #0]
 80051a6:	061f      	lsls	r7, r3, #24
 80051a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80051ac:	d402      	bmi.n	80051b4 <_printf_i+0x188>
 80051ae:	065f      	lsls	r7, r3, #25
 80051b0:	bf48      	it	mi
 80051b2:	b2ad      	uxthmi	r5, r5
 80051b4:	6031      	str	r1, [r6, #0]
 80051b6:	07d9      	lsls	r1, r3, #31
 80051b8:	bf44      	itt	mi
 80051ba:	f043 0320 	orrmi.w	r3, r3, #32
 80051be:	6023      	strmi	r3, [r4, #0]
 80051c0:	b11d      	cbz	r5, 80051ca <_printf_i+0x19e>
 80051c2:	2310      	movs	r3, #16
 80051c4:	e7ac      	b.n	8005120 <_printf_i+0xf4>
 80051c6:	4827      	ldr	r0, [pc, #156]	@ (8005264 <_printf_i+0x238>)
 80051c8:	e7e9      	b.n	800519e <_printf_i+0x172>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	f023 0320 	bic.w	r3, r3, #32
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	e7f6      	b.n	80051c2 <_printf_i+0x196>
 80051d4:	4616      	mov	r6, r2
 80051d6:	e7bd      	b.n	8005154 <_printf_i+0x128>
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	6825      	ldr	r5, [r4, #0]
 80051dc:	6961      	ldr	r1, [r4, #20]
 80051de:	1d18      	adds	r0, r3, #4
 80051e0:	6030      	str	r0, [r6, #0]
 80051e2:	062e      	lsls	r6, r5, #24
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	d501      	bpl.n	80051ec <_printf_i+0x1c0>
 80051e8:	6019      	str	r1, [r3, #0]
 80051ea:	e002      	b.n	80051f2 <_printf_i+0x1c6>
 80051ec:	0668      	lsls	r0, r5, #25
 80051ee:	d5fb      	bpl.n	80051e8 <_printf_i+0x1bc>
 80051f0:	8019      	strh	r1, [r3, #0]
 80051f2:	2300      	movs	r3, #0
 80051f4:	6123      	str	r3, [r4, #16]
 80051f6:	4616      	mov	r6, r2
 80051f8:	e7bc      	b.n	8005174 <_printf_i+0x148>
 80051fa:	6833      	ldr	r3, [r6, #0]
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	6032      	str	r2, [r6, #0]
 8005200:	681e      	ldr	r6, [r3, #0]
 8005202:	6862      	ldr	r2, [r4, #4]
 8005204:	2100      	movs	r1, #0
 8005206:	4630      	mov	r0, r6
 8005208:	f7fa ffe2 	bl	80001d0 <memchr>
 800520c:	b108      	cbz	r0, 8005212 <_printf_i+0x1e6>
 800520e:	1b80      	subs	r0, r0, r6
 8005210:	6060      	str	r0, [r4, #4]
 8005212:	6863      	ldr	r3, [r4, #4]
 8005214:	6123      	str	r3, [r4, #16]
 8005216:	2300      	movs	r3, #0
 8005218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800521c:	e7aa      	b.n	8005174 <_printf_i+0x148>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	4632      	mov	r2, r6
 8005222:	4649      	mov	r1, r9
 8005224:	4640      	mov	r0, r8
 8005226:	47d0      	blx	sl
 8005228:	3001      	adds	r0, #1
 800522a:	d0ad      	beq.n	8005188 <_printf_i+0x15c>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	079b      	lsls	r3, r3, #30
 8005230:	d413      	bmi.n	800525a <_printf_i+0x22e>
 8005232:	68e0      	ldr	r0, [r4, #12]
 8005234:	9b03      	ldr	r3, [sp, #12]
 8005236:	4298      	cmp	r0, r3
 8005238:	bfb8      	it	lt
 800523a:	4618      	movlt	r0, r3
 800523c:	e7a6      	b.n	800518c <_printf_i+0x160>
 800523e:	2301      	movs	r3, #1
 8005240:	4632      	mov	r2, r6
 8005242:	4649      	mov	r1, r9
 8005244:	4640      	mov	r0, r8
 8005246:	47d0      	blx	sl
 8005248:	3001      	adds	r0, #1
 800524a:	d09d      	beq.n	8005188 <_printf_i+0x15c>
 800524c:	3501      	adds	r5, #1
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	9903      	ldr	r1, [sp, #12]
 8005252:	1a5b      	subs	r3, r3, r1
 8005254:	42ab      	cmp	r3, r5
 8005256:	dcf2      	bgt.n	800523e <_printf_i+0x212>
 8005258:	e7eb      	b.n	8005232 <_printf_i+0x206>
 800525a:	2500      	movs	r5, #0
 800525c:	f104 0619 	add.w	r6, r4, #25
 8005260:	e7f5      	b.n	800524e <_printf_i+0x222>
 8005262:	bf00      	nop
 8005264:	08007302 	.word	0x08007302
 8005268:	08007313 	.word	0x08007313

0800526c <std>:
 800526c:	2300      	movs	r3, #0
 800526e:	b510      	push	{r4, lr}
 8005270:	4604      	mov	r4, r0
 8005272:	e9c0 3300 	strd	r3, r3, [r0]
 8005276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800527a:	6083      	str	r3, [r0, #8]
 800527c:	8181      	strh	r1, [r0, #12]
 800527e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005280:	81c2      	strh	r2, [r0, #14]
 8005282:	6183      	str	r3, [r0, #24]
 8005284:	4619      	mov	r1, r3
 8005286:	2208      	movs	r2, #8
 8005288:	305c      	adds	r0, #92	@ 0x5c
 800528a:	f000 f8f4 	bl	8005476 <memset>
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <std+0x58>)
 8005290:	6263      	str	r3, [r4, #36]	@ 0x24
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <std+0x5c>)
 8005294:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005296:	4b0d      	ldr	r3, [pc, #52]	@ (80052cc <std+0x60>)
 8005298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800529a:	4b0d      	ldr	r3, [pc, #52]	@ (80052d0 <std+0x64>)
 800529c:	6323      	str	r3, [r4, #48]	@ 0x30
 800529e:	4b0d      	ldr	r3, [pc, #52]	@ (80052d4 <std+0x68>)
 80052a0:	6224      	str	r4, [r4, #32]
 80052a2:	429c      	cmp	r4, r3
 80052a4:	d006      	beq.n	80052b4 <std+0x48>
 80052a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052aa:	4294      	cmp	r4, r2
 80052ac:	d002      	beq.n	80052b4 <std+0x48>
 80052ae:	33d0      	adds	r3, #208	@ 0xd0
 80052b0:	429c      	cmp	r4, r3
 80052b2:	d105      	bne.n	80052c0 <std+0x54>
 80052b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052bc:	f000 b958 	b.w	8005570 <__retarget_lock_init_recursive>
 80052c0:	bd10      	pop	{r4, pc}
 80052c2:	bf00      	nop
 80052c4:	080053f1 	.word	0x080053f1
 80052c8:	08005413 	.word	0x08005413
 80052cc:	0800544b 	.word	0x0800544b
 80052d0:	0800546f 	.word	0x0800546f
 80052d4:	200004c0 	.word	0x200004c0

080052d8 <stdio_exit_handler>:
 80052d8:	4a02      	ldr	r2, [pc, #8]	@ (80052e4 <stdio_exit_handler+0xc>)
 80052da:	4903      	ldr	r1, [pc, #12]	@ (80052e8 <stdio_exit_handler+0x10>)
 80052dc:	4803      	ldr	r0, [pc, #12]	@ (80052ec <stdio_exit_handler+0x14>)
 80052de:	f000 b869 	b.w	80053b4 <_fwalk_sglue>
 80052e2:	bf00      	nop
 80052e4:	20000010 	.word	0x20000010
 80052e8:	08006c1d 	.word	0x08006c1d
 80052ec:	20000020 	.word	0x20000020

080052f0 <cleanup_stdio>:
 80052f0:	6841      	ldr	r1, [r0, #4]
 80052f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <cleanup_stdio+0x34>)
 80052f4:	4299      	cmp	r1, r3
 80052f6:	b510      	push	{r4, lr}
 80052f8:	4604      	mov	r4, r0
 80052fa:	d001      	beq.n	8005300 <cleanup_stdio+0x10>
 80052fc:	f001 fc8e 	bl	8006c1c <_fflush_r>
 8005300:	68a1      	ldr	r1, [r4, #8]
 8005302:	4b09      	ldr	r3, [pc, #36]	@ (8005328 <cleanup_stdio+0x38>)
 8005304:	4299      	cmp	r1, r3
 8005306:	d002      	beq.n	800530e <cleanup_stdio+0x1e>
 8005308:	4620      	mov	r0, r4
 800530a:	f001 fc87 	bl	8006c1c <_fflush_r>
 800530e:	68e1      	ldr	r1, [r4, #12]
 8005310:	4b06      	ldr	r3, [pc, #24]	@ (800532c <cleanup_stdio+0x3c>)
 8005312:	4299      	cmp	r1, r3
 8005314:	d004      	beq.n	8005320 <cleanup_stdio+0x30>
 8005316:	4620      	mov	r0, r4
 8005318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531c:	f001 bc7e 	b.w	8006c1c <_fflush_r>
 8005320:	bd10      	pop	{r4, pc}
 8005322:	bf00      	nop
 8005324:	200004c0 	.word	0x200004c0
 8005328:	20000528 	.word	0x20000528
 800532c:	20000590 	.word	0x20000590

08005330 <global_stdio_init.part.0>:
 8005330:	b510      	push	{r4, lr}
 8005332:	4b0b      	ldr	r3, [pc, #44]	@ (8005360 <global_stdio_init.part.0+0x30>)
 8005334:	4c0b      	ldr	r4, [pc, #44]	@ (8005364 <global_stdio_init.part.0+0x34>)
 8005336:	4a0c      	ldr	r2, [pc, #48]	@ (8005368 <global_stdio_init.part.0+0x38>)
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	4620      	mov	r0, r4
 800533c:	2200      	movs	r2, #0
 800533e:	2104      	movs	r1, #4
 8005340:	f7ff ff94 	bl	800526c <std>
 8005344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005348:	2201      	movs	r2, #1
 800534a:	2109      	movs	r1, #9
 800534c:	f7ff ff8e 	bl	800526c <std>
 8005350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005354:	2202      	movs	r2, #2
 8005356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800535a:	2112      	movs	r1, #18
 800535c:	f7ff bf86 	b.w	800526c <std>
 8005360:	200005f8 	.word	0x200005f8
 8005364:	200004c0 	.word	0x200004c0
 8005368:	080052d9 	.word	0x080052d9

0800536c <__sfp_lock_acquire>:
 800536c:	4801      	ldr	r0, [pc, #4]	@ (8005374 <__sfp_lock_acquire+0x8>)
 800536e:	f000 b900 	b.w	8005572 <__retarget_lock_acquire_recursive>
 8005372:	bf00      	nop
 8005374:	20000601 	.word	0x20000601

08005378 <__sfp_lock_release>:
 8005378:	4801      	ldr	r0, [pc, #4]	@ (8005380 <__sfp_lock_release+0x8>)
 800537a:	f000 b8fb 	b.w	8005574 <__retarget_lock_release_recursive>
 800537e:	bf00      	nop
 8005380:	20000601 	.word	0x20000601

08005384 <__sinit>:
 8005384:	b510      	push	{r4, lr}
 8005386:	4604      	mov	r4, r0
 8005388:	f7ff fff0 	bl	800536c <__sfp_lock_acquire>
 800538c:	6a23      	ldr	r3, [r4, #32]
 800538e:	b11b      	cbz	r3, 8005398 <__sinit+0x14>
 8005390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005394:	f7ff bff0 	b.w	8005378 <__sfp_lock_release>
 8005398:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <__sinit+0x28>)
 800539a:	6223      	str	r3, [r4, #32]
 800539c:	4b04      	ldr	r3, [pc, #16]	@ (80053b0 <__sinit+0x2c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1f5      	bne.n	8005390 <__sinit+0xc>
 80053a4:	f7ff ffc4 	bl	8005330 <global_stdio_init.part.0>
 80053a8:	e7f2      	b.n	8005390 <__sinit+0xc>
 80053aa:	bf00      	nop
 80053ac:	080052f1 	.word	0x080052f1
 80053b0:	200005f8 	.word	0x200005f8

080053b4 <_fwalk_sglue>:
 80053b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b8:	4607      	mov	r7, r0
 80053ba:	4688      	mov	r8, r1
 80053bc:	4614      	mov	r4, r2
 80053be:	2600      	movs	r6, #0
 80053c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053c4:	f1b9 0901 	subs.w	r9, r9, #1
 80053c8:	d505      	bpl.n	80053d6 <_fwalk_sglue+0x22>
 80053ca:	6824      	ldr	r4, [r4, #0]
 80053cc:	2c00      	cmp	r4, #0
 80053ce:	d1f7      	bne.n	80053c0 <_fwalk_sglue+0xc>
 80053d0:	4630      	mov	r0, r6
 80053d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d907      	bls.n	80053ec <_fwalk_sglue+0x38>
 80053dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053e0:	3301      	adds	r3, #1
 80053e2:	d003      	beq.n	80053ec <_fwalk_sglue+0x38>
 80053e4:	4629      	mov	r1, r5
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c0      	blx	r8
 80053ea:	4306      	orrs	r6, r0
 80053ec:	3568      	adds	r5, #104	@ 0x68
 80053ee:	e7e9      	b.n	80053c4 <_fwalk_sglue+0x10>

080053f0 <__sread>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	460c      	mov	r4, r1
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	f000 f86c 	bl	80054d4 <_read_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	bfab      	itete	ge
 8005400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005402:	89a3      	ldrhlt	r3, [r4, #12]
 8005404:	181b      	addge	r3, r3, r0
 8005406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800540a:	bfac      	ite	ge
 800540c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800540e:	81a3      	strhlt	r3, [r4, #12]
 8005410:	bd10      	pop	{r4, pc}

08005412 <__swrite>:
 8005412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	461f      	mov	r7, r3
 8005418:	898b      	ldrh	r3, [r1, #12]
 800541a:	05db      	lsls	r3, r3, #23
 800541c:	4605      	mov	r5, r0
 800541e:	460c      	mov	r4, r1
 8005420:	4616      	mov	r6, r2
 8005422:	d505      	bpl.n	8005430 <__swrite+0x1e>
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	2302      	movs	r3, #2
 800542a:	2200      	movs	r2, #0
 800542c:	f000 f840 	bl	80054b0 <_lseek_r>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	4632      	mov	r2, r6
 800543e:	463b      	mov	r3, r7
 8005440:	4628      	mov	r0, r5
 8005442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	f000 b857 	b.w	80054f8 <_write_r>

0800544a <__sseek>:
 800544a:	b510      	push	{r4, lr}
 800544c:	460c      	mov	r4, r1
 800544e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005452:	f000 f82d 	bl	80054b0 <_lseek_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	bf15      	itete	ne
 800545c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800545e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005462:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005466:	81a3      	strheq	r3, [r4, #12]
 8005468:	bf18      	it	ne
 800546a:	81a3      	strhne	r3, [r4, #12]
 800546c:	bd10      	pop	{r4, pc}

0800546e <__sclose>:
 800546e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005472:	f000 b80d 	b.w	8005490 <_close_r>

08005476 <memset>:
 8005476:	4402      	add	r2, r0
 8005478:	4603      	mov	r3, r0
 800547a:	4293      	cmp	r3, r2
 800547c:	d100      	bne.n	8005480 <memset+0xa>
 800547e:	4770      	bx	lr
 8005480:	f803 1b01 	strb.w	r1, [r3], #1
 8005484:	e7f9      	b.n	800547a <memset+0x4>
	...

08005488 <_localeconv_r>:
 8005488:	4800      	ldr	r0, [pc, #0]	@ (800548c <_localeconv_r+0x4>)
 800548a:	4770      	bx	lr
 800548c:	2000015c 	.word	0x2000015c

08005490 <_close_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	@ (80054ac <_close_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fc fd84 	bl	8001fa8 <_close>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_close_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_close_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	200005fc 	.word	0x200005fc

080054b0 <_lseek_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	@ (80054d0 <_lseek_r+0x20>)
 80054b4:	4604      	mov	r4, r0
 80054b6:	4608      	mov	r0, r1
 80054b8:	4611      	mov	r1, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fc fd99 	bl	8001ff6 <_lseek>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_lseek_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_lseek_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	200005fc 	.word	0x200005fc

080054d4 <_read_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	@ (80054f4 <_read_r+0x20>)
 80054d8:	4604      	mov	r4, r0
 80054da:	4608      	mov	r0, r1
 80054dc:	4611      	mov	r1, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fc fd27 	bl	8001f36 <_read>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_read_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_read_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	200005fc 	.word	0x200005fc

080054f8 <_write_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	@ (8005518 <_write_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc fd32 	bl	8001f70 <_write>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_write_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_write_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	200005fc 	.word	0x200005fc

0800551c <__errno>:
 800551c:	4b01      	ldr	r3, [pc, #4]	@ (8005524 <__errno+0x8>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	2000001c 	.word	0x2000001c

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	@ (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	@ (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	@ (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	@ (800556c <__libc_init_array+0x44>)
 800553c:	f001 febc 	bl	80072b8 <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	08007668 	.word	0x08007668
 8005564:	08007668 	.word	0x08007668
 8005568:	08007668 	.word	0x08007668
 800556c:	0800766c 	.word	0x0800766c

08005570 <__retarget_lock_init_recursive>:
 8005570:	4770      	bx	lr

08005572 <__retarget_lock_acquire_recursive>:
 8005572:	4770      	bx	lr

08005574 <__retarget_lock_release_recursive>:
 8005574:	4770      	bx	lr

08005576 <quorem>:
 8005576:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	6903      	ldr	r3, [r0, #16]
 800557c:	690c      	ldr	r4, [r1, #16]
 800557e:	42a3      	cmp	r3, r4
 8005580:	4607      	mov	r7, r0
 8005582:	db7e      	blt.n	8005682 <quorem+0x10c>
 8005584:	3c01      	subs	r4, #1
 8005586:	f101 0814 	add.w	r8, r1, #20
 800558a:	00a3      	lsls	r3, r4, #2
 800558c:	f100 0514 	add.w	r5, r0, #20
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800559c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055a0:	3301      	adds	r3, #1
 80055a2:	429a      	cmp	r2, r3
 80055a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80055ac:	d32e      	bcc.n	800560c <quorem+0x96>
 80055ae:	f04f 0a00 	mov.w	sl, #0
 80055b2:	46c4      	mov	ip, r8
 80055b4:	46ae      	mov	lr, r5
 80055b6:	46d3      	mov	fp, sl
 80055b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055bc:	b298      	uxth	r0, r3
 80055be:	fb06 a000 	mla	r0, r6, r0, sl
 80055c2:	0c02      	lsrs	r2, r0, #16
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	fb06 2303 	mla	r3, r6, r3, r2
 80055ca:	f8de 2000 	ldr.w	r2, [lr]
 80055ce:	b280      	uxth	r0, r0
 80055d0:	b292      	uxth	r2, r2
 80055d2:	1a12      	subs	r2, r2, r0
 80055d4:	445a      	add	r2, fp
 80055d6:	f8de 0000 	ldr.w	r0, [lr]
 80055da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055de:	b29b      	uxth	r3, r3
 80055e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055e8:	b292      	uxth	r2, r2
 80055ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055ee:	45e1      	cmp	r9, ip
 80055f0:	f84e 2b04 	str.w	r2, [lr], #4
 80055f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055f8:	d2de      	bcs.n	80055b8 <quorem+0x42>
 80055fa:	9b00      	ldr	r3, [sp, #0]
 80055fc:	58eb      	ldr	r3, [r5, r3]
 80055fe:	b92b      	cbnz	r3, 800560c <quorem+0x96>
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	3b04      	subs	r3, #4
 8005604:	429d      	cmp	r5, r3
 8005606:	461a      	mov	r2, r3
 8005608:	d32f      	bcc.n	800566a <quorem+0xf4>
 800560a:	613c      	str	r4, [r7, #16]
 800560c:	4638      	mov	r0, r7
 800560e:	f001 f979 	bl	8006904 <__mcmp>
 8005612:	2800      	cmp	r0, #0
 8005614:	db25      	blt.n	8005662 <quorem+0xec>
 8005616:	4629      	mov	r1, r5
 8005618:	2000      	movs	r0, #0
 800561a:	f858 2b04 	ldr.w	r2, [r8], #4
 800561e:	f8d1 c000 	ldr.w	ip, [r1]
 8005622:	fa1f fe82 	uxth.w	lr, r2
 8005626:	fa1f f38c 	uxth.w	r3, ip
 800562a:	eba3 030e 	sub.w	r3, r3, lr
 800562e:	4403      	add	r3, r0
 8005630:	0c12      	lsrs	r2, r2, #16
 8005632:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005636:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800563a:	b29b      	uxth	r3, r3
 800563c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005640:	45c1      	cmp	r9, r8
 8005642:	f841 3b04 	str.w	r3, [r1], #4
 8005646:	ea4f 4022 	mov.w	r0, r2, asr #16
 800564a:	d2e6      	bcs.n	800561a <quorem+0xa4>
 800564c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005654:	b922      	cbnz	r2, 8005660 <quorem+0xea>
 8005656:	3b04      	subs	r3, #4
 8005658:	429d      	cmp	r5, r3
 800565a:	461a      	mov	r2, r3
 800565c:	d30b      	bcc.n	8005676 <quorem+0x100>
 800565e:	613c      	str	r4, [r7, #16]
 8005660:	3601      	adds	r6, #1
 8005662:	4630      	mov	r0, r6
 8005664:	b003      	add	sp, #12
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	3b04      	subs	r3, #4
 800566e:	2a00      	cmp	r2, #0
 8005670:	d1cb      	bne.n	800560a <quorem+0x94>
 8005672:	3c01      	subs	r4, #1
 8005674:	e7c6      	b.n	8005604 <quorem+0x8e>
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	3b04      	subs	r3, #4
 800567a:	2a00      	cmp	r2, #0
 800567c:	d1ef      	bne.n	800565e <quorem+0xe8>
 800567e:	3c01      	subs	r4, #1
 8005680:	e7ea      	b.n	8005658 <quorem+0xe2>
 8005682:	2000      	movs	r0, #0
 8005684:	e7ee      	b.n	8005664 <quorem+0xee>
	...

08005688 <_dtoa_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	69c7      	ldr	r7, [r0, #28]
 800568e:	b099      	sub	sp, #100	@ 0x64
 8005690:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005694:	ec55 4b10 	vmov	r4, r5, d0
 8005698:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800569a:	9109      	str	r1, [sp, #36]	@ 0x24
 800569c:	4683      	mov	fp, r0
 800569e:	920e      	str	r2, [sp, #56]	@ 0x38
 80056a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056a2:	b97f      	cbnz	r7, 80056c4 <_dtoa_r+0x3c>
 80056a4:	2010      	movs	r0, #16
 80056a6:	f000 fdfd 	bl	80062a4 <malloc>
 80056aa:	4602      	mov	r2, r0
 80056ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80056b0:	b920      	cbnz	r0, 80056bc <_dtoa_r+0x34>
 80056b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005950 <_dtoa_r+0x2c8>)
 80056b4:	21ef      	movs	r1, #239	@ 0xef
 80056b6:	48a7      	ldr	r0, [pc, #668]	@ (8005954 <_dtoa_r+0x2cc>)
 80056b8:	f001 faf6 	bl	8006ca8 <__assert_func>
 80056bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056c0:	6007      	str	r7, [r0, #0]
 80056c2:	60c7      	str	r7, [r0, #12]
 80056c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	b159      	cbz	r1, 80056e4 <_dtoa_r+0x5c>
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	604a      	str	r2, [r1, #4]
 80056d0:	2301      	movs	r3, #1
 80056d2:	4093      	lsls	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
 80056d6:	4658      	mov	r0, fp
 80056d8:	f000 feda 	bl	8006490 <_Bfree>
 80056dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	1e2b      	subs	r3, r5, #0
 80056e6:	bfb9      	ittee	lt
 80056e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056ec:	9303      	strlt	r3, [sp, #12]
 80056ee:	2300      	movge	r3, #0
 80056f0:	6033      	strge	r3, [r6, #0]
 80056f2:	9f03      	ldr	r7, [sp, #12]
 80056f4:	4b98      	ldr	r3, [pc, #608]	@ (8005958 <_dtoa_r+0x2d0>)
 80056f6:	bfbc      	itt	lt
 80056f8:	2201      	movlt	r2, #1
 80056fa:	6032      	strlt	r2, [r6, #0]
 80056fc:	43bb      	bics	r3, r7
 80056fe:	d112      	bne.n	8005726 <_dtoa_r+0x9e>
 8005700:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005702:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800570c:	4323      	orrs	r3, r4
 800570e:	f000 854d 	beq.w	80061ac <_dtoa_r+0xb24>
 8005712:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005714:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800596c <_dtoa_r+0x2e4>
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 854f 	beq.w	80061bc <_dtoa_r+0xb34>
 800571e:	f10a 0303 	add.w	r3, sl, #3
 8005722:	f000 bd49 	b.w	80061b8 <_dtoa_r+0xb30>
 8005726:	ed9d 7b02 	vldr	d7, [sp, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	ec51 0b17 	vmov	r0, r1, d7
 8005730:	2300      	movs	r3, #0
 8005732:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005736:	f7fb f9c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800573a:	4680      	mov	r8, r0
 800573c:	b158      	cbz	r0, 8005756 <_dtoa_r+0xce>
 800573e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005740:	2301      	movs	r3, #1
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005746:	b113      	cbz	r3, 800574e <_dtoa_r+0xc6>
 8005748:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800574a:	4b84      	ldr	r3, [pc, #528]	@ (800595c <_dtoa_r+0x2d4>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005970 <_dtoa_r+0x2e8>
 8005752:	f000 bd33 	b.w	80061bc <_dtoa_r+0xb34>
 8005756:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800575a:	aa16      	add	r2, sp, #88	@ 0x58
 800575c:	a917      	add	r1, sp, #92	@ 0x5c
 800575e:	4658      	mov	r0, fp
 8005760:	f001 f980 	bl	8006a64 <__d2b>
 8005764:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005768:	4681      	mov	r9, r0
 800576a:	2e00      	cmp	r6, #0
 800576c:	d077      	beq.n	800585e <_dtoa_r+0x1d6>
 800576e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005770:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800577c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005780:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005784:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005788:	4619      	mov	r1, r3
 800578a:	2200      	movs	r2, #0
 800578c:	4b74      	ldr	r3, [pc, #464]	@ (8005960 <_dtoa_r+0x2d8>)
 800578e:	f7fa fd7b 	bl	8000288 <__aeabi_dsub>
 8005792:	a369      	add	r3, pc, #420	@ (adr r3, 8005938 <_dtoa_r+0x2b0>)
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f7fa ff2e 	bl	80005f8 <__aeabi_dmul>
 800579c:	a368      	add	r3, pc, #416	@ (adr r3, 8005940 <_dtoa_r+0x2b8>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f7fa fd73 	bl	800028c <__adddf3>
 80057a6:	4604      	mov	r4, r0
 80057a8:	4630      	mov	r0, r6
 80057aa:	460d      	mov	r5, r1
 80057ac:	f7fa feba 	bl	8000524 <__aeabi_i2d>
 80057b0:	a365      	add	r3, pc, #404	@ (adr r3, 8005948 <_dtoa_r+0x2c0>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa ff1f 	bl	80005f8 <__aeabi_dmul>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fa fd63 	bl	800028c <__adddf3>
 80057c6:	4604      	mov	r4, r0
 80057c8:	460d      	mov	r5, r1
 80057ca:	f7fb f9c5 	bl	8000b58 <__aeabi_d2iz>
 80057ce:	2200      	movs	r2, #0
 80057d0:	4607      	mov	r7, r0
 80057d2:	2300      	movs	r3, #0
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fb f980 	bl	8000adc <__aeabi_dcmplt>
 80057dc:	b140      	cbz	r0, 80057f0 <_dtoa_r+0x168>
 80057de:	4638      	mov	r0, r7
 80057e0:	f7fa fea0 	bl	8000524 <__aeabi_i2d>
 80057e4:	4622      	mov	r2, r4
 80057e6:	462b      	mov	r3, r5
 80057e8:	f7fb f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80057ec:	b900      	cbnz	r0, 80057f0 <_dtoa_r+0x168>
 80057ee:	3f01      	subs	r7, #1
 80057f0:	2f16      	cmp	r7, #22
 80057f2:	d851      	bhi.n	8005898 <_dtoa_r+0x210>
 80057f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005964 <_dtoa_r+0x2dc>)
 80057f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005802:	f7fb f96b 	bl	8000adc <__aeabi_dcmplt>
 8005806:	2800      	cmp	r0, #0
 8005808:	d048      	beq.n	800589c <_dtoa_r+0x214>
 800580a:	3f01      	subs	r7, #1
 800580c:	2300      	movs	r3, #0
 800580e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005810:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005812:	1b9b      	subs	r3, r3, r6
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	bf44      	itt	mi
 8005818:	f1c3 0801 	rsbmi	r8, r3, #1
 800581c:	2300      	movmi	r3, #0
 800581e:	9208      	str	r2, [sp, #32]
 8005820:	bf54      	ite	pl
 8005822:	f04f 0800 	movpl.w	r8, #0
 8005826:	9308      	strmi	r3, [sp, #32]
 8005828:	2f00      	cmp	r7, #0
 800582a:	db39      	blt.n	80058a0 <_dtoa_r+0x218>
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005830:	443b      	add	r3, r7
 8005832:	9308      	str	r3, [sp, #32]
 8005834:	2300      	movs	r3, #0
 8005836:	930a      	str	r3, [sp, #40]	@ 0x28
 8005838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583a:	2b09      	cmp	r3, #9
 800583c:	d864      	bhi.n	8005908 <_dtoa_r+0x280>
 800583e:	2b05      	cmp	r3, #5
 8005840:	bfc4      	itt	gt
 8005842:	3b04      	subgt	r3, #4
 8005844:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005848:	f1a3 0302 	sub.w	r3, r3, #2
 800584c:	bfcc      	ite	gt
 800584e:	2400      	movgt	r4, #0
 8005850:	2401      	movle	r4, #1
 8005852:	2b03      	cmp	r3, #3
 8005854:	d863      	bhi.n	800591e <_dtoa_r+0x296>
 8005856:	e8df f003 	tbb	[pc, r3]
 800585a:	372a      	.short	0x372a
 800585c:	5535      	.short	0x5535
 800585e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005862:	441e      	add	r6, r3
 8005864:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005868:	2b20      	cmp	r3, #32
 800586a:	bfc1      	itttt	gt
 800586c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005870:	409f      	lslgt	r7, r3
 8005872:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005876:	fa24 f303 	lsrgt.w	r3, r4, r3
 800587a:	bfd6      	itet	le
 800587c:	f1c3 0320 	rsble	r3, r3, #32
 8005880:	ea47 0003 	orrgt.w	r0, r7, r3
 8005884:	fa04 f003 	lslle.w	r0, r4, r3
 8005888:	f7fa fe3c 	bl	8000504 <__aeabi_ui2d>
 800588c:	2201      	movs	r2, #1
 800588e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005892:	3e01      	subs	r6, #1
 8005894:	9214      	str	r2, [sp, #80]	@ 0x50
 8005896:	e777      	b.n	8005788 <_dtoa_r+0x100>
 8005898:	2301      	movs	r3, #1
 800589a:	e7b8      	b.n	800580e <_dtoa_r+0x186>
 800589c:	9012      	str	r0, [sp, #72]	@ 0x48
 800589e:	e7b7      	b.n	8005810 <_dtoa_r+0x188>
 80058a0:	427b      	negs	r3, r7
 80058a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80058a4:	2300      	movs	r3, #0
 80058a6:	eba8 0807 	sub.w	r8, r8, r7
 80058aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058ac:	e7c4      	b.n	8005838 <_dtoa_r+0x1b0>
 80058ae:	2300      	movs	r3, #0
 80058b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dc35      	bgt.n	8005924 <_dtoa_r+0x29c>
 80058b8:	2301      	movs	r3, #1
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	9307      	str	r3, [sp, #28]
 80058be:	461a      	mov	r2, r3
 80058c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80058c2:	e00b      	b.n	80058dc <_dtoa_r+0x254>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e7f3      	b.n	80058b0 <_dtoa_r+0x228>
 80058c8:	2300      	movs	r3, #0
 80058ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	3301      	adds	r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	bfb8      	it	lt
 80058da:	2301      	movlt	r3, #1
 80058dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058e0:	2100      	movs	r1, #0
 80058e2:	2204      	movs	r2, #4
 80058e4:	f102 0514 	add.w	r5, r2, #20
 80058e8:	429d      	cmp	r5, r3
 80058ea:	d91f      	bls.n	800592c <_dtoa_r+0x2a4>
 80058ec:	6041      	str	r1, [r0, #4]
 80058ee:	4658      	mov	r0, fp
 80058f0:	f000 fd8e 	bl	8006410 <_Balloc>
 80058f4:	4682      	mov	sl, r0
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d13c      	bne.n	8005974 <_dtoa_r+0x2ec>
 80058fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005968 <_dtoa_r+0x2e0>)
 80058fc:	4602      	mov	r2, r0
 80058fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8005902:	e6d8      	b.n	80056b6 <_dtoa_r+0x2e>
 8005904:	2301      	movs	r3, #1
 8005906:	e7e0      	b.n	80058ca <_dtoa_r+0x242>
 8005908:	2401      	movs	r4, #1
 800590a:	2300      	movs	r3, #0
 800590c:	9309      	str	r3, [sp, #36]	@ 0x24
 800590e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005910:	f04f 33ff 	mov.w	r3, #4294967295
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	9307      	str	r3, [sp, #28]
 8005918:	2200      	movs	r2, #0
 800591a:	2312      	movs	r3, #18
 800591c:	e7d0      	b.n	80058c0 <_dtoa_r+0x238>
 800591e:	2301      	movs	r3, #1
 8005920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005922:	e7f5      	b.n	8005910 <_dtoa_r+0x288>
 8005924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	9307      	str	r3, [sp, #28]
 800592a:	e7d7      	b.n	80058dc <_dtoa_r+0x254>
 800592c:	3101      	adds	r1, #1
 800592e:	0052      	lsls	r2, r2, #1
 8005930:	e7d8      	b.n	80058e4 <_dtoa_r+0x25c>
 8005932:	bf00      	nop
 8005934:	f3af 8000 	nop.w
 8005938:	636f4361 	.word	0x636f4361
 800593c:	3fd287a7 	.word	0x3fd287a7
 8005940:	8b60c8b3 	.word	0x8b60c8b3
 8005944:	3fc68a28 	.word	0x3fc68a28
 8005948:	509f79fb 	.word	0x509f79fb
 800594c:	3fd34413 	.word	0x3fd34413
 8005950:	08007331 	.word	0x08007331
 8005954:	08007348 	.word	0x08007348
 8005958:	7ff00000 	.word	0x7ff00000
 800595c:	08007301 	.word	0x08007301
 8005960:	3ff80000 	.word	0x3ff80000
 8005964:	08007440 	.word	0x08007440
 8005968:	080073a0 	.word	0x080073a0
 800596c:	0800732d 	.word	0x0800732d
 8005970:	08007300 	.word	0x08007300
 8005974:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005978:	6018      	str	r0, [r3, #0]
 800597a:	9b07      	ldr	r3, [sp, #28]
 800597c:	2b0e      	cmp	r3, #14
 800597e:	f200 80a4 	bhi.w	8005aca <_dtoa_r+0x442>
 8005982:	2c00      	cmp	r4, #0
 8005984:	f000 80a1 	beq.w	8005aca <_dtoa_r+0x442>
 8005988:	2f00      	cmp	r7, #0
 800598a:	dd33      	ble.n	80059f4 <_dtoa_r+0x36c>
 800598c:	4bad      	ldr	r3, [pc, #692]	@ (8005c44 <_dtoa_r+0x5bc>)
 800598e:	f007 020f 	and.w	r2, r7, #15
 8005992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005996:	ed93 7b00 	vldr	d7, [r3]
 800599a:	05f8      	lsls	r0, r7, #23
 800599c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059a4:	d516      	bpl.n	80059d4 <_dtoa_r+0x34c>
 80059a6:	4ba8      	ldr	r3, [pc, #672]	@ (8005c48 <_dtoa_r+0x5c0>)
 80059a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059b0:	f7fa ff4c 	bl	800084c <__aeabi_ddiv>
 80059b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b8:	f004 040f 	and.w	r4, r4, #15
 80059bc:	2603      	movs	r6, #3
 80059be:	4da2      	ldr	r5, [pc, #648]	@ (8005c48 <_dtoa_r+0x5c0>)
 80059c0:	b954      	cbnz	r4, 80059d8 <_dtoa_r+0x350>
 80059c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ca:	f7fa ff3f 	bl	800084c <__aeabi_ddiv>
 80059ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d2:	e028      	b.n	8005a26 <_dtoa_r+0x39e>
 80059d4:	2602      	movs	r6, #2
 80059d6:	e7f2      	b.n	80059be <_dtoa_r+0x336>
 80059d8:	07e1      	lsls	r1, r4, #31
 80059da:	d508      	bpl.n	80059ee <_dtoa_r+0x366>
 80059dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059e4:	f7fa fe08 	bl	80005f8 <__aeabi_dmul>
 80059e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ec:	3601      	adds	r6, #1
 80059ee:	1064      	asrs	r4, r4, #1
 80059f0:	3508      	adds	r5, #8
 80059f2:	e7e5      	b.n	80059c0 <_dtoa_r+0x338>
 80059f4:	f000 80d2 	beq.w	8005b9c <_dtoa_r+0x514>
 80059f8:	427c      	negs	r4, r7
 80059fa:	4b92      	ldr	r3, [pc, #584]	@ (8005c44 <_dtoa_r+0x5bc>)
 80059fc:	4d92      	ldr	r5, [pc, #584]	@ (8005c48 <_dtoa_r+0x5c0>)
 80059fe:	f004 020f 	and.w	r2, r4, #15
 8005a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a0e:	f7fa fdf3 	bl	80005f8 <__aeabi_dmul>
 8005a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a16:	1124      	asrs	r4, r4, #4
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2602      	movs	r6, #2
 8005a1c:	2c00      	cmp	r4, #0
 8005a1e:	f040 80b2 	bne.w	8005b86 <_dtoa_r+0x4fe>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1d3      	bne.n	80059ce <_dtoa_r+0x346>
 8005a26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80b7 	beq.w	8005ba0 <_dtoa_r+0x518>
 8005a32:	4b86      	ldr	r3, [pc, #536]	@ (8005c4c <_dtoa_r+0x5c4>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	4620      	mov	r0, r4
 8005a38:	4629      	mov	r1, r5
 8005a3a:	f7fb f84f 	bl	8000adc <__aeabi_dcmplt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f000 80ae 	beq.w	8005ba0 <_dtoa_r+0x518>
 8005a44:	9b07      	ldr	r3, [sp, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80aa 	beq.w	8005ba0 <_dtoa_r+0x518>
 8005a4c:	9b00      	ldr	r3, [sp, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dd37      	ble.n	8005ac2 <_dtoa_r+0x43a>
 8005a52:	1e7b      	subs	r3, r7, #1
 8005a54:	9304      	str	r3, [sp, #16]
 8005a56:	4620      	mov	r0, r4
 8005a58:	4b7d      	ldr	r3, [pc, #500]	@ (8005c50 <_dtoa_r+0x5c8>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	f7fa fdcb 	bl	80005f8 <__aeabi_dmul>
 8005a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a66:	9c00      	ldr	r4, [sp, #0]
 8005a68:	3601      	adds	r6, #1
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7fa fd5a 	bl	8000524 <__aeabi_i2d>
 8005a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a74:	f7fa fdc0 	bl	80005f8 <__aeabi_dmul>
 8005a78:	4b76      	ldr	r3, [pc, #472]	@ (8005c54 <_dtoa_r+0x5cc>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fa fc06 	bl	800028c <__adddf3>
 8005a80:	4605      	mov	r5, r0
 8005a82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	f040 808d 	bne.w	8005ba6 <_dtoa_r+0x51e>
 8005a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a90:	4b71      	ldr	r3, [pc, #452]	@ (8005c58 <_dtoa_r+0x5d0>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	f7fa fbf8 	bl	8000288 <__aeabi_dsub>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	f7fb f838 	bl	8000b18 <__aeabi_dcmpgt>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f040 828b 	bne.w	8005fc4 <_dtoa_r+0x93c>
 8005aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ab8:	f7fb f810 	bl	8000adc <__aeabi_dcmplt>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f040 8128 	bne.w	8005d12 <_dtoa_r+0x68a>
 8005ac2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ac6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005aca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f2c0 815a 	blt.w	8005d86 <_dtoa_r+0x6fe>
 8005ad2:	2f0e      	cmp	r7, #14
 8005ad4:	f300 8157 	bgt.w	8005d86 <_dtoa_r+0x6fe>
 8005ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c44 <_dtoa_r+0x5bc>)
 8005ada:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ade:	ed93 7b00 	vldr	d7, [r3]
 8005ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	ed8d 7b00 	vstr	d7, [sp]
 8005aea:	da03      	bge.n	8005af4 <_dtoa_r+0x46c>
 8005aec:	9b07      	ldr	r3, [sp, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f340 8101 	ble.w	8005cf6 <_dtoa_r+0x66e>
 8005af4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005af8:	4656      	mov	r6, sl
 8005afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7fa fea3 	bl	800084c <__aeabi_ddiv>
 8005b06:	f7fb f827 	bl	8000b58 <__aeabi_d2iz>
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	f7fa fd0a 	bl	8000524 <__aeabi_i2d>
 8005b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b24:	f7fa fbb0 	bl	8000288 <__aeabi_dsub>
 8005b28:	f806 4b01 	strb.w	r4, [r6], #1
 8005b2c:	9d07      	ldr	r5, [sp, #28]
 8005b2e:	eba6 040a 	sub.w	r4, r6, sl
 8005b32:	42a5      	cmp	r5, r4
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	f040 8117 	bne.w	8005d6a <_dtoa_r+0x6e2>
 8005b3c:	f7fa fba6 	bl	800028c <__adddf3>
 8005b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b44:	4604      	mov	r4, r0
 8005b46:	460d      	mov	r5, r1
 8005b48:	f7fa ffe6 	bl	8000b18 <__aeabi_dcmpgt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f040 80f9 	bne.w	8005d44 <_dtoa_r+0x6bc>
 8005b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b5e:	b118      	cbz	r0, 8005b68 <_dtoa_r+0x4e0>
 8005b60:	f018 0f01 	tst.w	r8, #1
 8005b64:	f040 80ee 	bne.w	8005d44 <_dtoa_r+0x6bc>
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4658      	mov	r0, fp
 8005b6c:	f000 fc90 	bl	8006490 <_Bfree>
 8005b70:	2300      	movs	r3, #0
 8005b72:	7033      	strb	r3, [r6, #0]
 8005b74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b76:	3701      	adds	r7, #1
 8005b78:	601f      	str	r7, [r3, #0]
 8005b7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 831d 	beq.w	80061bc <_dtoa_r+0xb34>
 8005b82:	601e      	str	r6, [r3, #0]
 8005b84:	e31a      	b.n	80061bc <_dtoa_r+0xb34>
 8005b86:	07e2      	lsls	r2, r4, #31
 8005b88:	d505      	bpl.n	8005b96 <_dtoa_r+0x50e>
 8005b8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b8e:	f7fa fd33 	bl	80005f8 <__aeabi_dmul>
 8005b92:	3601      	adds	r6, #1
 8005b94:	2301      	movs	r3, #1
 8005b96:	1064      	asrs	r4, r4, #1
 8005b98:	3508      	adds	r5, #8
 8005b9a:	e73f      	b.n	8005a1c <_dtoa_r+0x394>
 8005b9c:	2602      	movs	r6, #2
 8005b9e:	e742      	b.n	8005a26 <_dtoa_r+0x39e>
 8005ba0:	9c07      	ldr	r4, [sp, #28]
 8005ba2:	9704      	str	r7, [sp, #16]
 8005ba4:	e761      	b.n	8005a6a <_dtoa_r+0x3e2>
 8005ba6:	4b27      	ldr	r3, [pc, #156]	@ (8005c44 <_dtoa_r+0x5bc>)
 8005ba8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005baa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bb2:	4454      	add	r4, sl
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d053      	beq.n	8005c60 <_dtoa_r+0x5d8>
 8005bb8:	4928      	ldr	r1, [pc, #160]	@ (8005c5c <_dtoa_r+0x5d4>)
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f7fa fe46 	bl	800084c <__aeabi_ddiv>
 8005bc0:	4633      	mov	r3, r6
 8005bc2:	462a      	mov	r2, r5
 8005bc4:	f7fa fb60 	bl	8000288 <__aeabi_dsub>
 8005bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bcc:	4656      	mov	r6, sl
 8005bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd2:	f7fa ffc1 	bl	8000b58 <__aeabi_d2iz>
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	f7fa fca4 	bl	8000524 <__aeabi_i2d>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be4:	f7fa fb50 	bl	8000288 <__aeabi_dsub>
 8005be8:	3530      	adds	r5, #48	@ 0x30
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bf2:	f806 5b01 	strb.w	r5, [r6], #1
 8005bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bfa:	f7fa ff6f 	bl	8000adc <__aeabi_dcmplt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d171      	bne.n	8005ce6 <_dtoa_r+0x65e>
 8005c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c06:	4911      	ldr	r1, [pc, #68]	@ (8005c4c <_dtoa_r+0x5c4>)
 8005c08:	2000      	movs	r0, #0
 8005c0a:	f7fa fb3d 	bl	8000288 <__aeabi_dsub>
 8005c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c12:	f7fa ff63 	bl	8000adc <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f040 8095 	bne.w	8005d46 <_dtoa_r+0x6be>
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	f43f af50 	beq.w	8005ac2 <_dtoa_r+0x43a>
 8005c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <_dtoa_r+0x5c8>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f7fa fce5 	bl	80005f8 <__aeabi_dmul>
 8005c2e:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <_dtoa_r+0x5c8>)
 8005c30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c34:	2200      	movs	r2, #0
 8005c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c3a:	f7fa fcdd 	bl	80005f8 <__aeabi_dmul>
 8005c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c42:	e7c4      	b.n	8005bce <_dtoa_r+0x546>
 8005c44:	08007440 	.word	0x08007440
 8005c48:	08007418 	.word	0x08007418
 8005c4c:	3ff00000 	.word	0x3ff00000
 8005c50:	40240000 	.word	0x40240000
 8005c54:	401c0000 	.word	0x401c0000
 8005c58:	40140000 	.word	0x40140000
 8005c5c:	3fe00000 	.word	0x3fe00000
 8005c60:	4631      	mov	r1, r6
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7fa fcc8 	bl	80005f8 <__aeabi_dmul>
 8005c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c6c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c6e:	4656      	mov	r6, sl
 8005c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c74:	f7fa ff70 	bl	8000b58 <__aeabi_d2iz>
 8005c78:	4605      	mov	r5, r0
 8005c7a:	f7fa fc53 	bl	8000524 <__aeabi_i2d>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c86:	f7fa faff 	bl	8000288 <__aeabi_dsub>
 8005c8a:	3530      	adds	r5, #48	@ 0x30
 8005c8c:	f806 5b01 	strb.w	r5, [r6], #1
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	d124      	bne.n	8005cea <_dtoa_r+0x662>
 8005ca0:	4bac      	ldr	r3, [pc, #688]	@ (8005f54 <_dtoa_r+0x8cc>)
 8005ca2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ca6:	f7fa faf1 	bl	800028c <__adddf3>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb2:	f7fa ff31 	bl	8000b18 <__aeabi_dcmpgt>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d145      	bne.n	8005d46 <_dtoa_r+0x6be>
 8005cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cbe:	49a5      	ldr	r1, [pc, #660]	@ (8005f54 <_dtoa_r+0x8cc>)
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7fa fae1 	bl	8000288 <__aeabi_dsub>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cce:	f7fa ff05 	bl	8000adc <__aeabi_dcmplt>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	f43f aef5 	beq.w	8005ac2 <_dtoa_r+0x43a>
 8005cd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cda:	1e73      	subs	r3, r6, #1
 8005cdc:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ce2:	2b30      	cmp	r3, #48	@ 0x30
 8005ce4:	d0f8      	beq.n	8005cd8 <_dtoa_r+0x650>
 8005ce6:	9f04      	ldr	r7, [sp, #16]
 8005ce8:	e73e      	b.n	8005b68 <_dtoa_r+0x4e0>
 8005cea:	4b9b      	ldr	r3, [pc, #620]	@ (8005f58 <_dtoa_r+0x8d0>)
 8005cec:	f7fa fc84 	bl	80005f8 <__aeabi_dmul>
 8005cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cf4:	e7bc      	b.n	8005c70 <_dtoa_r+0x5e8>
 8005cf6:	d10c      	bne.n	8005d12 <_dtoa_r+0x68a>
 8005cf8:	4b98      	ldr	r3, [pc, #608]	@ (8005f5c <_dtoa_r+0x8d4>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d00:	f7fa fc7a 	bl	80005f8 <__aeabi_dmul>
 8005d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d08:	f7fa fefc 	bl	8000b04 <__aeabi_dcmpge>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f000 8157 	beq.w	8005fc0 <_dtoa_r+0x938>
 8005d12:	2400      	movs	r4, #0
 8005d14:	4625      	mov	r5, r4
 8005d16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	9304      	str	r3, [sp, #16]
 8005d1c:	4656      	mov	r6, sl
 8005d1e:	2700      	movs	r7, #0
 8005d20:	4621      	mov	r1, r4
 8005d22:	4658      	mov	r0, fp
 8005d24:	f000 fbb4 	bl	8006490 <_Bfree>
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	d0dc      	beq.n	8005ce6 <_dtoa_r+0x65e>
 8005d2c:	b12f      	cbz	r7, 8005d3a <_dtoa_r+0x6b2>
 8005d2e:	42af      	cmp	r7, r5
 8005d30:	d003      	beq.n	8005d3a <_dtoa_r+0x6b2>
 8005d32:	4639      	mov	r1, r7
 8005d34:	4658      	mov	r0, fp
 8005d36:	f000 fbab 	bl	8006490 <_Bfree>
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4658      	mov	r0, fp
 8005d3e:	f000 fba7 	bl	8006490 <_Bfree>
 8005d42:	e7d0      	b.n	8005ce6 <_dtoa_r+0x65e>
 8005d44:	9704      	str	r7, [sp, #16]
 8005d46:	4633      	mov	r3, r6
 8005d48:	461e      	mov	r6, r3
 8005d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d4e:	2a39      	cmp	r2, #57	@ 0x39
 8005d50:	d107      	bne.n	8005d62 <_dtoa_r+0x6da>
 8005d52:	459a      	cmp	sl, r3
 8005d54:	d1f8      	bne.n	8005d48 <_dtoa_r+0x6c0>
 8005d56:	9a04      	ldr	r2, [sp, #16]
 8005d58:	3201      	adds	r2, #1
 8005d5a:	9204      	str	r2, [sp, #16]
 8005d5c:	2230      	movs	r2, #48	@ 0x30
 8005d5e:	f88a 2000 	strb.w	r2, [sl]
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	3201      	adds	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e7bd      	b.n	8005ce6 <_dtoa_r+0x65e>
 8005d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f58 <_dtoa_r+0x8d0>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f7fa fc43 	bl	80005f8 <__aeabi_dmul>
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	460d      	mov	r5, r1
 8005d7a:	f7fa fea5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f43f aebb 	beq.w	8005afa <_dtoa_r+0x472>
 8005d84:	e6f0      	b.n	8005b68 <_dtoa_r+0x4e0>
 8005d86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d88:	2a00      	cmp	r2, #0
 8005d8a:	f000 80db 	beq.w	8005f44 <_dtoa_r+0x8bc>
 8005d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d90:	2a01      	cmp	r2, #1
 8005d92:	f300 80bf 	bgt.w	8005f14 <_dtoa_r+0x88c>
 8005d96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	f000 80b7 	beq.w	8005f0c <_dtoa_r+0x884>
 8005d9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005da2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005da4:	4646      	mov	r6, r8
 8005da6:	9a08      	ldr	r2, [sp, #32]
 8005da8:	2101      	movs	r1, #1
 8005daa:	441a      	add	r2, r3
 8005dac:	4658      	mov	r0, fp
 8005dae:	4498      	add	r8, r3
 8005db0:	9208      	str	r2, [sp, #32]
 8005db2:	f000 fc21 	bl	80065f8 <__i2b>
 8005db6:	4605      	mov	r5, r0
 8005db8:	b15e      	cbz	r6, 8005dd2 <_dtoa_r+0x74a>
 8005dba:	9b08      	ldr	r3, [sp, #32]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd08      	ble.n	8005dd2 <_dtoa_r+0x74a>
 8005dc0:	42b3      	cmp	r3, r6
 8005dc2:	9a08      	ldr	r2, [sp, #32]
 8005dc4:	bfa8      	it	ge
 8005dc6:	4633      	movge	r3, r6
 8005dc8:	eba8 0803 	sub.w	r8, r8, r3
 8005dcc:	1af6      	subs	r6, r6, r3
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	9308      	str	r3, [sp, #32]
 8005dd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dd4:	b1f3      	cbz	r3, 8005e14 <_dtoa_r+0x78c>
 8005dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80b7 	beq.w	8005f4c <_dtoa_r+0x8c4>
 8005dde:	b18c      	cbz	r4, 8005e04 <_dtoa_r+0x77c>
 8005de0:	4629      	mov	r1, r5
 8005de2:	4622      	mov	r2, r4
 8005de4:	4658      	mov	r0, fp
 8005de6:	f000 fcc7 	bl	8006778 <__pow5mult>
 8005dea:	464a      	mov	r2, r9
 8005dec:	4601      	mov	r1, r0
 8005dee:	4605      	mov	r5, r0
 8005df0:	4658      	mov	r0, fp
 8005df2:	f000 fc17 	bl	8006624 <__multiply>
 8005df6:	4649      	mov	r1, r9
 8005df8:	9004      	str	r0, [sp, #16]
 8005dfa:	4658      	mov	r0, fp
 8005dfc:	f000 fb48 	bl	8006490 <_Bfree>
 8005e00:	9b04      	ldr	r3, [sp, #16]
 8005e02:	4699      	mov	r9, r3
 8005e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e06:	1b1a      	subs	r2, r3, r4
 8005e08:	d004      	beq.n	8005e14 <_dtoa_r+0x78c>
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f000 fcb3 	bl	8006778 <__pow5mult>
 8005e12:	4681      	mov	r9, r0
 8005e14:	2101      	movs	r1, #1
 8005e16:	4658      	mov	r0, fp
 8005e18:	f000 fbee 	bl	80065f8 <__i2b>
 8005e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e1e:	4604      	mov	r4, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 81cf 	beq.w	80061c4 <_dtoa_r+0xb3c>
 8005e26:	461a      	mov	r2, r3
 8005e28:	4601      	mov	r1, r0
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f000 fca4 	bl	8006778 <__pow5mult>
 8005e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	4604      	mov	r4, r0
 8005e36:	f300 8095 	bgt.w	8005f64 <_dtoa_r+0x8dc>
 8005e3a:	9b02      	ldr	r3, [sp, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 8087 	bne.w	8005f50 <_dtoa_r+0x8c8>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f040 8089 	bne.w	8005f60 <_dtoa_r+0x8d8>
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e54:	0d1b      	lsrs	r3, r3, #20
 8005e56:	051b      	lsls	r3, r3, #20
 8005e58:	b12b      	cbz	r3, 8005e66 <_dtoa_r+0x7de>
 8005e5a:	9b08      	ldr	r3, [sp, #32]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	9308      	str	r3, [sp, #32]
 8005e60:	f108 0801 	add.w	r8, r8, #1
 8005e64:	2301      	movs	r3, #1
 8005e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 81b0 	beq.w	80061d0 <_dtoa_r+0xb48>
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e76:	6918      	ldr	r0, [r3, #16]
 8005e78:	f000 fb72 	bl	8006560 <__hi0bits>
 8005e7c:	f1c0 0020 	rsb	r0, r0, #32
 8005e80:	9b08      	ldr	r3, [sp, #32]
 8005e82:	4418      	add	r0, r3
 8005e84:	f010 001f 	ands.w	r0, r0, #31
 8005e88:	d077      	beq.n	8005f7a <_dtoa_r+0x8f2>
 8005e8a:	f1c0 0320 	rsb	r3, r0, #32
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	dd6b      	ble.n	8005f6a <_dtoa_r+0x8e2>
 8005e92:	9b08      	ldr	r3, [sp, #32]
 8005e94:	f1c0 001c 	rsb	r0, r0, #28
 8005e98:	4403      	add	r3, r0
 8005e9a:	4480      	add	r8, r0
 8005e9c:	4406      	add	r6, r0
 8005e9e:	9308      	str	r3, [sp, #32]
 8005ea0:	f1b8 0f00 	cmp.w	r8, #0
 8005ea4:	dd05      	ble.n	8005eb2 <_dtoa_r+0x82a>
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	4658      	mov	r0, fp
 8005eac:	f000 fcbe 	bl	800682c <__lshift>
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	9b08      	ldr	r3, [sp, #32]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dd05      	ble.n	8005ec4 <_dtoa_r+0x83c>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4658      	mov	r0, fp
 8005ebe:	f000 fcb5 	bl	800682c <__lshift>
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d059      	beq.n	8005f7e <_dtoa_r+0x8f6>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4648      	mov	r0, r9
 8005ece:	f000 fd19 	bl	8006904 <__mcmp>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	da53      	bge.n	8005f7e <_dtoa_r+0x8f6>
 8005ed6:	1e7b      	subs	r3, r7, #1
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	4649      	mov	r1, r9
 8005edc:	2300      	movs	r3, #0
 8005ede:	220a      	movs	r2, #10
 8005ee0:	4658      	mov	r0, fp
 8005ee2:	f000 faf7 	bl	80064d4 <__multadd>
 8005ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ee8:	4681      	mov	r9, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8172 	beq.w	80061d4 <_dtoa_r+0xb4c>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	220a      	movs	r2, #10
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	f000 faec 	bl	80064d4 <__multadd>
 8005efc:	9b00      	ldr	r3, [sp, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	4605      	mov	r5, r0
 8005f02:	dc67      	bgt.n	8005fd4 <_dtoa_r+0x94c>
 8005f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	dc41      	bgt.n	8005f8e <_dtoa_r+0x906>
 8005f0a:	e063      	b.n	8005fd4 <_dtoa_r+0x94c>
 8005f0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f12:	e746      	b.n	8005da2 <_dtoa_r+0x71a>
 8005f14:	9b07      	ldr	r3, [sp, #28]
 8005f16:	1e5c      	subs	r4, r3, #1
 8005f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	bfbf      	itttt	lt
 8005f1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f24:	1ae3      	sublt	r3, r4, r3
 8005f26:	bfb4      	ite	lt
 8005f28:	18d2      	addlt	r2, r2, r3
 8005f2a:	1b1c      	subge	r4, r3, r4
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	bfbc      	itt	lt
 8005f30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f32:	2400      	movlt	r4, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bfb5      	itete	lt
 8005f38:	eba8 0603 	sublt.w	r6, r8, r3
 8005f3c:	9b07      	ldrge	r3, [sp, #28]
 8005f3e:	2300      	movlt	r3, #0
 8005f40:	4646      	movge	r6, r8
 8005f42:	e730      	b.n	8005da6 <_dtoa_r+0x71e>
 8005f44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f48:	4646      	mov	r6, r8
 8005f4a:	e735      	b.n	8005db8 <_dtoa_r+0x730>
 8005f4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f4e:	e75c      	b.n	8005e0a <_dtoa_r+0x782>
 8005f50:	2300      	movs	r3, #0
 8005f52:	e788      	b.n	8005e66 <_dtoa_r+0x7de>
 8005f54:	3fe00000 	.word	0x3fe00000
 8005f58:	40240000 	.word	0x40240000
 8005f5c:	40140000 	.word	0x40140000
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	e780      	b.n	8005e66 <_dtoa_r+0x7de>
 8005f64:	2300      	movs	r3, #0
 8005f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f68:	e782      	b.n	8005e70 <_dtoa_r+0x7e8>
 8005f6a:	d099      	beq.n	8005ea0 <_dtoa_r+0x818>
 8005f6c:	9a08      	ldr	r2, [sp, #32]
 8005f6e:	331c      	adds	r3, #28
 8005f70:	441a      	add	r2, r3
 8005f72:	4498      	add	r8, r3
 8005f74:	441e      	add	r6, r3
 8005f76:	9208      	str	r2, [sp, #32]
 8005f78:	e792      	b.n	8005ea0 <_dtoa_r+0x818>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	e7f6      	b.n	8005f6c <_dtoa_r+0x8e4>
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	9704      	str	r7, [sp, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dc20      	bgt.n	8005fc8 <_dtoa_r+0x940>
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	dd1e      	ble.n	8005fcc <_dtoa_r+0x944>
 8005f8e:	9b00      	ldr	r3, [sp, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f47f aec0 	bne.w	8005d16 <_dtoa_r+0x68e>
 8005f96:	4621      	mov	r1, r4
 8005f98:	2205      	movs	r2, #5
 8005f9a:	4658      	mov	r0, fp
 8005f9c:	f000 fa9a 	bl	80064d4 <__multadd>
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4648      	mov	r0, r9
 8005fa6:	f000 fcad 	bl	8006904 <__mcmp>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f77f aeb3 	ble.w	8005d16 <_dtoa_r+0x68e>
 8005fb0:	4656      	mov	r6, sl
 8005fb2:	2331      	movs	r3, #49	@ 0x31
 8005fb4:	f806 3b01 	strb.w	r3, [r6], #1
 8005fb8:	9b04      	ldr	r3, [sp, #16]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	e6ae      	b.n	8005d1e <_dtoa_r+0x696>
 8005fc0:	9c07      	ldr	r4, [sp, #28]
 8005fc2:	9704      	str	r7, [sp, #16]
 8005fc4:	4625      	mov	r5, r4
 8005fc6:	e7f3      	b.n	8005fb0 <_dtoa_r+0x928>
 8005fc8:	9b07      	ldr	r3, [sp, #28]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8104 	beq.w	80061dc <_dtoa_r+0xb54>
 8005fd4:	2e00      	cmp	r6, #0
 8005fd6:	dd05      	ble.n	8005fe4 <_dtoa_r+0x95c>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4632      	mov	r2, r6
 8005fdc:	4658      	mov	r0, fp
 8005fde:	f000 fc25 	bl	800682c <__lshift>
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d05a      	beq.n	80060a0 <_dtoa_r+0xa18>
 8005fea:	6869      	ldr	r1, [r5, #4]
 8005fec:	4658      	mov	r0, fp
 8005fee:	f000 fa0f 	bl	8006410 <_Balloc>
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	b928      	cbnz	r0, 8006002 <_dtoa_r+0x97a>
 8005ff6:	4b84      	ldr	r3, [pc, #528]	@ (8006208 <_dtoa_r+0xb80>)
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ffe:	f7ff bb5a 	b.w	80056b6 <_dtoa_r+0x2e>
 8006002:	692a      	ldr	r2, [r5, #16]
 8006004:	3202      	adds	r2, #2
 8006006:	0092      	lsls	r2, r2, #2
 8006008:	f105 010c 	add.w	r1, r5, #12
 800600c:	300c      	adds	r0, #12
 800600e:	f000 fe3d 	bl	8006c8c <memcpy>
 8006012:	2201      	movs	r2, #1
 8006014:	4631      	mov	r1, r6
 8006016:	4658      	mov	r0, fp
 8006018:	f000 fc08 	bl	800682c <__lshift>
 800601c:	f10a 0301 	add.w	r3, sl, #1
 8006020:	9307      	str	r3, [sp, #28]
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	4453      	add	r3, sl
 8006026:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006028:	9b02      	ldr	r3, [sp, #8]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	462f      	mov	r7, r5
 8006030:	930a      	str	r3, [sp, #40]	@ 0x28
 8006032:	4605      	mov	r5, r0
 8006034:	9b07      	ldr	r3, [sp, #28]
 8006036:	4621      	mov	r1, r4
 8006038:	3b01      	subs	r3, #1
 800603a:	4648      	mov	r0, r9
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	f7ff fa9a 	bl	8005576 <quorem>
 8006042:	4639      	mov	r1, r7
 8006044:	9002      	str	r0, [sp, #8]
 8006046:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800604a:	4648      	mov	r0, r9
 800604c:	f000 fc5a 	bl	8006904 <__mcmp>
 8006050:	462a      	mov	r2, r5
 8006052:	9008      	str	r0, [sp, #32]
 8006054:	4621      	mov	r1, r4
 8006056:	4658      	mov	r0, fp
 8006058:	f000 fc70 	bl	800693c <__mdiff>
 800605c:	68c2      	ldr	r2, [r0, #12]
 800605e:	4606      	mov	r6, r0
 8006060:	bb02      	cbnz	r2, 80060a4 <_dtoa_r+0xa1c>
 8006062:	4601      	mov	r1, r0
 8006064:	4648      	mov	r0, r9
 8006066:	f000 fc4d 	bl	8006904 <__mcmp>
 800606a:	4602      	mov	r2, r0
 800606c:	4631      	mov	r1, r6
 800606e:	4658      	mov	r0, fp
 8006070:	920e      	str	r2, [sp, #56]	@ 0x38
 8006072:	f000 fa0d 	bl	8006490 <_Bfree>
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800607a:	9e07      	ldr	r6, [sp, #28]
 800607c:	ea43 0102 	orr.w	r1, r3, r2
 8006080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006082:	4319      	orrs	r1, r3
 8006084:	d110      	bne.n	80060a8 <_dtoa_r+0xa20>
 8006086:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800608a:	d029      	beq.n	80060e0 <_dtoa_r+0xa58>
 800608c:	9b08      	ldr	r3, [sp, #32]
 800608e:	2b00      	cmp	r3, #0
 8006090:	dd02      	ble.n	8006098 <_dtoa_r+0xa10>
 8006092:	9b02      	ldr	r3, [sp, #8]
 8006094:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006098:	9b00      	ldr	r3, [sp, #0]
 800609a:	f883 8000 	strb.w	r8, [r3]
 800609e:	e63f      	b.n	8005d20 <_dtoa_r+0x698>
 80060a0:	4628      	mov	r0, r5
 80060a2:	e7bb      	b.n	800601c <_dtoa_r+0x994>
 80060a4:	2201      	movs	r2, #1
 80060a6:	e7e1      	b.n	800606c <_dtoa_r+0x9e4>
 80060a8:	9b08      	ldr	r3, [sp, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db04      	blt.n	80060b8 <_dtoa_r+0xa30>
 80060ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060b0:	430b      	orrs	r3, r1
 80060b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060b4:	430b      	orrs	r3, r1
 80060b6:	d120      	bne.n	80060fa <_dtoa_r+0xa72>
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	dded      	ble.n	8006098 <_dtoa_r+0xa10>
 80060bc:	4649      	mov	r1, r9
 80060be:	2201      	movs	r2, #1
 80060c0:	4658      	mov	r0, fp
 80060c2:	f000 fbb3 	bl	800682c <__lshift>
 80060c6:	4621      	mov	r1, r4
 80060c8:	4681      	mov	r9, r0
 80060ca:	f000 fc1b 	bl	8006904 <__mcmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	dc03      	bgt.n	80060da <_dtoa_r+0xa52>
 80060d2:	d1e1      	bne.n	8006098 <_dtoa_r+0xa10>
 80060d4:	f018 0f01 	tst.w	r8, #1
 80060d8:	d0de      	beq.n	8006098 <_dtoa_r+0xa10>
 80060da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060de:	d1d8      	bne.n	8006092 <_dtoa_r+0xa0a>
 80060e0:	9a00      	ldr	r2, [sp, #0]
 80060e2:	2339      	movs	r3, #57	@ 0x39
 80060e4:	7013      	strb	r3, [r2, #0]
 80060e6:	4633      	mov	r3, r6
 80060e8:	461e      	mov	r6, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060f0:	2a39      	cmp	r2, #57	@ 0x39
 80060f2:	d052      	beq.n	800619a <_dtoa_r+0xb12>
 80060f4:	3201      	adds	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e612      	b.n	8005d20 <_dtoa_r+0x698>
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	dd07      	ble.n	800610e <_dtoa_r+0xa86>
 80060fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006102:	d0ed      	beq.n	80060e0 <_dtoa_r+0xa58>
 8006104:	9a00      	ldr	r2, [sp, #0]
 8006106:	f108 0301 	add.w	r3, r8, #1
 800610a:	7013      	strb	r3, [r2, #0]
 800610c:	e608      	b.n	8005d20 <_dtoa_r+0x698>
 800610e:	9b07      	ldr	r3, [sp, #28]
 8006110:	9a07      	ldr	r2, [sp, #28]
 8006112:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006118:	4293      	cmp	r3, r2
 800611a:	d028      	beq.n	800616e <_dtoa_r+0xae6>
 800611c:	4649      	mov	r1, r9
 800611e:	2300      	movs	r3, #0
 8006120:	220a      	movs	r2, #10
 8006122:	4658      	mov	r0, fp
 8006124:	f000 f9d6 	bl	80064d4 <__multadd>
 8006128:	42af      	cmp	r7, r5
 800612a:	4681      	mov	r9, r0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	f04f 020a 	mov.w	r2, #10
 8006134:	4639      	mov	r1, r7
 8006136:	4658      	mov	r0, fp
 8006138:	d107      	bne.n	800614a <_dtoa_r+0xac2>
 800613a:	f000 f9cb 	bl	80064d4 <__multadd>
 800613e:	4607      	mov	r7, r0
 8006140:	4605      	mov	r5, r0
 8006142:	9b07      	ldr	r3, [sp, #28]
 8006144:	3301      	adds	r3, #1
 8006146:	9307      	str	r3, [sp, #28]
 8006148:	e774      	b.n	8006034 <_dtoa_r+0x9ac>
 800614a:	f000 f9c3 	bl	80064d4 <__multadd>
 800614e:	4629      	mov	r1, r5
 8006150:	4607      	mov	r7, r0
 8006152:	2300      	movs	r3, #0
 8006154:	220a      	movs	r2, #10
 8006156:	4658      	mov	r0, fp
 8006158:	f000 f9bc 	bl	80064d4 <__multadd>
 800615c:	4605      	mov	r5, r0
 800615e:	e7f0      	b.n	8006142 <_dtoa_r+0xaba>
 8006160:	9b00      	ldr	r3, [sp, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	bfcc      	ite	gt
 8006166:	461e      	movgt	r6, r3
 8006168:	2601      	movle	r6, #1
 800616a:	4456      	add	r6, sl
 800616c:	2700      	movs	r7, #0
 800616e:	4649      	mov	r1, r9
 8006170:	2201      	movs	r2, #1
 8006172:	4658      	mov	r0, fp
 8006174:	f000 fb5a 	bl	800682c <__lshift>
 8006178:	4621      	mov	r1, r4
 800617a:	4681      	mov	r9, r0
 800617c:	f000 fbc2 	bl	8006904 <__mcmp>
 8006180:	2800      	cmp	r0, #0
 8006182:	dcb0      	bgt.n	80060e6 <_dtoa_r+0xa5e>
 8006184:	d102      	bne.n	800618c <_dtoa_r+0xb04>
 8006186:	f018 0f01 	tst.w	r8, #1
 800618a:	d1ac      	bne.n	80060e6 <_dtoa_r+0xa5e>
 800618c:	4633      	mov	r3, r6
 800618e:	461e      	mov	r6, r3
 8006190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006194:	2a30      	cmp	r2, #48	@ 0x30
 8006196:	d0fa      	beq.n	800618e <_dtoa_r+0xb06>
 8006198:	e5c2      	b.n	8005d20 <_dtoa_r+0x698>
 800619a:	459a      	cmp	sl, r3
 800619c:	d1a4      	bne.n	80060e8 <_dtoa_r+0xa60>
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	3301      	adds	r3, #1
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	2331      	movs	r3, #49	@ 0x31
 80061a6:	f88a 3000 	strb.w	r3, [sl]
 80061aa:	e5b9      	b.n	8005d20 <_dtoa_r+0x698>
 80061ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800620c <_dtoa_r+0xb84>
 80061b2:	b11b      	cbz	r3, 80061bc <_dtoa_r+0xb34>
 80061b4:	f10a 0308 	add.w	r3, sl, #8
 80061b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	4650      	mov	r0, sl
 80061be:	b019      	add	sp, #100	@ 0x64
 80061c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	f77f ae37 	ble.w	8005e3a <_dtoa_r+0x7b2>
 80061cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80061d0:	2001      	movs	r0, #1
 80061d2:	e655      	b.n	8005e80 <_dtoa_r+0x7f8>
 80061d4:	9b00      	ldr	r3, [sp, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f77f aed6 	ble.w	8005f88 <_dtoa_r+0x900>
 80061dc:	4656      	mov	r6, sl
 80061de:	4621      	mov	r1, r4
 80061e0:	4648      	mov	r0, r9
 80061e2:	f7ff f9c8 	bl	8005576 <quorem>
 80061e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061ea:	f806 8b01 	strb.w	r8, [r6], #1
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	eba6 020a 	sub.w	r2, r6, sl
 80061f4:	4293      	cmp	r3, r2
 80061f6:	ddb3      	ble.n	8006160 <_dtoa_r+0xad8>
 80061f8:	4649      	mov	r1, r9
 80061fa:	2300      	movs	r3, #0
 80061fc:	220a      	movs	r2, #10
 80061fe:	4658      	mov	r0, fp
 8006200:	f000 f968 	bl	80064d4 <__multadd>
 8006204:	4681      	mov	r9, r0
 8006206:	e7ea      	b.n	80061de <_dtoa_r+0xb56>
 8006208:	080073a0 	.word	0x080073a0
 800620c:	08007324 	.word	0x08007324

08006210 <_free_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	2900      	cmp	r1, #0
 8006216:	d041      	beq.n	800629c <_free_r+0x8c>
 8006218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621c:	1f0c      	subs	r4, r1, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfb8      	it	lt
 8006222:	18e4      	addlt	r4, r4, r3
 8006224:	f000 f8e8 	bl	80063f8 <__malloc_lock>
 8006228:	4a1d      	ldr	r2, [pc, #116]	@ (80062a0 <_free_r+0x90>)
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	b933      	cbnz	r3, 800623c <_free_r+0x2c>
 800622e:	6063      	str	r3, [r4, #4]
 8006230:	6014      	str	r4, [r2, #0]
 8006232:	4628      	mov	r0, r5
 8006234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006238:	f000 b8e4 	b.w	8006404 <__malloc_unlock>
 800623c:	42a3      	cmp	r3, r4
 800623e:	d908      	bls.n	8006252 <_free_r+0x42>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428b      	cmp	r3, r1
 8006246:	bf01      	itttt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	1809      	addeq	r1, r1, r0
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	e7ed      	b.n	800622e <_free_r+0x1e>
 8006252:	461a      	mov	r2, r3
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b10b      	cbz	r3, 800625c <_free_r+0x4c>
 8006258:	42a3      	cmp	r3, r4
 800625a:	d9fa      	bls.n	8006252 <_free_r+0x42>
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	1850      	adds	r0, r2, r1
 8006260:	42a0      	cmp	r0, r4
 8006262:	d10b      	bne.n	800627c <_free_r+0x6c>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	4401      	add	r1, r0
 8006268:	1850      	adds	r0, r2, r1
 800626a:	4283      	cmp	r3, r0
 800626c:	6011      	str	r1, [r2, #0]
 800626e:	d1e0      	bne.n	8006232 <_free_r+0x22>
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	6053      	str	r3, [r2, #4]
 8006276:	4408      	add	r0, r1
 8006278:	6010      	str	r0, [r2, #0]
 800627a:	e7da      	b.n	8006232 <_free_r+0x22>
 800627c:	d902      	bls.n	8006284 <_free_r+0x74>
 800627e:	230c      	movs	r3, #12
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	e7d6      	b.n	8006232 <_free_r+0x22>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	1821      	adds	r1, r4, r0
 8006288:	428b      	cmp	r3, r1
 800628a:	bf04      	itt	eq
 800628c:	6819      	ldreq	r1, [r3, #0]
 800628e:	685b      	ldreq	r3, [r3, #4]
 8006290:	6063      	str	r3, [r4, #4]
 8006292:	bf04      	itt	eq
 8006294:	1809      	addeq	r1, r1, r0
 8006296:	6021      	streq	r1, [r4, #0]
 8006298:	6054      	str	r4, [r2, #4]
 800629a:	e7ca      	b.n	8006232 <_free_r+0x22>
 800629c:	bd38      	pop	{r3, r4, r5, pc}
 800629e:	bf00      	nop
 80062a0:	20000608 	.word	0x20000608

080062a4 <malloc>:
 80062a4:	4b02      	ldr	r3, [pc, #8]	@ (80062b0 <malloc+0xc>)
 80062a6:	4601      	mov	r1, r0
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f000 b825 	b.w	80062f8 <_malloc_r>
 80062ae:	bf00      	nop
 80062b0:	2000001c 	.word	0x2000001c

080062b4 <sbrk_aligned>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	4e0f      	ldr	r6, [pc, #60]	@ (80062f4 <sbrk_aligned+0x40>)
 80062b8:	460c      	mov	r4, r1
 80062ba:	6831      	ldr	r1, [r6, #0]
 80062bc:	4605      	mov	r5, r0
 80062be:	b911      	cbnz	r1, 80062c6 <sbrk_aligned+0x12>
 80062c0:	f000 fcd4 	bl	8006c6c <_sbrk_r>
 80062c4:	6030      	str	r0, [r6, #0]
 80062c6:	4621      	mov	r1, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 fccf 	bl	8006c6c <_sbrk_r>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d103      	bne.n	80062da <sbrk_aligned+0x26>
 80062d2:	f04f 34ff 	mov.w	r4, #4294967295
 80062d6:	4620      	mov	r0, r4
 80062d8:	bd70      	pop	{r4, r5, r6, pc}
 80062da:	1cc4      	adds	r4, r0, #3
 80062dc:	f024 0403 	bic.w	r4, r4, #3
 80062e0:	42a0      	cmp	r0, r4
 80062e2:	d0f8      	beq.n	80062d6 <sbrk_aligned+0x22>
 80062e4:	1a21      	subs	r1, r4, r0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 fcc0 	bl	8006c6c <_sbrk_r>
 80062ec:	3001      	adds	r0, #1
 80062ee:	d1f2      	bne.n	80062d6 <sbrk_aligned+0x22>
 80062f0:	e7ef      	b.n	80062d2 <sbrk_aligned+0x1e>
 80062f2:	bf00      	nop
 80062f4:	20000604 	.word	0x20000604

080062f8 <_malloc_r>:
 80062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062fc:	1ccd      	adds	r5, r1, #3
 80062fe:	f025 0503 	bic.w	r5, r5, #3
 8006302:	3508      	adds	r5, #8
 8006304:	2d0c      	cmp	r5, #12
 8006306:	bf38      	it	cc
 8006308:	250c      	movcc	r5, #12
 800630a:	2d00      	cmp	r5, #0
 800630c:	4606      	mov	r6, r0
 800630e:	db01      	blt.n	8006314 <_malloc_r+0x1c>
 8006310:	42a9      	cmp	r1, r5
 8006312:	d904      	bls.n	800631e <_malloc_r+0x26>
 8006314:	230c      	movs	r3, #12
 8006316:	6033      	str	r3, [r6, #0]
 8006318:	2000      	movs	r0, #0
 800631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063f4 <_malloc_r+0xfc>
 8006322:	f000 f869 	bl	80063f8 <__malloc_lock>
 8006326:	f8d8 3000 	ldr.w	r3, [r8]
 800632a:	461c      	mov	r4, r3
 800632c:	bb44      	cbnz	r4, 8006380 <_malloc_r+0x88>
 800632e:	4629      	mov	r1, r5
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff ffbf 	bl	80062b4 <sbrk_aligned>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	4604      	mov	r4, r0
 800633a:	d158      	bne.n	80063ee <_malloc_r+0xf6>
 800633c:	f8d8 4000 	ldr.w	r4, [r8]
 8006340:	4627      	mov	r7, r4
 8006342:	2f00      	cmp	r7, #0
 8006344:	d143      	bne.n	80063ce <_malloc_r+0xd6>
 8006346:	2c00      	cmp	r4, #0
 8006348:	d04b      	beq.n	80063e2 <_malloc_r+0xea>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	4639      	mov	r1, r7
 800634e:	4630      	mov	r0, r6
 8006350:	eb04 0903 	add.w	r9, r4, r3
 8006354:	f000 fc8a 	bl	8006c6c <_sbrk_r>
 8006358:	4581      	cmp	r9, r0
 800635a:	d142      	bne.n	80063e2 <_malloc_r+0xea>
 800635c:	6821      	ldr	r1, [r4, #0]
 800635e:	1a6d      	subs	r5, r5, r1
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ffa6 	bl	80062b4 <sbrk_aligned>
 8006368:	3001      	adds	r0, #1
 800636a:	d03a      	beq.n	80063e2 <_malloc_r+0xea>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	442b      	add	r3, r5
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	f8d8 3000 	ldr.w	r3, [r8]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	bb62      	cbnz	r2, 80063d4 <_malloc_r+0xdc>
 800637a:	f8c8 7000 	str.w	r7, [r8]
 800637e:	e00f      	b.n	80063a0 <_malloc_r+0xa8>
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	1b52      	subs	r2, r2, r5
 8006384:	d420      	bmi.n	80063c8 <_malloc_r+0xd0>
 8006386:	2a0b      	cmp	r2, #11
 8006388:	d917      	bls.n	80063ba <_malloc_r+0xc2>
 800638a:	1961      	adds	r1, r4, r5
 800638c:	42a3      	cmp	r3, r4
 800638e:	6025      	str	r5, [r4, #0]
 8006390:	bf18      	it	ne
 8006392:	6059      	strne	r1, [r3, #4]
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	bf08      	it	eq
 8006398:	f8c8 1000 	streq.w	r1, [r8]
 800639c:	5162      	str	r2, [r4, r5]
 800639e:	604b      	str	r3, [r1, #4]
 80063a0:	4630      	mov	r0, r6
 80063a2:	f000 f82f 	bl	8006404 <__malloc_unlock>
 80063a6:	f104 000b 	add.w	r0, r4, #11
 80063aa:	1d23      	adds	r3, r4, #4
 80063ac:	f020 0007 	bic.w	r0, r0, #7
 80063b0:	1ac2      	subs	r2, r0, r3
 80063b2:	bf1c      	itt	ne
 80063b4:	1a1b      	subne	r3, r3, r0
 80063b6:	50a3      	strne	r3, [r4, r2]
 80063b8:	e7af      	b.n	800631a <_malloc_r+0x22>
 80063ba:	6862      	ldr	r2, [r4, #4]
 80063bc:	42a3      	cmp	r3, r4
 80063be:	bf0c      	ite	eq
 80063c0:	f8c8 2000 	streq.w	r2, [r8]
 80063c4:	605a      	strne	r2, [r3, #4]
 80063c6:	e7eb      	b.n	80063a0 <_malloc_r+0xa8>
 80063c8:	4623      	mov	r3, r4
 80063ca:	6864      	ldr	r4, [r4, #4]
 80063cc:	e7ae      	b.n	800632c <_malloc_r+0x34>
 80063ce:	463c      	mov	r4, r7
 80063d0:	687f      	ldr	r7, [r7, #4]
 80063d2:	e7b6      	b.n	8006342 <_malloc_r+0x4a>
 80063d4:	461a      	mov	r2, r3
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	42a3      	cmp	r3, r4
 80063da:	d1fb      	bne.n	80063d4 <_malloc_r+0xdc>
 80063dc:	2300      	movs	r3, #0
 80063de:	6053      	str	r3, [r2, #4]
 80063e0:	e7de      	b.n	80063a0 <_malloc_r+0xa8>
 80063e2:	230c      	movs	r3, #12
 80063e4:	6033      	str	r3, [r6, #0]
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 f80c 	bl	8006404 <__malloc_unlock>
 80063ec:	e794      	b.n	8006318 <_malloc_r+0x20>
 80063ee:	6005      	str	r5, [r0, #0]
 80063f0:	e7d6      	b.n	80063a0 <_malloc_r+0xa8>
 80063f2:	bf00      	nop
 80063f4:	20000608 	.word	0x20000608

080063f8 <__malloc_lock>:
 80063f8:	4801      	ldr	r0, [pc, #4]	@ (8006400 <__malloc_lock+0x8>)
 80063fa:	f7ff b8ba 	b.w	8005572 <__retarget_lock_acquire_recursive>
 80063fe:	bf00      	nop
 8006400:	20000600 	.word	0x20000600

08006404 <__malloc_unlock>:
 8006404:	4801      	ldr	r0, [pc, #4]	@ (800640c <__malloc_unlock+0x8>)
 8006406:	f7ff b8b5 	b.w	8005574 <__retarget_lock_release_recursive>
 800640a:	bf00      	nop
 800640c:	20000600 	.word	0x20000600

08006410 <_Balloc>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	69c6      	ldr	r6, [r0, #28]
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	b976      	cbnz	r6, 8006438 <_Balloc+0x28>
 800641a:	2010      	movs	r0, #16
 800641c:	f7ff ff42 	bl	80062a4 <malloc>
 8006420:	4602      	mov	r2, r0
 8006422:	61e0      	str	r0, [r4, #28]
 8006424:	b920      	cbnz	r0, 8006430 <_Balloc+0x20>
 8006426:	4b18      	ldr	r3, [pc, #96]	@ (8006488 <_Balloc+0x78>)
 8006428:	4818      	ldr	r0, [pc, #96]	@ (800648c <_Balloc+0x7c>)
 800642a:	216b      	movs	r1, #107	@ 0x6b
 800642c:	f000 fc3c 	bl	8006ca8 <__assert_func>
 8006430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006434:	6006      	str	r6, [r0, #0]
 8006436:	60c6      	str	r6, [r0, #12]
 8006438:	69e6      	ldr	r6, [r4, #28]
 800643a:	68f3      	ldr	r3, [r6, #12]
 800643c:	b183      	cbz	r3, 8006460 <_Balloc+0x50>
 800643e:	69e3      	ldr	r3, [r4, #28]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006446:	b9b8      	cbnz	r0, 8006478 <_Balloc+0x68>
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f605 	lsl.w	r6, r1, r5
 800644e:	1d72      	adds	r2, r6, #5
 8006450:	0092      	lsls	r2, r2, #2
 8006452:	4620      	mov	r0, r4
 8006454:	f000 fc46 	bl	8006ce4 <_calloc_r>
 8006458:	b160      	cbz	r0, 8006474 <_Balloc+0x64>
 800645a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800645e:	e00e      	b.n	800647e <_Balloc+0x6e>
 8006460:	2221      	movs	r2, #33	@ 0x21
 8006462:	2104      	movs	r1, #4
 8006464:	4620      	mov	r0, r4
 8006466:	f000 fc3d 	bl	8006ce4 <_calloc_r>
 800646a:	69e3      	ldr	r3, [r4, #28]
 800646c:	60f0      	str	r0, [r6, #12]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e4      	bne.n	800643e <_Balloc+0x2e>
 8006474:	2000      	movs	r0, #0
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	6802      	ldr	r2, [r0, #0]
 800647a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800647e:	2300      	movs	r3, #0
 8006480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006484:	e7f7      	b.n	8006476 <_Balloc+0x66>
 8006486:	bf00      	nop
 8006488:	08007331 	.word	0x08007331
 800648c:	080073b1 	.word	0x080073b1

08006490 <_Bfree>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	69c6      	ldr	r6, [r0, #28]
 8006494:	4605      	mov	r5, r0
 8006496:	460c      	mov	r4, r1
 8006498:	b976      	cbnz	r6, 80064b8 <_Bfree+0x28>
 800649a:	2010      	movs	r0, #16
 800649c:	f7ff ff02 	bl	80062a4 <malloc>
 80064a0:	4602      	mov	r2, r0
 80064a2:	61e8      	str	r0, [r5, #28]
 80064a4:	b920      	cbnz	r0, 80064b0 <_Bfree+0x20>
 80064a6:	4b09      	ldr	r3, [pc, #36]	@ (80064cc <_Bfree+0x3c>)
 80064a8:	4809      	ldr	r0, [pc, #36]	@ (80064d0 <_Bfree+0x40>)
 80064aa:	218f      	movs	r1, #143	@ 0x8f
 80064ac:	f000 fbfc 	bl	8006ca8 <__assert_func>
 80064b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064b4:	6006      	str	r6, [r0, #0]
 80064b6:	60c6      	str	r6, [r0, #12]
 80064b8:	b13c      	cbz	r4, 80064ca <_Bfree+0x3a>
 80064ba:	69eb      	ldr	r3, [r5, #28]
 80064bc:	6862      	ldr	r2, [r4, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c4:	6021      	str	r1, [r4, #0]
 80064c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	08007331 	.word	0x08007331
 80064d0:	080073b1 	.word	0x080073b1

080064d4 <__multadd>:
 80064d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d8:	690d      	ldr	r5, [r1, #16]
 80064da:	4607      	mov	r7, r0
 80064dc:	460c      	mov	r4, r1
 80064de:	461e      	mov	r6, r3
 80064e0:	f101 0c14 	add.w	ip, r1, #20
 80064e4:	2000      	movs	r0, #0
 80064e6:	f8dc 3000 	ldr.w	r3, [ip]
 80064ea:	b299      	uxth	r1, r3
 80064ec:	fb02 6101 	mla	r1, r2, r1, r6
 80064f0:	0c1e      	lsrs	r6, r3, #16
 80064f2:	0c0b      	lsrs	r3, r1, #16
 80064f4:	fb02 3306 	mla	r3, r2, r6, r3
 80064f8:	b289      	uxth	r1, r1
 80064fa:	3001      	adds	r0, #1
 80064fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006500:	4285      	cmp	r5, r0
 8006502:	f84c 1b04 	str.w	r1, [ip], #4
 8006506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800650a:	dcec      	bgt.n	80064e6 <__multadd+0x12>
 800650c:	b30e      	cbz	r6, 8006552 <__multadd+0x7e>
 800650e:	68a3      	ldr	r3, [r4, #8]
 8006510:	42ab      	cmp	r3, r5
 8006512:	dc19      	bgt.n	8006548 <__multadd+0x74>
 8006514:	6861      	ldr	r1, [r4, #4]
 8006516:	4638      	mov	r0, r7
 8006518:	3101      	adds	r1, #1
 800651a:	f7ff ff79 	bl	8006410 <_Balloc>
 800651e:	4680      	mov	r8, r0
 8006520:	b928      	cbnz	r0, 800652e <__multadd+0x5a>
 8006522:	4602      	mov	r2, r0
 8006524:	4b0c      	ldr	r3, [pc, #48]	@ (8006558 <__multadd+0x84>)
 8006526:	480d      	ldr	r0, [pc, #52]	@ (800655c <__multadd+0x88>)
 8006528:	21ba      	movs	r1, #186	@ 0xba
 800652a:	f000 fbbd 	bl	8006ca8 <__assert_func>
 800652e:	6922      	ldr	r2, [r4, #16]
 8006530:	3202      	adds	r2, #2
 8006532:	f104 010c 	add.w	r1, r4, #12
 8006536:	0092      	lsls	r2, r2, #2
 8006538:	300c      	adds	r0, #12
 800653a:	f000 fba7 	bl	8006c8c <memcpy>
 800653e:	4621      	mov	r1, r4
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ffa5 	bl	8006490 <_Bfree>
 8006546:	4644      	mov	r4, r8
 8006548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800654c:	3501      	adds	r5, #1
 800654e:	615e      	str	r6, [r3, #20]
 8006550:	6125      	str	r5, [r4, #16]
 8006552:	4620      	mov	r0, r4
 8006554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006558:	080073a0 	.word	0x080073a0
 800655c:	080073b1 	.word	0x080073b1

08006560 <__hi0bits>:
 8006560:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006564:	4603      	mov	r3, r0
 8006566:	bf36      	itet	cc
 8006568:	0403      	lslcc	r3, r0, #16
 800656a:	2000      	movcs	r0, #0
 800656c:	2010      	movcc	r0, #16
 800656e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006572:	bf3c      	itt	cc
 8006574:	021b      	lslcc	r3, r3, #8
 8006576:	3008      	addcc	r0, #8
 8006578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800657c:	bf3c      	itt	cc
 800657e:	011b      	lslcc	r3, r3, #4
 8006580:	3004      	addcc	r0, #4
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006586:	bf3c      	itt	cc
 8006588:	009b      	lslcc	r3, r3, #2
 800658a:	3002      	addcc	r0, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	db05      	blt.n	800659c <__hi0bits+0x3c>
 8006590:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006594:	f100 0001 	add.w	r0, r0, #1
 8006598:	bf08      	it	eq
 800659a:	2020      	moveq	r0, #32
 800659c:	4770      	bx	lr

0800659e <__lo0bits>:
 800659e:	6803      	ldr	r3, [r0, #0]
 80065a0:	4602      	mov	r2, r0
 80065a2:	f013 0007 	ands.w	r0, r3, #7
 80065a6:	d00b      	beq.n	80065c0 <__lo0bits+0x22>
 80065a8:	07d9      	lsls	r1, r3, #31
 80065aa:	d421      	bmi.n	80065f0 <__lo0bits+0x52>
 80065ac:	0798      	lsls	r0, r3, #30
 80065ae:	bf49      	itett	mi
 80065b0:	085b      	lsrmi	r3, r3, #1
 80065b2:	089b      	lsrpl	r3, r3, #2
 80065b4:	2001      	movmi	r0, #1
 80065b6:	6013      	strmi	r3, [r2, #0]
 80065b8:	bf5c      	itt	pl
 80065ba:	6013      	strpl	r3, [r2, #0]
 80065bc:	2002      	movpl	r0, #2
 80065be:	4770      	bx	lr
 80065c0:	b299      	uxth	r1, r3
 80065c2:	b909      	cbnz	r1, 80065c8 <__lo0bits+0x2a>
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	2010      	movs	r0, #16
 80065c8:	b2d9      	uxtb	r1, r3
 80065ca:	b909      	cbnz	r1, 80065d0 <__lo0bits+0x32>
 80065cc:	3008      	adds	r0, #8
 80065ce:	0a1b      	lsrs	r3, r3, #8
 80065d0:	0719      	lsls	r1, r3, #28
 80065d2:	bf04      	itt	eq
 80065d4:	091b      	lsreq	r3, r3, #4
 80065d6:	3004      	addeq	r0, #4
 80065d8:	0799      	lsls	r1, r3, #30
 80065da:	bf04      	itt	eq
 80065dc:	089b      	lsreq	r3, r3, #2
 80065de:	3002      	addeq	r0, #2
 80065e0:	07d9      	lsls	r1, r3, #31
 80065e2:	d403      	bmi.n	80065ec <__lo0bits+0x4e>
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	f100 0001 	add.w	r0, r0, #1
 80065ea:	d003      	beq.n	80065f4 <__lo0bits+0x56>
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	4770      	bx	lr
 80065f0:	2000      	movs	r0, #0
 80065f2:	4770      	bx	lr
 80065f4:	2020      	movs	r0, #32
 80065f6:	4770      	bx	lr

080065f8 <__i2b>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	460c      	mov	r4, r1
 80065fc:	2101      	movs	r1, #1
 80065fe:	f7ff ff07 	bl	8006410 <_Balloc>
 8006602:	4602      	mov	r2, r0
 8006604:	b928      	cbnz	r0, 8006612 <__i2b+0x1a>
 8006606:	4b05      	ldr	r3, [pc, #20]	@ (800661c <__i2b+0x24>)
 8006608:	4805      	ldr	r0, [pc, #20]	@ (8006620 <__i2b+0x28>)
 800660a:	f240 1145 	movw	r1, #325	@ 0x145
 800660e:	f000 fb4b 	bl	8006ca8 <__assert_func>
 8006612:	2301      	movs	r3, #1
 8006614:	6144      	str	r4, [r0, #20]
 8006616:	6103      	str	r3, [r0, #16]
 8006618:	bd10      	pop	{r4, pc}
 800661a:	bf00      	nop
 800661c:	080073a0 	.word	0x080073a0
 8006620:	080073b1 	.word	0x080073b1

08006624 <__multiply>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	4614      	mov	r4, r2
 800662a:	690a      	ldr	r2, [r1, #16]
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	429a      	cmp	r2, r3
 8006630:	bfa8      	it	ge
 8006632:	4623      	movge	r3, r4
 8006634:	460f      	mov	r7, r1
 8006636:	bfa4      	itt	ge
 8006638:	460c      	movge	r4, r1
 800663a:	461f      	movge	r7, r3
 800663c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006640:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006644:	68a3      	ldr	r3, [r4, #8]
 8006646:	6861      	ldr	r1, [r4, #4]
 8006648:	eb0a 0609 	add.w	r6, sl, r9
 800664c:	42b3      	cmp	r3, r6
 800664e:	b085      	sub	sp, #20
 8006650:	bfb8      	it	lt
 8006652:	3101      	addlt	r1, #1
 8006654:	f7ff fedc 	bl	8006410 <_Balloc>
 8006658:	b930      	cbnz	r0, 8006668 <__multiply+0x44>
 800665a:	4602      	mov	r2, r0
 800665c:	4b44      	ldr	r3, [pc, #272]	@ (8006770 <__multiply+0x14c>)
 800665e:	4845      	ldr	r0, [pc, #276]	@ (8006774 <__multiply+0x150>)
 8006660:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006664:	f000 fb20 	bl	8006ca8 <__assert_func>
 8006668:	f100 0514 	add.w	r5, r0, #20
 800666c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006670:	462b      	mov	r3, r5
 8006672:	2200      	movs	r2, #0
 8006674:	4543      	cmp	r3, r8
 8006676:	d321      	bcc.n	80066bc <__multiply+0x98>
 8006678:	f107 0114 	add.w	r1, r7, #20
 800667c:	f104 0214 	add.w	r2, r4, #20
 8006680:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006684:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006688:	9302      	str	r3, [sp, #8]
 800668a:	1b13      	subs	r3, r2, r4
 800668c:	3b15      	subs	r3, #21
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	3304      	adds	r3, #4
 8006694:	f104 0715 	add.w	r7, r4, #21
 8006698:	42ba      	cmp	r2, r7
 800669a:	bf38      	it	cc
 800669c:	2304      	movcc	r3, #4
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	9103      	str	r1, [sp, #12]
 80066a4:	428b      	cmp	r3, r1
 80066a6:	d80c      	bhi.n	80066c2 <__multiply+0x9e>
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	dd03      	ble.n	80066b4 <__multiply+0x90>
 80066ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d05b      	beq.n	800676c <__multiply+0x148>
 80066b4:	6106      	str	r6, [r0, #16]
 80066b6:	b005      	add	sp, #20
 80066b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066bc:	f843 2b04 	str.w	r2, [r3], #4
 80066c0:	e7d8      	b.n	8006674 <__multiply+0x50>
 80066c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80066c6:	f1ba 0f00 	cmp.w	sl, #0
 80066ca:	d024      	beq.n	8006716 <__multiply+0xf2>
 80066cc:	f104 0e14 	add.w	lr, r4, #20
 80066d0:	46a9      	mov	r9, r5
 80066d2:	f04f 0c00 	mov.w	ip, #0
 80066d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066da:	f8d9 3000 	ldr.w	r3, [r9]
 80066de:	fa1f fb87 	uxth.w	fp, r7
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80066e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80066ec:	f8d9 7000 	ldr.w	r7, [r9]
 80066f0:	4463      	add	r3, ip
 80066f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80066fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80066fe:	b29b      	uxth	r3, r3
 8006700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006704:	4572      	cmp	r2, lr
 8006706:	f849 3b04 	str.w	r3, [r9], #4
 800670a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800670e:	d8e2      	bhi.n	80066d6 <__multiply+0xb2>
 8006710:	9b01      	ldr	r3, [sp, #4]
 8006712:	f845 c003 	str.w	ip, [r5, r3]
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800671c:	3104      	adds	r1, #4
 800671e:	f1b9 0f00 	cmp.w	r9, #0
 8006722:	d021      	beq.n	8006768 <__multiply+0x144>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	f104 0c14 	add.w	ip, r4, #20
 800672a:	46ae      	mov	lr, r5
 800672c:	f04f 0a00 	mov.w	sl, #0
 8006730:	f8bc b000 	ldrh.w	fp, [ip]
 8006734:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006738:	fb09 770b 	mla	r7, r9, fp, r7
 800673c:	4457      	add	r7, sl
 800673e:	b29b      	uxth	r3, r3
 8006740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006744:	f84e 3b04 	str.w	r3, [lr], #4
 8006748:	f85c 3b04 	ldr.w	r3, [ip], #4
 800674c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006750:	f8be 3000 	ldrh.w	r3, [lr]
 8006754:	fb09 330a 	mla	r3, r9, sl, r3
 8006758:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800675c:	4562      	cmp	r2, ip
 800675e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006762:	d8e5      	bhi.n	8006730 <__multiply+0x10c>
 8006764:	9f01      	ldr	r7, [sp, #4]
 8006766:	51eb      	str	r3, [r5, r7]
 8006768:	3504      	adds	r5, #4
 800676a:	e799      	b.n	80066a0 <__multiply+0x7c>
 800676c:	3e01      	subs	r6, #1
 800676e:	e79b      	b.n	80066a8 <__multiply+0x84>
 8006770:	080073a0 	.word	0x080073a0
 8006774:	080073b1 	.word	0x080073b1

08006778 <__pow5mult>:
 8006778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800677c:	4615      	mov	r5, r2
 800677e:	f012 0203 	ands.w	r2, r2, #3
 8006782:	4607      	mov	r7, r0
 8006784:	460e      	mov	r6, r1
 8006786:	d007      	beq.n	8006798 <__pow5mult+0x20>
 8006788:	4c25      	ldr	r4, [pc, #148]	@ (8006820 <__pow5mult+0xa8>)
 800678a:	3a01      	subs	r2, #1
 800678c:	2300      	movs	r3, #0
 800678e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006792:	f7ff fe9f 	bl	80064d4 <__multadd>
 8006796:	4606      	mov	r6, r0
 8006798:	10ad      	asrs	r5, r5, #2
 800679a:	d03d      	beq.n	8006818 <__pow5mult+0xa0>
 800679c:	69fc      	ldr	r4, [r7, #28]
 800679e:	b97c      	cbnz	r4, 80067c0 <__pow5mult+0x48>
 80067a0:	2010      	movs	r0, #16
 80067a2:	f7ff fd7f 	bl	80062a4 <malloc>
 80067a6:	4602      	mov	r2, r0
 80067a8:	61f8      	str	r0, [r7, #28]
 80067aa:	b928      	cbnz	r0, 80067b8 <__pow5mult+0x40>
 80067ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006824 <__pow5mult+0xac>)
 80067ae:	481e      	ldr	r0, [pc, #120]	@ (8006828 <__pow5mult+0xb0>)
 80067b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067b4:	f000 fa78 	bl	8006ca8 <__assert_func>
 80067b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067bc:	6004      	str	r4, [r0, #0]
 80067be:	60c4      	str	r4, [r0, #12]
 80067c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067c8:	b94c      	cbnz	r4, 80067de <__pow5mult+0x66>
 80067ca:	f240 2171 	movw	r1, #625	@ 0x271
 80067ce:	4638      	mov	r0, r7
 80067d0:	f7ff ff12 	bl	80065f8 <__i2b>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80067da:	4604      	mov	r4, r0
 80067dc:	6003      	str	r3, [r0, #0]
 80067de:	f04f 0900 	mov.w	r9, #0
 80067e2:	07eb      	lsls	r3, r5, #31
 80067e4:	d50a      	bpl.n	80067fc <__pow5mult+0x84>
 80067e6:	4631      	mov	r1, r6
 80067e8:	4622      	mov	r2, r4
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7ff ff1a 	bl	8006624 <__multiply>
 80067f0:	4631      	mov	r1, r6
 80067f2:	4680      	mov	r8, r0
 80067f4:	4638      	mov	r0, r7
 80067f6:	f7ff fe4b 	bl	8006490 <_Bfree>
 80067fa:	4646      	mov	r6, r8
 80067fc:	106d      	asrs	r5, r5, #1
 80067fe:	d00b      	beq.n	8006818 <__pow5mult+0xa0>
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	b938      	cbnz	r0, 8006814 <__pow5mult+0x9c>
 8006804:	4622      	mov	r2, r4
 8006806:	4621      	mov	r1, r4
 8006808:	4638      	mov	r0, r7
 800680a:	f7ff ff0b 	bl	8006624 <__multiply>
 800680e:	6020      	str	r0, [r4, #0]
 8006810:	f8c0 9000 	str.w	r9, [r0]
 8006814:	4604      	mov	r4, r0
 8006816:	e7e4      	b.n	80067e2 <__pow5mult+0x6a>
 8006818:	4630      	mov	r0, r6
 800681a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800681e:	bf00      	nop
 8006820:	0800740c 	.word	0x0800740c
 8006824:	08007331 	.word	0x08007331
 8006828:	080073b1 	.word	0x080073b1

0800682c <__lshift>:
 800682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	460c      	mov	r4, r1
 8006832:	6849      	ldr	r1, [r1, #4]
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800683a:	68a3      	ldr	r3, [r4, #8]
 800683c:	4607      	mov	r7, r0
 800683e:	4691      	mov	r9, r2
 8006840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006844:	f108 0601 	add.w	r6, r8, #1
 8006848:	42b3      	cmp	r3, r6
 800684a:	db0b      	blt.n	8006864 <__lshift+0x38>
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff fddf 	bl	8006410 <_Balloc>
 8006852:	4605      	mov	r5, r0
 8006854:	b948      	cbnz	r0, 800686a <__lshift+0x3e>
 8006856:	4602      	mov	r2, r0
 8006858:	4b28      	ldr	r3, [pc, #160]	@ (80068fc <__lshift+0xd0>)
 800685a:	4829      	ldr	r0, [pc, #164]	@ (8006900 <__lshift+0xd4>)
 800685c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006860:	f000 fa22 	bl	8006ca8 <__assert_func>
 8006864:	3101      	adds	r1, #1
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	e7ee      	b.n	8006848 <__lshift+0x1c>
 800686a:	2300      	movs	r3, #0
 800686c:	f100 0114 	add.w	r1, r0, #20
 8006870:	f100 0210 	add.w	r2, r0, #16
 8006874:	4618      	mov	r0, r3
 8006876:	4553      	cmp	r3, sl
 8006878:	db33      	blt.n	80068e2 <__lshift+0xb6>
 800687a:	6920      	ldr	r0, [r4, #16]
 800687c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006880:	f104 0314 	add.w	r3, r4, #20
 8006884:	f019 091f 	ands.w	r9, r9, #31
 8006888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800688c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006890:	d02b      	beq.n	80068ea <__lshift+0xbe>
 8006892:	f1c9 0e20 	rsb	lr, r9, #32
 8006896:	468a      	mov	sl, r1
 8006898:	2200      	movs	r2, #0
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	fa00 f009 	lsl.w	r0, r0, r9
 80068a0:	4310      	orrs	r0, r2
 80068a2:	f84a 0b04 	str.w	r0, [sl], #4
 80068a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068aa:	459c      	cmp	ip, r3
 80068ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80068b0:	d8f3      	bhi.n	800689a <__lshift+0x6e>
 80068b2:	ebac 0304 	sub.w	r3, ip, r4
 80068b6:	3b15      	subs	r3, #21
 80068b8:	f023 0303 	bic.w	r3, r3, #3
 80068bc:	3304      	adds	r3, #4
 80068be:	f104 0015 	add.w	r0, r4, #21
 80068c2:	4584      	cmp	ip, r0
 80068c4:	bf38      	it	cc
 80068c6:	2304      	movcc	r3, #4
 80068c8:	50ca      	str	r2, [r1, r3]
 80068ca:	b10a      	cbz	r2, 80068d0 <__lshift+0xa4>
 80068cc:	f108 0602 	add.w	r6, r8, #2
 80068d0:	3e01      	subs	r6, #1
 80068d2:	4638      	mov	r0, r7
 80068d4:	612e      	str	r6, [r5, #16]
 80068d6:	4621      	mov	r1, r4
 80068d8:	f7ff fdda 	bl	8006490 <_Bfree>
 80068dc:	4628      	mov	r0, r5
 80068de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80068e6:	3301      	adds	r3, #1
 80068e8:	e7c5      	b.n	8006876 <__lshift+0x4a>
 80068ea:	3904      	subs	r1, #4
 80068ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80068f4:	459c      	cmp	ip, r3
 80068f6:	d8f9      	bhi.n	80068ec <__lshift+0xc0>
 80068f8:	e7ea      	b.n	80068d0 <__lshift+0xa4>
 80068fa:	bf00      	nop
 80068fc:	080073a0 	.word	0x080073a0
 8006900:	080073b1 	.word	0x080073b1

08006904 <__mcmp>:
 8006904:	690a      	ldr	r2, [r1, #16]
 8006906:	4603      	mov	r3, r0
 8006908:	6900      	ldr	r0, [r0, #16]
 800690a:	1a80      	subs	r0, r0, r2
 800690c:	b530      	push	{r4, r5, lr}
 800690e:	d10e      	bne.n	800692e <__mcmp+0x2a>
 8006910:	3314      	adds	r3, #20
 8006912:	3114      	adds	r1, #20
 8006914:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006918:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800691c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006920:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006924:	4295      	cmp	r5, r2
 8006926:	d003      	beq.n	8006930 <__mcmp+0x2c>
 8006928:	d205      	bcs.n	8006936 <__mcmp+0x32>
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	bd30      	pop	{r4, r5, pc}
 8006930:	42a3      	cmp	r3, r4
 8006932:	d3f3      	bcc.n	800691c <__mcmp+0x18>
 8006934:	e7fb      	b.n	800692e <__mcmp+0x2a>
 8006936:	2001      	movs	r0, #1
 8006938:	e7f9      	b.n	800692e <__mcmp+0x2a>
	...

0800693c <__mdiff>:
 800693c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	4689      	mov	r9, r1
 8006942:	4606      	mov	r6, r0
 8006944:	4611      	mov	r1, r2
 8006946:	4648      	mov	r0, r9
 8006948:	4614      	mov	r4, r2
 800694a:	f7ff ffdb 	bl	8006904 <__mcmp>
 800694e:	1e05      	subs	r5, r0, #0
 8006950:	d112      	bne.n	8006978 <__mdiff+0x3c>
 8006952:	4629      	mov	r1, r5
 8006954:	4630      	mov	r0, r6
 8006956:	f7ff fd5b 	bl	8006410 <_Balloc>
 800695a:	4602      	mov	r2, r0
 800695c:	b928      	cbnz	r0, 800696a <__mdiff+0x2e>
 800695e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a5c <__mdiff+0x120>)
 8006960:	f240 2137 	movw	r1, #567	@ 0x237
 8006964:	483e      	ldr	r0, [pc, #248]	@ (8006a60 <__mdiff+0x124>)
 8006966:	f000 f99f 	bl	8006ca8 <__assert_func>
 800696a:	2301      	movs	r3, #1
 800696c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006970:	4610      	mov	r0, r2
 8006972:	b003      	add	sp, #12
 8006974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006978:	bfbc      	itt	lt
 800697a:	464b      	movlt	r3, r9
 800697c:	46a1      	movlt	r9, r4
 800697e:	4630      	mov	r0, r6
 8006980:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006984:	bfba      	itte	lt
 8006986:	461c      	movlt	r4, r3
 8006988:	2501      	movlt	r5, #1
 800698a:	2500      	movge	r5, #0
 800698c:	f7ff fd40 	bl	8006410 <_Balloc>
 8006990:	4602      	mov	r2, r0
 8006992:	b918      	cbnz	r0, 800699c <__mdiff+0x60>
 8006994:	4b31      	ldr	r3, [pc, #196]	@ (8006a5c <__mdiff+0x120>)
 8006996:	f240 2145 	movw	r1, #581	@ 0x245
 800699a:	e7e3      	b.n	8006964 <__mdiff+0x28>
 800699c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069a0:	6926      	ldr	r6, [r4, #16]
 80069a2:	60c5      	str	r5, [r0, #12]
 80069a4:	f109 0310 	add.w	r3, r9, #16
 80069a8:	f109 0514 	add.w	r5, r9, #20
 80069ac:	f104 0e14 	add.w	lr, r4, #20
 80069b0:	f100 0b14 	add.w	fp, r0, #20
 80069b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	46d9      	mov	r9, fp
 80069c0:	f04f 0c00 	mov.w	ip, #0
 80069c4:	9b01      	ldr	r3, [sp, #4]
 80069c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	fa1f f38a 	uxth.w	r3, sl
 80069d4:	4619      	mov	r1, r3
 80069d6:	b283      	uxth	r3, r0
 80069d8:	1acb      	subs	r3, r1, r3
 80069da:	0c00      	lsrs	r0, r0, #16
 80069dc:	4463      	add	r3, ip
 80069de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069ec:	4576      	cmp	r6, lr
 80069ee:	f849 3b04 	str.w	r3, [r9], #4
 80069f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069f6:	d8e5      	bhi.n	80069c4 <__mdiff+0x88>
 80069f8:	1b33      	subs	r3, r6, r4
 80069fa:	3b15      	subs	r3, #21
 80069fc:	f023 0303 	bic.w	r3, r3, #3
 8006a00:	3415      	adds	r4, #21
 8006a02:	3304      	adds	r3, #4
 8006a04:	42a6      	cmp	r6, r4
 8006a06:	bf38      	it	cc
 8006a08:	2304      	movcc	r3, #4
 8006a0a:	441d      	add	r5, r3
 8006a0c:	445b      	add	r3, fp
 8006a0e:	461e      	mov	r6, r3
 8006a10:	462c      	mov	r4, r5
 8006a12:	4544      	cmp	r4, r8
 8006a14:	d30e      	bcc.n	8006a34 <__mdiff+0xf8>
 8006a16:	f108 0103 	add.w	r1, r8, #3
 8006a1a:	1b49      	subs	r1, r1, r5
 8006a1c:	f021 0103 	bic.w	r1, r1, #3
 8006a20:	3d03      	subs	r5, #3
 8006a22:	45a8      	cmp	r8, r5
 8006a24:	bf38      	it	cc
 8006a26:	2100      	movcc	r1, #0
 8006a28:	440b      	add	r3, r1
 8006a2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a2e:	b191      	cbz	r1, 8006a56 <__mdiff+0x11a>
 8006a30:	6117      	str	r7, [r2, #16]
 8006a32:	e79d      	b.n	8006970 <__mdiff+0x34>
 8006a34:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a38:	46e6      	mov	lr, ip
 8006a3a:	0c08      	lsrs	r0, r1, #16
 8006a3c:	fa1c fc81 	uxtah	ip, ip, r1
 8006a40:	4471      	add	r1, lr
 8006a42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a46:	b289      	uxth	r1, r1
 8006a48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a4c:	f846 1b04 	str.w	r1, [r6], #4
 8006a50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a54:	e7dd      	b.n	8006a12 <__mdiff+0xd6>
 8006a56:	3f01      	subs	r7, #1
 8006a58:	e7e7      	b.n	8006a2a <__mdiff+0xee>
 8006a5a:	bf00      	nop
 8006a5c:	080073a0 	.word	0x080073a0
 8006a60:	080073b1 	.word	0x080073b1

08006a64 <__d2b>:
 8006a64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	460f      	mov	r7, r1
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	ec59 8b10 	vmov	r8, r9, d0
 8006a70:	4616      	mov	r6, r2
 8006a72:	f7ff fccd 	bl	8006410 <_Balloc>
 8006a76:	4604      	mov	r4, r0
 8006a78:	b930      	cbnz	r0, 8006a88 <__d2b+0x24>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b23      	ldr	r3, [pc, #140]	@ (8006b0c <__d2b+0xa8>)
 8006a7e:	4824      	ldr	r0, [pc, #144]	@ (8006b10 <__d2b+0xac>)
 8006a80:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a84:	f000 f910 	bl	8006ca8 <__assert_func>
 8006a88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a90:	b10d      	cbz	r5, 8006a96 <__d2b+0x32>
 8006a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	f1b8 0300 	subs.w	r3, r8, #0
 8006a9c:	d023      	beq.n	8006ae6 <__d2b+0x82>
 8006a9e:	4668      	mov	r0, sp
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	f7ff fd7c 	bl	800659e <__lo0bits>
 8006aa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006aaa:	b1d0      	cbz	r0, 8006ae2 <__d2b+0x7e>
 8006aac:	f1c0 0320 	rsb	r3, r0, #32
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	40c2      	lsrs	r2, r0
 8006ab8:	6163      	str	r3, [r4, #20]
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	9b01      	ldr	r3, [sp, #4]
 8006abe:	61a3      	str	r3, [r4, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2201      	moveq	r2, #1
 8006ac6:	2202      	movne	r2, #2
 8006ac8:	6122      	str	r2, [r4, #16]
 8006aca:	b1a5      	cbz	r5, 8006af6 <__d2b+0x92>
 8006acc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ad0:	4405      	add	r5, r0
 8006ad2:	603d      	str	r5, [r7, #0]
 8006ad4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ad8:	6030      	str	r0, [r6, #0]
 8006ada:	4620      	mov	r0, r4
 8006adc:	b003      	add	sp, #12
 8006ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ae2:	6161      	str	r1, [r4, #20]
 8006ae4:	e7ea      	b.n	8006abc <__d2b+0x58>
 8006ae6:	a801      	add	r0, sp, #4
 8006ae8:	f7ff fd59 	bl	800659e <__lo0bits>
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	6163      	str	r3, [r4, #20]
 8006af0:	3020      	adds	r0, #32
 8006af2:	2201      	movs	r2, #1
 8006af4:	e7e8      	b.n	8006ac8 <__d2b+0x64>
 8006af6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006afa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006afe:	6038      	str	r0, [r7, #0]
 8006b00:	6918      	ldr	r0, [r3, #16]
 8006b02:	f7ff fd2d 	bl	8006560 <__hi0bits>
 8006b06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b0a:	e7e5      	b.n	8006ad8 <__d2b+0x74>
 8006b0c:	080073a0 	.word	0x080073a0
 8006b10:	080073b1 	.word	0x080073b1

08006b14 <__sflush_r>:
 8006b14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1c:	0716      	lsls	r6, r2, #28
 8006b1e:	4605      	mov	r5, r0
 8006b20:	460c      	mov	r4, r1
 8006b22:	d454      	bmi.n	8006bce <__sflush_r+0xba>
 8006b24:	684b      	ldr	r3, [r1, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	dc02      	bgt.n	8006b30 <__sflush_r+0x1c>
 8006b2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd48      	ble.n	8006bc2 <__sflush_r+0xae>
 8006b30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	d045      	beq.n	8006bc2 <__sflush_r+0xae>
 8006b36:	2300      	movs	r3, #0
 8006b38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b3c:	682f      	ldr	r7, [r5, #0]
 8006b3e:	6a21      	ldr	r1, [r4, #32]
 8006b40:	602b      	str	r3, [r5, #0]
 8006b42:	d030      	beq.n	8006ba6 <__sflush_r+0x92>
 8006b44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	0759      	lsls	r1, r3, #29
 8006b4a:	d505      	bpl.n	8006b58 <__sflush_r+0x44>
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b52:	b10b      	cbz	r3, 8006b58 <__sflush_r+0x44>
 8006b54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b56:	1ad2      	subs	r2, r2, r3
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b5c:	6a21      	ldr	r1, [r4, #32]
 8006b5e:	4628      	mov	r0, r5
 8006b60:	47b0      	blx	r6
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	d106      	bne.n	8006b76 <__sflush_r+0x62>
 8006b68:	6829      	ldr	r1, [r5, #0]
 8006b6a:	291d      	cmp	r1, #29
 8006b6c:	d82b      	bhi.n	8006bc6 <__sflush_r+0xb2>
 8006b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8006c18 <__sflush_r+0x104>)
 8006b70:	410a      	asrs	r2, r1
 8006b72:	07d6      	lsls	r6, r2, #31
 8006b74:	d427      	bmi.n	8006bc6 <__sflush_r+0xb2>
 8006b76:	2200      	movs	r2, #0
 8006b78:	6062      	str	r2, [r4, #4]
 8006b7a:	04d9      	lsls	r1, r3, #19
 8006b7c:	6922      	ldr	r2, [r4, #16]
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	d504      	bpl.n	8006b8c <__sflush_r+0x78>
 8006b82:	1c42      	adds	r2, r0, #1
 8006b84:	d101      	bne.n	8006b8a <__sflush_r+0x76>
 8006b86:	682b      	ldr	r3, [r5, #0]
 8006b88:	b903      	cbnz	r3, 8006b8c <__sflush_r+0x78>
 8006b8a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b8e:	602f      	str	r7, [r5, #0]
 8006b90:	b1b9      	cbz	r1, 8006bc2 <__sflush_r+0xae>
 8006b92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b96:	4299      	cmp	r1, r3
 8006b98:	d002      	beq.n	8006ba0 <__sflush_r+0x8c>
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f7ff fb38 	bl	8006210 <_free_r>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ba4:	e00d      	b.n	8006bc2 <__sflush_r+0xae>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b0      	blx	r6
 8006bac:	4602      	mov	r2, r0
 8006bae:	1c50      	adds	r0, r2, #1
 8006bb0:	d1c9      	bne.n	8006b46 <__sflush_r+0x32>
 8006bb2:	682b      	ldr	r3, [r5, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0c6      	beq.n	8006b46 <__sflush_r+0x32>
 8006bb8:	2b1d      	cmp	r3, #29
 8006bba:	d001      	beq.n	8006bc0 <__sflush_r+0xac>
 8006bbc:	2b16      	cmp	r3, #22
 8006bbe:	d11e      	bne.n	8006bfe <__sflush_r+0xea>
 8006bc0:	602f      	str	r7, [r5, #0]
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	e022      	b.n	8006c0c <__sflush_r+0xf8>
 8006bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bca:	b21b      	sxth	r3, r3
 8006bcc:	e01b      	b.n	8006c06 <__sflush_r+0xf2>
 8006bce:	690f      	ldr	r7, [r1, #16]
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	d0f6      	beq.n	8006bc2 <__sflush_r+0xae>
 8006bd4:	0793      	lsls	r3, r2, #30
 8006bd6:	680e      	ldr	r6, [r1, #0]
 8006bd8:	bf08      	it	eq
 8006bda:	694b      	ldreq	r3, [r1, #20]
 8006bdc:	600f      	str	r7, [r1, #0]
 8006bde:	bf18      	it	ne
 8006be0:	2300      	movne	r3, #0
 8006be2:	eba6 0807 	sub.w	r8, r6, r7
 8006be6:	608b      	str	r3, [r1, #8]
 8006be8:	f1b8 0f00 	cmp.w	r8, #0
 8006bec:	dde9      	ble.n	8006bc2 <__sflush_r+0xae>
 8006bee:	6a21      	ldr	r1, [r4, #32]
 8006bf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bf2:	4643      	mov	r3, r8
 8006bf4:	463a      	mov	r2, r7
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	47b0      	blx	r6
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	dc08      	bgt.n	8006c10 <__sflush_r+0xfc>
 8006bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	f04f 30ff 	mov.w	r0, #4294967295
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	4407      	add	r7, r0
 8006c12:	eba8 0800 	sub.w	r8, r8, r0
 8006c16:	e7e7      	b.n	8006be8 <__sflush_r+0xd4>
 8006c18:	dfbffffe 	.word	0xdfbffffe

08006c1c <_fflush_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	690b      	ldr	r3, [r1, #16]
 8006c20:	4605      	mov	r5, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	b913      	cbnz	r3, 8006c2c <_fflush_r+0x10>
 8006c26:	2500      	movs	r5, #0
 8006c28:	4628      	mov	r0, r5
 8006c2a:	bd38      	pop	{r3, r4, r5, pc}
 8006c2c:	b118      	cbz	r0, 8006c36 <_fflush_r+0x1a>
 8006c2e:	6a03      	ldr	r3, [r0, #32]
 8006c30:	b90b      	cbnz	r3, 8006c36 <_fflush_r+0x1a>
 8006c32:	f7fe fba7 	bl	8005384 <__sinit>
 8006c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0f3      	beq.n	8006c26 <_fflush_r+0xa>
 8006c3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c40:	07d0      	lsls	r0, r2, #31
 8006c42:	d404      	bmi.n	8006c4e <_fflush_r+0x32>
 8006c44:	0599      	lsls	r1, r3, #22
 8006c46:	d402      	bmi.n	8006c4e <_fflush_r+0x32>
 8006c48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c4a:	f7fe fc92 	bl	8005572 <__retarget_lock_acquire_recursive>
 8006c4e:	4628      	mov	r0, r5
 8006c50:	4621      	mov	r1, r4
 8006c52:	f7ff ff5f 	bl	8006b14 <__sflush_r>
 8006c56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c58:	07da      	lsls	r2, r3, #31
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	d4e4      	bmi.n	8006c28 <_fflush_r+0xc>
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	059b      	lsls	r3, r3, #22
 8006c62:	d4e1      	bmi.n	8006c28 <_fflush_r+0xc>
 8006c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c66:	f7fe fc85 	bl	8005574 <__retarget_lock_release_recursive>
 8006c6a:	e7dd      	b.n	8006c28 <_fflush_r+0xc>

08006c6c <_sbrk_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d06      	ldr	r5, [pc, #24]	@ (8006c88 <_sbrk_r+0x1c>)
 8006c70:	2300      	movs	r3, #0
 8006c72:	4604      	mov	r4, r0
 8006c74:	4608      	mov	r0, r1
 8006c76:	602b      	str	r3, [r5, #0]
 8006c78:	f7fb f9ca 	bl	8002010 <_sbrk>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <_sbrk_r+0x1a>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	b103      	cbz	r3, 8006c86 <_sbrk_r+0x1a>
 8006c84:	6023      	str	r3, [r4, #0]
 8006c86:	bd38      	pop	{r3, r4, r5, pc}
 8006c88:	200005fc 	.word	0x200005fc

08006c8c <memcpy>:
 8006c8c:	440a      	add	r2, r1
 8006c8e:	4291      	cmp	r1, r2
 8006c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c94:	d100      	bne.n	8006c98 <memcpy+0xc>
 8006c96:	4770      	bx	lr
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca2:	4291      	cmp	r1, r2
 8006ca4:	d1f9      	bne.n	8006c9a <memcpy+0xe>
 8006ca6:	bd10      	pop	{r4, pc}

08006ca8 <__assert_func>:
 8006ca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006caa:	4614      	mov	r4, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4b09      	ldr	r3, [pc, #36]	@ (8006cd4 <__assert_func+0x2c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	68d8      	ldr	r0, [r3, #12]
 8006cb6:	b954      	cbnz	r4, 8006cce <__assert_func+0x26>
 8006cb8:	4b07      	ldr	r3, [pc, #28]	@ (8006cd8 <__assert_func+0x30>)
 8006cba:	461c      	mov	r4, r3
 8006cbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cc0:	9100      	str	r1, [sp, #0]
 8006cc2:	462b      	mov	r3, r5
 8006cc4:	4905      	ldr	r1, [pc, #20]	@ (8006cdc <__assert_func+0x34>)
 8006cc6:	f000 f841 	bl	8006d4c <fiprintf>
 8006cca:	f000 f851 	bl	8006d70 <abort>
 8006cce:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <__assert_func+0x38>)
 8006cd0:	e7f4      	b.n	8006cbc <__assert_func+0x14>
 8006cd2:	bf00      	nop
 8006cd4:	2000001c 	.word	0x2000001c
 8006cd8:	0800754d 	.word	0x0800754d
 8006cdc:	0800751f 	.word	0x0800751f
 8006ce0:	08007512 	.word	0x08007512

08006ce4 <_calloc_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	fba1 5402 	umull	r5, r4, r1, r2
 8006cea:	b93c      	cbnz	r4, 8006cfc <_calloc_r+0x18>
 8006cec:	4629      	mov	r1, r5
 8006cee:	f7ff fb03 	bl	80062f8 <_malloc_r>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	b928      	cbnz	r0, 8006d02 <_calloc_r+0x1e>
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	220c      	movs	r2, #12
 8006cfe:	6002      	str	r2, [r0, #0]
 8006d00:	e7f9      	b.n	8006cf6 <_calloc_r+0x12>
 8006d02:	462a      	mov	r2, r5
 8006d04:	4621      	mov	r1, r4
 8006d06:	f7fe fbb6 	bl	8005476 <memset>
 8006d0a:	e7f5      	b.n	8006cf8 <_calloc_r+0x14>

08006d0c <__ascii_mbtowc>:
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	b901      	cbnz	r1, 8006d12 <__ascii_mbtowc+0x6>
 8006d10:	a901      	add	r1, sp, #4
 8006d12:	b142      	cbz	r2, 8006d26 <__ascii_mbtowc+0x1a>
 8006d14:	b14b      	cbz	r3, 8006d2a <__ascii_mbtowc+0x1e>
 8006d16:	7813      	ldrb	r3, [r2, #0]
 8006d18:	600b      	str	r3, [r1, #0]
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	1e10      	subs	r0, r2, #0
 8006d1e:	bf18      	it	ne
 8006d20:	2001      	movne	r0, #1
 8006d22:	b002      	add	sp, #8
 8006d24:	4770      	bx	lr
 8006d26:	4610      	mov	r0, r2
 8006d28:	e7fb      	b.n	8006d22 <__ascii_mbtowc+0x16>
 8006d2a:	f06f 0001 	mvn.w	r0, #1
 8006d2e:	e7f8      	b.n	8006d22 <__ascii_mbtowc+0x16>

08006d30 <__ascii_wctomb>:
 8006d30:	4603      	mov	r3, r0
 8006d32:	4608      	mov	r0, r1
 8006d34:	b141      	cbz	r1, 8006d48 <__ascii_wctomb+0x18>
 8006d36:	2aff      	cmp	r2, #255	@ 0xff
 8006d38:	d904      	bls.n	8006d44 <__ascii_wctomb+0x14>
 8006d3a:	228a      	movs	r2, #138	@ 0x8a
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	4770      	bx	lr
 8006d44:	700a      	strb	r2, [r1, #0]
 8006d46:	2001      	movs	r0, #1
 8006d48:	4770      	bx	lr
	...

08006d4c <fiprintf>:
 8006d4c:	b40e      	push	{r1, r2, r3}
 8006d4e:	b503      	push	{r0, r1, lr}
 8006d50:	4601      	mov	r1, r0
 8006d52:	ab03      	add	r3, sp, #12
 8006d54:	4805      	ldr	r0, [pc, #20]	@ (8006d6c <fiprintf+0x20>)
 8006d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d5a:	6800      	ldr	r0, [r0, #0]
 8006d5c:	9301      	str	r3, [sp, #4]
 8006d5e:	f000 f837 	bl	8006dd0 <_vfiprintf_r>
 8006d62:	b002      	add	sp, #8
 8006d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d68:	b003      	add	sp, #12
 8006d6a:	4770      	bx	lr
 8006d6c:	2000001c 	.word	0x2000001c

08006d70 <abort>:
 8006d70:	b508      	push	{r3, lr}
 8006d72:	2006      	movs	r0, #6
 8006d74:	f000 fa00 	bl	8007178 <raise>
 8006d78:	2001      	movs	r0, #1
 8006d7a:	f7fb f8d1 	bl	8001f20 <_exit>

08006d7e <__sfputc_r>:
 8006d7e:	6893      	ldr	r3, [r2, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	b410      	push	{r4}
 8006d86:	6093      	str	r3, [r2, #8]
 8006d88:	da08      	bge.n	8006d9c <__sfputc_r+0x1e>
 8006d8a:	6994      	ldr	r4, [r2, #24]
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	db01      	blt.n	8006d94 <__sfputc_r+0x16>
 8006d90:	290a      	cmp	r1, #10
 8006d92:	d103      	bne.n	8006d9c <__sfputc_r+0x1e>
 8006d94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d98:	f000 b932 	b.w	8007000 <__swbuf_r>
 8006d9c:	6813      	ldr	r3, [r2, #0]
 8006d9e:	1c58      	adds	r0, r3, #1
 8006da0:	6010      	str	r0, [r2, #0]
 8006da2:	7019      	strb	r1, [r3, #0]
 8006da4:	4608      	mov	r0, r1
 8006da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <__sfputs_r>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	4606      	mov	r6, r0
 8006db0:	460f      	mov	r7, r1
 8006db2:	4614      	mov	r4, r2
 8006db4:	18d5      	adds	r5, r2, r3
 8006db6:	42ac      	cmp	r4, r5
 8006db8:	d101      	bne.n	8006dbe <__sfputs_r+0x12>
 8006dba:	2000      	movs	r0, #0
 8006dbc:	e007      	b.n	8006dce <__sfputs_r+0x22>
 8006dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc2:	463a      	mov	r2, r7
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff ffda 	bl	8006d7e <__sfputc_r>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	d1f3      	bne.n	8006db6 <__sfputs_r+0xa>
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dd0 <_vfiprintf_r>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	460d      	mov	r5, r1
 8006dd6:	b09d      	sub	sp, #116	@ 0x74
 8006dd8:	4614      	mov	r4, r2
 8006dda:	4698      	mov	r8, r3
 8006ddc:	4606      	mov	r6, r0
 8006dde:	b118      	cbz	r0, 8006de8 <_vfiprintf_r+0x18>
 8006de0:	6a03      	ldr	r3, [r0, #32]
 8006de2:	b90b      	cbnz	r3, 8006de8 <_vfiprintf_r+0x18>
 8006de4:	f7fe face 	bl	8005384 <__sinit>
 8006de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006dea:	07d9      	lsls	r1, r3, #31
 8006dec:	d405      	bmi.n	8006dfa <_vfiprintf_r+0x2a>
 8006dee:	89ab      	ldrh	r3, [r5, #12]
 8006df0:	059a      	lsls	r2, r3, #22
 8006df2:	d402      	bmi.n	8006dfa <_vfiprintf_r+0x2a>
 8006df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006df6:	f7fe fbbc 	bl	8005572 <__retarget_lock_acquire_recursive>
 8006dfa:	89ab      	ldrh	r3, [r5, #12]
 8006dfc:	071b      	lsls	r3, r3, #28
 8006dfe:	d501      	bpl.n	8006e04 <_vfiprintf_r+0x34>
 8006e00:	692b      	ldr	r3, [r5, #16]
 8006e02:	b99b      	cbnz	r3, 8006e2c <_vfiprintf_r+0x5c>
 8006e04:	4629      	mov	r1, r5
 8006e06:	4630      	mov	r0, r6
 8006e08:	f000 f938 	bl	800707c <__swsetup_r>
 8006e0c:	b170      	cbz	r0, 8006e2c <_vfiprintf_r+0x5c>
 8006e0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e10:	07dc      	lsls	r4, r3, #31
 8006e12:	d504      	bpl.n	8006e1e <_vfiprintf_r+0x4e>
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	b01d      	add	sp, #116	@ 0x74
 8006e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	0598      	lsls	r0, r3, #22
 8006e22:	d4f7      	bmi.n	8006e14 <_vfiprintf_r+0x44>
 8006e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e26:	f7fe fba5 	bl	8005574 <__retarget_lock_release_recursive>
 8006e2a:	e7f3      	b.n	8006e14 <_vfiprintf_r+0x44>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e30:	2320      	movs	r3, #32
 8006e32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e3a:	2330      	movs	r3, #48	@ 0x30
 8006e3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006fec <_vfiprintf_r+0x21c>
 8006e40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e44:	f04f 0901 	mov.w	r9, #1
 8006e48:	4623      	mov	r3, r4
 8006e4a:	469a      	mov	sl, r3
 8006e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e50:	b10a      	cbz	r2, 8006e56 <_vfiprintf_r+0x86>
 8006e52:	2a25      	cmp	r2, #37	@ 0x25
 8006e54:	d1f9      	bne.n	8006e4a <_vfiprintf_r+0x7a>
 8006e56:	ebba 0b04 	subs.w	fp, sl, r4
 8006e5a:	d00b      	beq.n	8006e74 <_vfiprintf_r+0xa4>
 8006e5c:	465b      	mov	r3, fp
 8006e5e:	4622      	mov	r2, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7ff ffa2 	bl	8006dac <__sfputs_r>
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f000 80a7 	beq.w	8006fbc <_vfiprintf_r+0x1ec>
 8006e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e70:	445a      	add	r2, fp
 8006e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e74:	f89a 3000 	ldrb.w	r3, [sl]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 809f 	beq.w	8006fbc <_vfiprintf_r+0x1ec>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f04f 32ff 	mov.w	r2, #4294967295
 8006e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e88:	f10a 0a01 	add.w	sl, sl, #1
 8006e8c:	9304      	str	r3, [sp, #16]
 8006e8e:	9307      	str	r3, [sp, #28]
 8006e90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e96:	4654      	mov	r4, sl
 8006e98:	2205      	movs	r2, #5
 8006e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e9e:	4853      	ldr	r0, [pc, #332]	@ (8006fec <_vfiprintf_r+0x21c>)
 8006ea0:	f7f9 f996 	bl	80001d0 <memchr>
 8006ea4:	9a04      	ldr	r2, [sp, #16]
 8006ea6:	b9d8      	cbnz	r0, 8006ee0 <_vfiprintf_r+0x110>
 8006ea8:	06d1      	lsls	r1, r2, #27
 8006eaa:	bf44      	itt	mi
 8006eac:	2320      	movmi	r3, #32
 8006eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006eb2:	0713      	lsls	r3, r2, #28
 8006eb4:	bf44      	itt	mi
 8006eb6:	232b      	movmi	r3, #43	@ 0x2b
 8006eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ec2:	d015      	beq.n	8006ef0 <_vfiprintf_r+0x120>
 8006ec4:	9a07      	ldr	r2, [sp, #28]
 8006ec6:	4654      	mov	r4, sl
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f04f 0c0a 	mov.w	ip, #10
 8006ece:	4621      	mov	r1, r4
 8006ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ed4:	3b30      	subs	r3, #48	@ 0x30
 8006ed6:	2b09      	cmp	r3, #9
 8006ed8:	d94b      	bls.n	8006f72 <_vfiprintf_r+0x1a2>
 8006eda:	b1b0      	cbz	r0, 8006f0a <_vfiprintf_r+0x13a>
 8006edc:	9207      	str	r2, [sp, #28]
 8006ede:	e014      	b.n	8006f0a <_vfiprintf_r+0x13a>
 8006ee0:	eba0 0308 	sub.w	r3, r0, r8
 8006ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	9304      	str	r3, [sp, #16]
 8006eec:	46a2      	mov	sl, r4
 8006eee:	e7d2      	b.n	8006e96 <_vfiprintf_r+0xc6>
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	1d19      	adds	r1, r3, #4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	9103      	str	r1, [sp, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bfbb      	ittet	lt
 8006efc:	425b      	neglt	r3, r3
 8006efe:	f042 0202 	orrlt.w	r2, r2, #2
 8006f02:	9307      	strge	r3, [sp, #28]
 8006f04:	9307      	strlt	r3, [sp, #28]
 8006f06:	bfb8      	it	lt
 8006f08:	9204      	strlt	r2, [sp, #16]
 8006f0a:	7823      	ldrb	r3, [r4, #0]
 8006f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f0e:	d10a      	bne.n	8006f26 <_vfiprintf_r+0x156>
 8006f10:	7863      	ldrb	r3, [r4, #1]
 8006f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f14:	d132      	bne.n	8006f7c <_vfiprintf_r+0x1ac>
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	1d1a      	adds	r2, r3, #4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	9203      	str	r2, [sp, #12]
 8006f1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f22:	3402      	adds	r4, #2
 8006f24:	9305      	str	r3, [sp, #20]
 8006f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006ffc <_vfiprintf_r+0x22c>
 8006f2a:	7821      	ldrb	r1, [r4, #0]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	4650      	mov	r0, sl
 8006f30:	f7f9 f94e 	bl	80001d0 <memchr>
 8006f34:	b138      	cbz	r0, 8006f46 <_vfiprintf_r+0x176>
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	eba0 000a 	sub.w	r0, r0, sl
 8006f3c:	2240      	movs	r2, #64	@ 0x40
 8006f3e:	4082      	lsls	r2, r0
 8006f40:	4313      	orrs	r3, r2
 8006f42:	3401      	adds	r4, #1
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f4a:	4829      	ldr	r0, [pc, #164]	@ (8006ff0 <_vfiprintf_r+0x220>)
 8006f4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f50:	2206      	movs	r2, #6
 8006f52:	f7f9 f93d 	bl	80001d0 <memchr>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d03f      	beq.n	8006fda <_vfiprintf_r+0x20a>
 8006f5a:	4b26      	ldr	r3, [pc, #152]	@ (8006ff4 <_vfiprintf_r+0x224>)
 8006f5c:	bb1b      	cbnz	r3, 8006fa6 <_vfiprintf_r+0x1d6>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	3307      	adds	r3, #7
 8006f62:	f023 0307 	bic.w	r3, r3, #7
 8006f66:	3308      	adds	r3, #8
 8006f68:	9303      	str	r3, [sp, #12]
 8006f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f6c:	443b      	add	r3, r7
 8006f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f70:	e76a      	b.n	8006e48 <_vfiprintf_r+0x78>
 8006f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f76:	460c      	mov	r4, r1
 8006f78:	2001      	movs	r0, #1
 8006f7a:	e7a8      	b.n	8006ece <_vfiprintf_r+0xfe>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	3401      	adds	r4, #1
 8006f80:	9305      	str	r3, [sp, #20]
 8006f82:	4619      	mov	r1, r3
 8006f84:	f04f 0c0a 	mov.w	ip, #10
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f8e:	3a30      	subs	r2, #48	@ 0x30
 8006f90:	2a09      	cmp	r2, #9
 8006f92:	d903      	bls.n	8006f9c <_vfiprintf_r+0x1cc>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0c6      	beq.n	8006f26 <_vfiprintf_r+0x156>
 8006f98:	9105      	str	r1, [sp, #20]
 8006f9a:	e7c4      	b.n	8006f26 <_vfiprintf_r+0x156>
 8006f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e7f0      	b.n	8006f88 <_vfiprintf_r+0x1b8>
 8006fa6:	ab03      	add	r3, sp, #12
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	462a      	mov	r2, r5
 8006fac:	4b12      	ldr	r3, [pc, #72]	@ (8006ff8 <_vfiprintf_r+0x228>)
 8006fae:	a904      	add	r1, sp, #16
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f7fd fda3 	bl	8004afc <_printf_float>
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	1c78      	adds	r0, r7, #1
 8006fba:	d1d6      	bne.n	8006f6a <_vfiprintf_r+0x19a>
 8006fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006fbe:	07d9      	lsls	r1, r3, #31
 8006fc0:	d405      	bmi.n	8006fce <_vfiprintf_r+0x1fe>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	059a      	lsls	r2, r3, #22
 8006fc6:	d402      	bmi.n	8006fce <_vfiprintf_r+0x1fe>
 8006fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006fca:	f7fe fad3 	bl	8005574 <__retarget_lock_release_recursive>
 8006fce:	89ab      	ldrh	r3, [r5, #12]
 8006fd0:	065b      	lsls	r3, r3, #25
 8006fd2:	f53f af1f 	bmi.w	8006e14 <_vfiprintf_r+0x44>
 8006fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006fd8:	e71e      	b.n	8006e18 <_vfiprintf_r+0x48>
 8006fda:	ab03      	add	r3, sp, #12
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	462a      	mov	r2, r5
 8006fe0:	4b05      	ldr	r3, [pc, #20]	@ (8006ff8 <_vfiprintf_r+0x228>)
 8006fe2:	a904      	add	r1, sp, #16
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	f7fe f821 	bl	800502c <_printf_i>
 8006fea:	e7e4      	b.n	8006fb6 <_vfiprintf_r+0x1e6>
 8006fec:	0800764f 	.word	0x0800764f
 8006ff0:	08007659 	.word	0x08007659
 8006ff4:	08004afd 	.word	0x08004afd
 8006ff8:	08006dad 	.word	0x08006dad
 8006ffc:	08007655 	.word	0x08007655

08007000 <__swbuf_r>:
 8007000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007002:	460e      	mov	r6, r1
 8007004:	4614      	mov	r4, r2
 8007006:	4605      	mov	r5, r0
 8007008:	b118      	cbz	r0, 8007012 <__swbuf_r+0x12>
 800700a:	6a03      	ldr	r3, [r0, #32]
 800700c:	b90b      	cbnz	r3, 8007012 <__swbuf_r+0x12>
 800700e:	f7fe f9b9 	bl	8005384 <__sinit>
 8007012:	69a3      	ldr	r3, [r4, #24]
 8007014:	60a3      	str	r3, [r4, #8]
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	071a      	lsls	r2, r3, #28
 800701a:	d501      	bpl.n	8007020 <__swbuf_r+0x20>
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	b943      	cbnz	r3, 8007032 <__swbuf_r+0x32>
 8007020:	4621      	mov	r1, r4
 8007022:	4628      	mov	r0, r5
 8007024:	f000 f82a 	bl	800707c <__swsetup_r>
 8007028:	b118      	cbz	r0, 8007032 <__swbuf_r+0x32>
 800702a:	f04f 37ff 	mov.w	r7, #4294967295
 800702e:	4638      	mov	r0, r7
 8007030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	6922      	ldr	r2, [r4, #16]
 8007036:	1a98      	subs	r0, r3, r2
 8007038:	6963      	ldr	r3, [r4, #20]
 800703a:	b2f6      	uxtb	r6, r6
 800703c:	4283      	cmp	r3, r0
 800703e:	4637      	mov	r7, r6
 8007040:	dc05      	bgt.n	800704e <__swbuf_r+0x4e>
 8007042:	4621      	mov	r1, r4
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff fde9 	bl	8006c1c <_fflush_r>
 800704a:	2800      	cmp	r0, #0
 800704c:	d1ed      	bne.n	800702a <__swbuf_r+0x2a>
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	3b01      	subs	r3, #1
 8007052:	60a3      	str	r3, [r4, #8]
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	6022      	str	r2, [r4, #0]
 800705a:	701e      	strb	r6, [r3, #0]
 800705c:	6962      	ldr	r2, [r4, #20]
 800705e:	1c43      	adds	r3, r0, #1
 8007060:	429a      	cmp	r2, r3
 8007062:	d004      	beq.n	800706e <__swbuf_r+0x6e>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	07db      	lsls	r3, r3, #31
 8007068:	d5e1      	bpl.n	800702e <__swbuf_r+0x2e>
 800706a:	2e0a      	cmp	r6, #10
 800706c:	d1df      	bne.n	800702e <__swbuf_r+0x2e>
 800706e:	4621      	mov	r1, r4
 8007070:	4628      	mov	r0, r5
 8007072:	f7ff fdd3 	bl	8006c1c <_fflush_r>
 8007076:	2800      	cmp	r0, #0
 8007078:	d0d9      	beq.n	800702e <__swbuf_r+0x2e>
 800707a:	e7d6      	b.n	800702a <__swbuf_r+0x2a>

0800707c <__swsetup_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	4b29      	ldr	r3, [pc, #164]	@ (8007124 <__swsetup_r+0xa8>)
 8007080:	4605      	mov	r5, r0
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	460c      	mov	r4, r1
 8007086:	b118      	cbz	r0, 8007090 <__swsetup_r+0x14>
 8007088:	6a03      	ldr	r3, [r0, #32]
 800708a:	b90b      	cbnz	r3, 8007090 <__swsetup_r+0x14>
 800708c:	f7fe f97a 	bl	8005384 <__sinit>
 8007090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007094:	0719      	lsls	r1, r3, #28
 8007096:	d422      	bmi.n	80070de <__swsetup_r+0x62>
 8007098:	06da      	lsls	r2, r3, #27
 800709a:	d407      	bmi.n	80070ac <__swsetup_r+0x30>
 800709c:	2209      	movs	r2, #9
 800709e:	602a      	str	r2, [r5, #0]
 80070a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070a4:	81a3      	strh	r3, [r4, #12]
 80070a6:	f04f 30ff 	mov.w	r0, #4294967295
 80070aa:	e033      	b.n	8007114 <__swsetup_r+0x98>
 80070ac:	0758      	lsls	r0, r3, #29
 80070ae:	d512      	bpl.n	80070d6 <__swsetup_r+0x5a>
 80070b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070b2:	b141      	cbz	r1, 80070c6 <__swsetup_r+0x4a>
 80070b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070b8:	4299      	cmp	r1, r3
 80070ba:	d002      	beq.n	80070c2 <__swsetup_r+0x46>
 80070bc:	4628      	mov	r0, r5
 80070be:	f7ff f8a7 	bl	8006210 <_free_r>
 80070c2:	2300      	movs	r3, #0
 80070c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	2300      	movs	r3, #0
 80070d0:	6063      	str	r3, [r4, #4]
 80070d2:	6923      	ldr	r3, [r4, #16]
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	89a3      	ldrh	r3, [r4, #12]
 80070d8:	f043 0308 	orr.w	r3, r3, #8
 80070dc:	81a3      	strh	r3, [r4, #12]
 80070de:	6923      	ldr	r3, [r4, #16]
 80070e0:	b94b      	cbnz	r3, 80070f6 <__swsetup_r+0x7a>
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80070e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ec:	d003      	beq.n	80070f6 <__swsetup_r+0x7a>
 80070ee:	4621      	mov	r1, r4
 80070f0:	4628      	mov	r0, r5
 80070f2:	f000 f883 	bl	80071fc <__smakebuf_r>
 80070f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070fa:	f013 0201 	ands.w	r2, r3, #1
 80070fe:	d00a      	beq.n	8007116 <__swsetup_r+0x9a>
 8007100:	2200      	movs	r2, #0
 8007102:	60a2      	str	r2, [r4, #8]
 8007104:	6962      	ldr	r2, [r4, #20]
 8007106:	4252      	negs	r2, r2
 8007108:	61a2      	str	r2, [r4, #24]
 800710a:	6922      	ldr	r2, [r4, #16]
 800710c:	b942      	cbnz	r2, 8007120 <__swsetup_r+0xa4>
 800710e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007112:	d1c5      	bne.n	80070a0 <__swsetup_r+0x24>
 8007114:	bd38      	pop	{r3, r4, r5, pc}
 8007116:	0799      	lsls	r1, r3, #30
 8007118:	bf58      	it	pl
 800711a:	6962      	ldrpl	r2, [r4, #20]
 800711c:	60a2      	str	r2, [r4, #8]
 800711e:	e7f4      	b.n	800710a <__swsetup_r+0x8e>
 8007120:	2000      	movs	r0, #0
 8007122:	e7f7      	b.n	8007114 <__swsetup_r+0x98>
 8007124:	2000001c 	.word	0x2000001c

08007128 <_raise_r>:
 8007128:	291f      	cmp	r1, #31
 800712a:	b538      	push	{r3, r4, r5, lr}
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
 8007130:	d904      	bls.n	800713c <_raise_r+0x14>
 8007132:	2316      	movs	r3, #22
 8007134:	6003      	str	r3, [r0, #0]
 8007136:	f04f 30ff 	mov.w	r0, #4294967295
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800713e:	b112      	cbz	r2, 8007146 <_raise_r+0x1e>
 8007140:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007144:	b94b      	cbnz	r3, 800715a <_raise_r+0x32>
 8007146:	4628      	mov	r0, r5
 8007148:	f000 f830 	bl	80071ac <_getpid_r>
 800714c:	4622      	mov	r2, r4
 800714e:	4601      	mov	r1, r0
 8007150:	4628      	mov	r0, r5
 8007152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007156:	f000 b817 	b.w	8007188 <_kill_r>
 800715a:	2b01      	cmp	r3, #1
 800715c:	d00a      	beq.n	8007174 <_raise_r+0x4c>
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	d103      	bne.n	800716a <_raise_r+0x42>
 8007162:	2316      	movs	r3, #22
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	2001      	movs	r0, #1
 8007168:	e7e7      	b.n	800713a <_raise_r+0x12>
 800716a:	2100      	movs	r1, #0
 800716c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007170:	4620      	mov	r0, r4
 8007172:	4798      	blx	r3
 8007174:	2000      	movs	r0, #0
 8007176:	e7e0      	b.n	800713a <_raise_r+0x12>

08007178 <raise>:
 8007178:	4b02      	ldr	r3, [pc, #8]	@ (8007184 <raise+0xc>)
 800717a:	4601      	mov	r1, r0
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	f7ff bfd3 	b.w	8007128 <_raise_r>
 8007182:	bf00      	nop
 8007184:	2000001c 	.word	0x2000001c

08007188 <_kill_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4d07      	ldr	r5, [pc, #28]	@ (80071a8 <_kill_r+0x20>)
 800718c:	2300      	movs	r3, #0
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	4611      	mov	r1, r2
 8007194:	602b      	str	r3, [r5, #0]
 8007196:	f7fa feb3 	bl	8001f00 <_kill>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	d102      	bne.n	80071a4 <_kill_r+0x1c>
 800719e:	682b      	ldr	r3, [r5, #0]
 80071a0:	b103      	cbz	r3, 80071a4 <_kill_r+0x1c>
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	bd38      	pop	{r3, r4, r5, pc}
 80071a6:	bf00      	nop
 80071a8:	200005fc 	.word	0x200005fc

080071ac <_getpid_r>:
 80071ac:	f7fa bea0 	b.w	8001ef0 <_getpid>

080071b0 <__swhatbuf_r>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	460c      	mov	r4, r1
 80071b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b8:	2900      	cmp	r1, #0
 80071ba:	b096      	sub	sp, #88	@ 0x58
 80071bc:	4615      	mov	r5, r2
 80071be:	461e      	mov	r6, r3
 80071c0:	da0d      	bge.n	80071de <__swhatbuf_r+0x2e>
 80071c2:	89a3      	ldrh	r3, [r4, #12]
 80071c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	bf14      	ite	ne
 80071ce:	2340      	movne	r3, #64	@ 0x40
 80071d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071d4:	2000      	movs	r0, #0
 80071d6:	6031      	str	r1, [r6, #0]
 80071d8:	602b      	str	r3, [r5, #0]
 80071da:	b016      	add	sp, #88	@ 0x58
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	466a      	mov	r2, sp
 80071e0:	f000 f848 	bl	8007274 <_fstat_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	dbec      	blt.n	80071c2 <__swhatbuf_r+0x12>
 80071e8:	9901      	ldr	r1, [sp, #4]
 80071ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071f2:	4259      	negs	r1, r3
 80071f4:	4159      	adcs	r1, r3
 80071f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071fa:	e7eb      	b.n	80071d4 <__swhatbuf_r+0x24>

080071fc <__smakebuf_r>:
 80071fc:	898b      	ldrh	r3, [r1, #12]
 80071fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007200:	079d      	lsls	r5, r3, #30
 8007202:	4606      	mov	r6, r0
 8007204:	460c      	mov	r4, r1
 8007206:	d507      	bpl.n	8007218 <__smakebuf_r+0x1c>
 8007208:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	2301      	movs	r3, #1
 8007212:	6163      	str	r3, [r4, #20]
 8007214:	b003      	add	sp, #12
 8007216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007218:	ab01      	add	r3, sp, #4
 800721a:	466a      	mov	r2, sp
 800721c:	f7ff ffc8 	bl	80071b0 <__swhatbuf_r>
 8007220:	9f00      	ldr	r7, [sp, #0]
 8007222:	4605      	mov	r5, r0
 8007224:	4639      	mov	r1, r7
 8007226:	4630      	mov	r0, r6
 8007228:	f7ff f866 	bl	80062f8 <_malloc_r>
 800722c:	b948      	cbnz	r0, 8007242 <__smakebuf_r+0x46>
 800722e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007232:	059a      	lsls	r2, r3, #22
 8007234:	d4ee      	bmi.n	8007214 <__smakebuf_r+0x18>
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	f043 0302 	orr.w	r3, r3, #2
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	e7e2      	b.n	8007208 <__smakebuf_r+0xc>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	6020      	str	r0, [r4, #0]
 8007246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	9b01      	ldr	r3, [sp, #4]
 800724e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007252:	b15b      	cbz	r3, 800726c <__smakebuf_r+0x70>
 8007254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007258:	4630      	mov	r0, r6
 800725a:	f000 f81d 	bl	8007298 <_isatty_r>
 800725e:	b128      	cbz	r0, 800726c <__smakebuf_r+0x70>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f023 0303 	bic.w	r3, r3, #3
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	81a3      	strh	r3, [r4, #12]
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	431d      	orrs	r5, r3
 8007270:	81a5      	strh	r5, [r4, #12]
 8007272:	e7cf      	b.n	8007214 <__smakebuf_r+0x18>

08007274 <_fstat_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d07      	ldr	r5, [pc, #28]	@ (8007294 <_fstat_r+0x20>)
 8007278:	2300      	movs	r3, #0
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	4611      	mov	r1, r2
 8007280:	602b      	str	r3, [r5, #0]
 8007282:	f7fa fe9d 	bl	8001fc0 <_fstat>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d102      	bne.n	8007290 <_fstat_r+0x1c>
 800728a:	682b      	ldr	r3, [r5, #0]
 800728c:	b103      	cbz	r3, 8007290 <_fstat_r+0x1c>
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	bd38      	pop	{r3, r4, r5, pc}
 8007292:	bf00      	nop
 8007294:	200005fc 	.word	0x200005fc

08007298 <_isatty_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d06      	ldr	r5, [pc, #24]	@ (80072b4 <_isatty_r+0x1c>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	f7fa fe9c 	bl	8001fe0 <_isatty>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_isatty_r+0x1a>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_isatty_r+0x1a>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	200005fc 	.word	0x200005fc

080072b8 <_init>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr

080072c4 <_fini>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr
